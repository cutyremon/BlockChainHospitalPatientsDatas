{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/regenerator\");\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nvar _require = require(\"readable-stream\"),\n    Readable = _require.Readable;\n\nvar getSymbol = typeof Symbol === \"function\" ? function (name) {\n  var symbol = Symbol[name];\n  return symbol !== undefined ? symbol : \"@@\".concat(name);\n} : function (name) {\n  return \"@@\".concat(name);\n};\nvar $$asyncIterator = asyncIteratorToStream.$$asyncIterator = getSymbol(\"asyncIterator\");\nvar $$iterator = asyncIteratorToStream.$$iterator = getSymbol(\"iterator\");\n\nvar resolveToIterator = function resolveToIterator(value) {\n  var tmp;\n\n  if (typeof (tmp = value[$$asyncIterator]) === \"function\") {\n    return tmp.call(value);\n  }\n\n  if (typeof (tmp = value[$$iterator]) === \"function\") {\n    return tmp.call(value);\n  }\n\n  return value;\n};\n\nfunction asyncIteratorToStream(iterable, options) {\n  if (typeof iterable === \"function\") {\n    return function () {\n      return asyncIteratorToStream(iterable.apply(this, arguments), options);\n    };\n  }\n\n  var then = iterable.then;\n\n  if (typeof then === \"function\") {\n    return then.call(iterable, function (iterable) {\n      return asyncIteratorToStream(iterable, options);\n    });\n  }\n\n  var iterator = resolveToIterator(iterable);\n  var isGenerator = \"return\" in iterator;\n  var readable = options instanceof Readable ? options : new Readable(options);\n\n  if (isGenerator) {\n    readable._destroy = function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(error, cb) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return error != null ? iterator.throw(error) : iterator.return();\n\n              case 3:\n                _context.next = 8;\n                break;\n\n              case 5:\n                _context.prev = 5;\n                _context.t0 = _context[\"catch\"](0);\n                return _context.abrupt(\"return\", cb(_context.t0));\n\n              case 8:\n                cb(error);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 5]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  }\n\n  var running = false;\n\n  readable._read = function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(size) {\n      var value, cursor;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!running) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 2:\n              running = true;\n              _context2.prev = 3;\n\n            case 4:\n              cursor = iterator.next(size);\n\n              if (!(typeof cursor.then === \"function\")) {\n                _context2.next = 11;\n                break;\n              }\n\n              _context2.next = 8;\n              return cursor;\n\n            case 8:\n              cursor = _context2.sent;\n              _context2.next = 25;\n              break;\n\n            case 11:\n              if (!(!cursor.done && (value = cursor.value) != null && typeof value.then === \"function\")) {\n                _context2.next = 25;\n                break;\n              }\n\n              _context2.prev = 12;\n              _context2.next = 15;\n              return value;\n\n            case 15:\n              value = _context2.sent;\n              _context2.next = 22;\n              break;\n\n            case 18:\n              _context2.prev = 18;\n              _context2.t0 = _context2[\"catch\"](12);\n              cursor = iterator.throw(_context2.t0);\n              return _context2.abrupt(\"continue\", 11);\n\n            case 22:\n              cursor = iterator.next(value);\n              _context2.next = 11;\n              break;\n\n            case 25:\n              if (!cursor.done) {\n                _context2.next = 27;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", readable.push(null));\n\n            case 27:\n              value = cursor.value;\n\n            case 28:\n              if (value === undefined || readable.push(value)) {\n                _context2.next = 4;\n                break;\n              }\n\n            case 29:\n              _context2.next = 34;\n              break;\n\n            case 31:\n              _context2.prev = 31;\n              _context2.t1 = _context2[\"catch\"](3);\n              process.nextTick(readable.emit.bind(readable, \"error\", _context2.t1));\n\n            case 34:\n              _context2.prev = 34;\n              running = false;\n              return _context2.finish(34);\n\n            case 37:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[3, 31, 34, 37], [12, 18]]);\n    }));\n\n    return function (_x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return readable;\n}\n\nmodule.exports = asyncIteratorToStream;\n\nasyncIteratorToStream.obj = function (iterable, options) {\n  return asyncIteratorToStream(iterable, _extends({\n    objectMode: true\n  }, options));\n};","map":null,"metadata":{},"sourceType":"script"}