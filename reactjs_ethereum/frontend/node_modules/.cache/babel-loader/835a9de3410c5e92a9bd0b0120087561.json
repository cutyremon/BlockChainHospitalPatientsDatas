{"ast":null,"code":"'use strict';\n\nvar promisify = require('promisify-es6');\n\nvar setImmediate = require('async/setImmediate');\n\nvar errCode = require('err-code');\n\nvar errPubsubDisabled = function errPubsubDisabled() {\n  return errCode(new Error('pubsub experiment is not enabled'), 'ERR_PUBSUB_DISABLED');\n};\n\nmodule.exports = function pubsub(self) {\n  return {\n    subscribe: function subscribe(topic, handler, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      if (!self._options.EXPERIMENTAL.pubsub) {\n        return callback ? setImmediate(function () {\n          return callback(errPubsubDisabled());\n        }) : Promise.reject(errPubsubDisabled());\n      }\n\n      if (!callback) {\n        return new Promise(function (resolve, reject) {\n          self.libp2p.pubsub.subscribe(topic, options, handler, function (err) {\n            if (err) {\n              return reject(err);\n            }\n\n            resolve();\n          });\n        });\n      }\n\n      self.libp2p.pubsub.subscribe(topic, options, handler, callback);\n    },\n    unsubscribe: function unsubscribe(topic, handler, callback) {\n      if (!self._options.EXPERIMENTAL.pubsub) {\n        return callback ? setImmediate(function () {\n          return callback(errPubsubDisabled());\n        }) : Promise.reject(errPubsubDisabled());\n      }\n\n      self.libp2p.pubsub.unsubscribe(topic, handler);\n\n      if (!callback) {\n        return Promise.resolve();\n      }\n\n      setImmediate(function () {\n        return callback();\n      });\n    },\n    publish: promisify(function (topic, data, callback) {\n      if (!self._options.EXPERIMENTAL.pubsub) {\n        return setImmediate(function () {\n          return callback(errPubsubDisabled());\n        });\n      }\n\n      self.libp2p.pubsub.publish(topic, data, callback);\n    }),\n    ls: promisify(function (callback) {\n      if (!self._options.EXPERIMENTAL.pubsub) {\n        return setImmediate(function () {\n          return callback(errPubsubDisabled());\n        });\n      }\n\n      self.libp2p.pubsub.ls(callback);\n    }),\n    peers: promisify(function (topic, callback) {\n      if (!self._options.EXPERIMENTAL.pubsub) {\n        return setImmediate(function () {\n          return callback(errPubsubDisabled());\n        });\n      }\n\n      self.libp2p.pubsub.peers(topic, callback);\n    }),\n    setMaxListeners: function setMaxListeners(n) {\n      if (!self._options.EXPERIMENTAL.pubsub) {\n        throw errPubsubDisabled();\n      }\n\n      self.libp2p.pubsub.setMaxListeners(n);\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}