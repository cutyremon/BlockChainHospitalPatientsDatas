{"ast":null,"code":"'use strict';\n\nvar promisify = require('promisify-es6');\n\nvar pull = require('pull-stream');\n\nvar sort = require('pull-sort');\n\nvar isSource = require('is-pull-stream').isSource;\n\nvar validateAddInput = require('ipfs-utils/src/files/add-input-validation');\n\nmodule.exports = function (self) {\n  var add = promisify(function (data, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n\n    try {\n      validateAddInput(data);\n    } catch (err) {\n      return callback(err);\n    }\n\n    pull(pull.values([data]), self.addPullStream(options), sort(function (a, b) {\n      if (a.path < b.path) return 1;\n      if (a.path > b.path) return -1;\n      return 0;\n    }), pull.collect(callback));\n  });\n  return function () {\n    var args = Array.from(arguments); // If we .add(<pull stream>), then promisify thinks the pull stream\n    // is a callback! Add an empty options object in this case so that a\n    // promise is returned.\n\n    if (args.length === 1 && isSource(args[0])) {\n      args.push({});\n    }\n\n    return add.apply(null, args);\n  };\n};","map":null,"metadata":{},"sourceType":"script"}