{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _regeneratorRuntime = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _awaitAsyncGenerator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar errCode = require('err-code');\n\nvar UnixFS = require('ipfs-unixfs');\n\nvar persist = require('../../utils/persist');\n\nvar _require = require('ipld-dag-pb'),\n    DAGNode = _require.DAGNode,\n    DAGLink = _require.DAGLink;\n\nvar all = require('async-iterator-all');\n\nvar dagBuilders = {\n  flat: require('./flat'),\n  balanced: require('./balanced'),\n  trickle: require('./trickle')\n};\n\nfunction buildFile(_x, _x2, _x3) {\n  return _buildFile.apply(this, arguments);\n}\n\nfunction _buildFile() {\n  _buildFile = _wrapAsyncGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(source, ipld, options) {\n    var count, previous, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, buffer, node, unixfs, opts, cid, entry;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            count = -1;\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 3;\n            _iterator = _asyncIterator(source);\n\n          case 5:\n            _context.next = 7;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 7:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 11;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 11:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 38;\n              break;\n            }\n\n            buffer = _value;\n            count++;\n            options.progress(buffer.length);\n            node = void 0;\n            unixfs = void 0;\n            opts = _objectSpread({}, options);\n\n            if (options.rawLeaves) {\n              node = buffer;\n              opts.codec = 'raw';\n              opts.cidVersion = 1;\n            } else {\n              unixfs = new UnixFS(options.leafType, buffer);\n              node = DAGNode.create(unixfs.marshal(), []);\n            }\n\n            _context.next = 22;\n            return _awaitAsyncGenerator(persist(node, ipld, opts));\n\n          case 22:\n            cid = _context.sent;\n            entry = {\n              cid: cid,\n              unixfs: unixfs,\n              node: node\n            };\n\n            if (!(count === 0)) {\n              _context.next = 29;\n              break;\n            }\n\n            previous = entry;\n            return _context.abrupt(\"continue\", 35);\n\n          case 29:\n            if (!(count === 1)) {\n              _context.next = 33;\n              break;\n            }\n\n            _context.next = 32;\n            return previous;\n\n          case 32:\n            previous = null;\n\n          case 33:\n            _context.next = 35;\n            return entry;\n\n          case 35:\n            _iteratorNormalCompletion = true;\n            _context.next = 5;\n            break;\n\n          case 38:\n            _context.next = 44;\n            break;\n\n          case 40:\n            _context.prev = 40;\n            _context.t0 = _context[\"catch\"](3);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 44:\n            _context.prev = 44;\n            _context.prev = 45;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 49;\n              break;\n            }\n\n            _context.next = 49;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 49:\n            _context.prev = 49;\n\n            if (!_didIteratorError) {\n              _context.next = 52;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 52:\n            return _context.finish(49);\n\n          case 53:\n            return _context.finish(44);\n\n          case 54:\n            if (!previous) {\n              _context.next = 58;\n              break;\n            }\n\n            previous.single = true;\n            _context.next = 58;\n            return previous;\n\n          case 58:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[3, 40, 44, 54], [45,, 49, 53]]);\n  }));\n  return _buildFile.apply(this, arguments);\n}\n\nvar reduce = function reduce(file, ipld, options) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(leaves) {\n        var leaf, f, links, node, cid;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(leaves.length === 1 && leaves[0].single && options.reduceSingleLeafToSelf)) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                leaf = leaves[0];\n                return _context2.abrupt(\"return\", {\n                  cid: leaf.cid,\n                  path: file.path,\n                  name: (file.path || '').split('/').pop(),\n                  unixfs: leaf.unixfs,\n                  node: leaf.node\n                });\n\n              case 3:\n                // create a parent node and add all the leaves\n                f = new UnixFS('file');\n                links = leaves.filter(function (leaf) {\n                  if (leaf.cid.codec === 'raw' && leaf.node.length) {\n                    return true;\n                  }\n\n                  if (!leaf.unixfs.data && leaf.unixfs.fileSize()) {\n                    return true;\n                  }\n\n                  return Boolean(leaf.unixfs.data.length);\n                }).map(function (leaf) {\n                  if (leaf.cid.codec === 'raw') {\n                    // node is a leaf buffer\n                    f.addBlockSize(leaf.node.length);\n                    return new DAGLink(leaf.name, leaf.node.length, leaf.cid);\n                  }\n\n                  if (!leaf.unixfs.data) {\n                    // node is an intermediate node\n                    f.addBlockSize(leaf.unixfs.fileSize());\n                  } else {\n                    // node is a unixfs 'file' leaf node\n                    f.addBlockSize(leaf.unixfs.data.length);\n                  }\n\n                  return new DAGLink(leaf.name, leaf.node.size, leaf.cid);\n                });\n                node = DAGNode.create(f.marshal(), links);\n                _context2.next = 8;\n                return persist(node, ipld, options);\n\n              case 8:\n                cid = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  cid: cid,\n                  path: file.path,\n                  unixfs: f,\n                  node: node,\n                  size: node.size\n                });\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x4) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\n\nvar fileBuilder =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(file, source, ipld, options) {\n    var dagBuilder, roots;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            dagBuilder = dagBuilders[options.strategy];\n\n            if (dagBuilder) {\n              _context3.next = 3;\n              break;\n            }\n\n            throw errCode(new Error(\"Unknown importer build strategy name: \".concat(options.strategy)), 'ERR_BAD_STRATEGY');\n\n          case 3:\n            _context3.next = 5;\n            return all(dagBuilder(buildFile(source, ipld, options), reduce(file, ipld, options), options.builderOptions));\n\n          case 5:\n            roots = _context3.sent;\n\n            if (!(roots.length > 1)) {\n              _context3.next = 8;\n              break;\n            }\n\n            throw errCode(new Error('expected a maximum of 1 roots and got ' + roots.length), 'ETOOMANYROOTS');\n\n          case 8:\n            return _context3.abrupt(\"return\", roots[0]);\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function fileBuilder(_x5, _x6, _x7, _x8) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nmodule.exports = fileBuilder;","map":null,"metadata":{},"sourceType":"script"}