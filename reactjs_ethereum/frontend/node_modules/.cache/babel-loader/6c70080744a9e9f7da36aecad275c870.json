{"ast":null,"code":"import _regeneratorRuntime from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/src/Components/CreateMedical.js\";\nimport React, { Component } from 'react';\nimport ipfs from './ipfs';\nimport IPFSUploader from 'ipfs-image-web-upload';\nimport IPFS from 'ipfs';\n\nvar Patient =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Patient, _Component);\n\n  function Patient(props) {\n    var _this;\n\n    _classCallCheck(this, Patient);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Patient).call(this));\n\n    _this.loadFile = function () {\n      var input, file, fr;\n      input = document.getElementById('fileinput');\n      file = input.files[0];\n      fr = new FileReader();\n      fr.onload = receivedText();\n\n      function receivedText() {\n        return _receivedText.apply(this, arguments);\n      }\n\n      function _receivedText() {\n        _receivedText = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee() {\n          var contentdata, repoPath, ipfs1, ipfs2;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  fr = new FileReader();\n                  fr.readAsBinaryString(file);\n                  _context.next = 4;\n                  return Buffer.from(btoa(fr.result), \"base64\");\n\n                case 4:\n                  contentdata = _context.sent;\n                  //IPFS START\n                  repoPath = 'ipfs-1111'; //+ Math.random()\n\n                  ipfs1 = new IPFS({\n                    repo: repoPath\n                  });\n                  ipfs2 = ipfs1;\n                  ipfs1.on('ready', function () {\n                    var files = [{\n                      path: 'image.png',\n                      content: Buffer.from(btoa(fr.result), \"base64\")\n                    }];\n                    ipfs2.files.add(files, function (err, files) {\n                      var url = \"https://ipfs.io/ipfs/\" + files[0].hash;\n                      log(\"Storing file on IPFS using Javascript. HASH: https://ipfs.io/ipfs/\" + files[0].hash);\n                      var ipfsPath = files[0].hash;\n                      ipfs.files.cat(ipfsPath, function (err, file) {\n                        if (err) {\n                          throw err;\n                        }\n\n                        var img = file.toString(\"base64\");\n                        document.getElementById(\"design_display\").src = \"data:image/png;base64,\" + img;\n                      });\n                    });\n\n                    var log = function log(line) {\n                      document.getElementById('output').appendChild(document.createTextNode(\"\".concat(line, \"\\r\\n\")));\n                    };\n                  });\n\n                case 9:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n        return _receivedText.apply(this, arguments);\n      }\n    };\n\n    _this.loadImage = function () {\n      var input, file, fr;\n      input = document.getElementById('inputtext').value; //IPFS START\n\n      var repoPath = 'ipfs-1111'; //+ Math.random()\n\n      var ipfs = new IPFS({\n        repo: repoPath\n      });\n      ipfs.on('ready', function () {\n        var ipfsPath = input;\n        ipfs.files.cat(ipfsPath, function (err, file) {\n          if (err) {\n            throw err;\n          }\n\n          var img = file.toString(\"base64\");\n          document.getElementById(\"design_display\").src = \"data:image/png;base64,\" + img;\n        });\n\n        var log = function log(line) {\n          document.getElementById('output').appendChild(document.createTextNode(\"\".concat(line, \"\\r\\n\")));\n        };\n      });\n    };\n\n    _this.loadImage1 =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(event) {\n        var uploader, hash, img_tag;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                uploader = new IPFSUploader(new IPFS());\n                _context2.next = 3;\n                return uploader.uploadBlob(event.target.files[0]);\n\n              case 3:\n                hash = _context2.sent;\n\n                _this.setState({\n                  ipfsHashImg: hash\n                });\n\n                img_tag = document.querySelector(\"design_display\");\n                uploader.loadImage(img_tag, hash); // let ipfsPath = input\n                // console.log(\"loadmig\" + ipfsPath)\n                // ipfs.files.cat(ipfsPath, function (err, file) {\n                //   if (err) {\n                //     console.log(\"error \" +err )\n                //   }\n                //   let img = file.toString(\"base64\");\n                //   document.getElementById(\"design_display\").src = \"data:image/png;base64,\" + img;\n                // })\n                // const log = (line) => {\n                //   document.getElementById('output').appendChild(document.createTextNode(`${line}\\r\\n`))\n                // }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.ipfsUpload =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var buffer;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return Buffer.from(\"toi di an thit cho\");\n\n            case 2:\n              buffer = _context3.sent;\n              ipfs.add(buffer, function (err, ipfsHash) {\n                if (err) return console.error(err);\n                console.log(\"ma ban\" + ipfsHash[0].hash);\n\n                _this.setState({\n                  ipfsHashData: ipfsHash[0].hash\n                });\n              });\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    _this.ipfsGetdata =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4() {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              ipfs.cat(_this.state.ipfsHashData, function (err, data) {\n                if (err) return console.error(err);\n                console.log(\"data\" + data.toString());\n              });\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n    _this.state = {\n      ipfsHashData: \"\",\n      ipfsHashImg: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(Patient, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"col-md-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"#\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \"Create medical \"), React.createElement(\"span\", {\n        className: \"pull-right-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        type: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        onClick: function onClick(event) {\n          return _this2.ipfsUpload();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"get data\",\n        onClick: function onClick(event) {\n          return _this2.ipfsGetdata();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"file\",\n        id: \"fileinput\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"submit file\",\n        onClick: function onClick(event) {\n          return _this2.loadFile();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"show file\",\n        onClick: function onClick(event) {\n          return _this2.loadImage(_this2.state.ipfsHashImg);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        id: \"design_display\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Patient;\n}(Component);\n\nexport default Patient;","map":{"version":3,"sources":["/home/cutyremon/blockChain/reactjs_ethereum/frontend/src/Components/CreateMedical.js"],"names":["React","Component","ipfs","IPFSUploader","IPFS","Patient","props","loadFile","input","file","fr","document","getElementById","files","FileReader","onload","receivedText","readAsBinaryString","Buffer","from","btoa","result","contentdata","repoPath","ipfs1","repo","ipfs2","on","path","content","add","err","url","hash","log","ipfsPath","cat","img","toString","src","line","appendChild","createTextNode","loadImage","value","loadImage1","event","uploader","uploadBlob","target","setState","ipfsHashImg","img_tag","querySelector","ipfsUpload","buffer","ipfsHash","console","error","ipfsHashData","ipfsGetdata","state","data"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ipfs from './ipfs';\nimport IPFSUploader from 'ipfs-image-web-upload';\nimport IPFS from 'ipfs';\n\nclass Patient extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      ipfsHashData: \"\",\n      ipfsHashImg: \"\"\n    }\n\n  }\n\n  \n  loadFile= ()=> {\n    var input, file, fr;\n\n    input = document.getElementById('fileinput');\n\n    file = input.files[0];\n    fr = new FileReader();\n    fr.onload = receivedText();\n     \n\n    async function receivedText() {\n        fr = new FileReader();\n        fr.readAsBinaryString(file);\n        let contentdata = await Buffer.from(btoa(fr.result),\"base64\")\n         \n        //IPFS START\n        const repoPath = 'ipfs-1111' //+ Math.random()\n        const ipfs1 = new IPFS({ repo: repoPath })\nlet ipfs2= ipfs1;\n         ipfs1.on('ready', () => {\n            const files = [\n            {\n                path: 'image.png',\n                content: Buffer.from(btoa(fr.result),\"base64\")\n            }\n            ]\n\n            ipfs2.files.add(files, function (err, files) {\n                let url = \"https://ipfs.io/ipfs/\"+files[0].hash;\n                log(\"Storing file on IPFS using Javascript. HASH: https://ipfs.io/ipfs/\"+files[0].hash);\n                let ipfsPath = files[0].hash\n                ipfs.files.cat(ipfsPath, function (err, file) {\n                if (err) {\n                    throw err\n                }\n                let img = file.toString(\"base64\");\n                document.getElementById(\"design_display\").src= \"data:image/png;base64,\" + img;\n                })\n            })\n \n            const log = (line) => {\n                document.getElementById('output').appendChild(document.createTextNode(`${line}\\r\\n`))\n            }\n \n \n        })\n    }\n\n\n}\n \n \n loadImage = ()=> {\n    var input, file, fr;\n\n    input = document.getElementById('inputtext').value;\n         \n        //IPFS START\n        const repoPath = 'ipfs-1111' //+ Math.random()\n        const ipfs = new IPFS({ repo: repoPath })\n\n        ipfs.on('ready', () => {\n\n               let  ipfsPath = input\n                ipfs.files.cat(ipfsPath, function (err, file) {\n                if (err) {\n                    throw err\n                }\n                let img = file.toString(\"base64\");\n                document.getElementById(\"design_display\").src= \"data:image/png;base64,\" + img;\n                })\n \n            const log = (line) => {\n                document.getElementById('output').appendChild(document.createTextNode(`${line}\\r\\n`))\n            }\n \n \n        })\n     \n\n\n}\n\n\n\n  loadImage1 = async (event) => {\n    var uploader = new IPFSUploader(new IPFS());\nvar hash = await uploader.uploadBlob(event.target.files[0]);\nthis.setState({\n  ipfsHashImg:hash\n})\n    let img_tag = document.querySelector(\"design_display\");\n    uploader.loadImage(img_tag, hash);\n\n    // let ipfsPath = input\n    // console.log(\"loadmig\" + ipfsPath)\n    // ipfs.files.cat(ipfsPath, function (err, file) {\n    //   if (err) {\n    //     console.log(\"error \" +err )\n\n    //   }\n    //   let img = file.toString(\"base64\");\n    //   document.getElementById(\"design_display\").src = \"data:image/png;base64,\" + img;\n    // })\n\n    // const log = (line) => {\n    //   document.getElementById('output').appendChild(document.createTextNode(`${line}\\r\\n`))\n    // }\n  }\n\n  ipfsUpload = async () => {\n    const buffer = await Buffer.from(\"toi di an thit cho\");\n    ipfs.add(buffer, (err, ipfsHash) => {\n      if (err) return console.error(err)\n      console.log(\"ma ban\" + ipfsHash[0].hash)\n      this.setState({\n        ipfsHashData: ipfsHash[0].hash\n      })\n\n    })\n  }\n  ipfsGetdata = async () => {\n    ipfs.cat(this.state.ipfsHashData, (err, data) => {\n      if (err) return console.error(err)\n      console.log(\"data\" + data.toString())\n    })\n  }\n  render() {\n    return (\n      <div className=\"col-md-3\">\n        <a href=\"#\">\n          <span>Create medical </span>\n          <span className=\"pull-right-container\">\n          </span>\n        </a>\n        <input type=\"text\"  ></input>\n        <input type=\"submit\" onClick={event => this.ipfsUpload()}></input>\n        <input type=\"submit\" value=\"get data\" onClick={event => this.ipfsGetdata()}></input>\n        <input type=\"file\" id=\"fileinput\" ></input>\n        <input type=\"submit\" value=\"submit file\" onClick={event => this.loadFile()}></input>\n        <input type=\"submit\" value=\"show file\" onClick={event => this.loadImage(this.state.ipfsHashImg)}></input>\n        <br />\n        <img id=\"design_display\"/>\n\n      </div>\n    )\n  }\n}\n\nexport default Patient;"]},"metadata":{},"sourceType":"module"}