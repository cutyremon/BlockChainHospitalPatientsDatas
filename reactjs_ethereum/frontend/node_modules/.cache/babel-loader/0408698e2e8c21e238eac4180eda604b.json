{"ast":null,"code":"import _regeneratorRuntime from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/src/App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Web3 from 'web3';\nimport TruffleContract from 'truffle-contract';\nimport Nav from \"./Components/Nav\";\nimport UnlockMetamask from \"./Components/UnlockMetamask\";\nimport PatientFactory from './build/contracts/PatientFactory.json';\nimport SetSick from \"./build/contracts/SetSick.json\";\nimport SickFactory from './build/contracts/SickFactory.json';\nimport Container from './Components/Container';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));\n\n    _this.setNetwork = function () {\n      var networkName,\n          that = _assertThisInitialized(_assertThisInitialized(_this));\n\n      _this.web3.version.getNetwork(function (err, networkId) {\n        switch (networkId) {\n          case \"1\":\n            networkName = \"Main\";\n            break;\n\n          case \"2\":\n            networkName = \"Morden\";\n            break;\n\n          case \"3\":\n            networkName = \"Ropsten\";\n            break;\n\n          case \"4\":\n            networkName = \"Rinkeby\";\n            break;\n\n          case \"42\":\n            networkName = \"Kovan\";\n            break;\n\n          default:\n            networkName = networkId;\n        }\n\n        that.setState({\n          network: networkName\n        });\n      });\n    };\n\n    _this.getPatient = function () {};\n\n    _this.componentDidMount =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var account, app, accounts, networkId, PatientDeploy, SickDeploy, SetSickDeploy, patientContract;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              account = _this.web3.eth.coinbase;\n              app = _assertThisInitialized(_assertThisInitialized(_this));\n              _context.prev = 2;\n\n              _this.setNetwork();\n\n              _context.next = 6;\n              return _this.web3.eth.getAccounts();\n\n            case 6:\n              accounts = _context.sent;\n              _context.next = 9;\n              return _this.web3.eth.net.getId();\n\n            case 9:\n              networkId = _context.sent;\n              PatientDeploy = PatientFactory.networks[networkId];\n              SickDeploy = SickFactory.networks[_this.state.network];\n              SetSickDeploy = SetSick.networks[_this.state.network];\n              patientContract = _this.web3.eth.contract(PatientFactory.abi, PatientDeploy && PatientDeploy.address);\n\n              _this.setState({\n                patientContract: patientContract,\n                accounts: accounts\n              });\n\n              _context.next = 22;\n              break;\n\n            case 17:\n              _context.prev = 17;\n              _context.t0 = _context[\"catch\"](2);\n              alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n              console.log(\"error to doko\");\n              console.error(_context.t0);\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 17]]);\n    }));\n\n    _this.setPatient =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(name, cmt, age, sex) {\n        var patientContract, userAccount;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                patientContract = _this.state.patientContract;\n                userAccount = _this.web3.eth.accounts[0];\n                _context2.next = 4;\n                return patientContract.methods.CreatePatient(name, cmt, age, sex).send({\n                  from: userAccount\n                });\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x, _x2, _x3, _x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.getPatient = function () {// const {}\n    };\n\n    _this.isWeb3 = true;\n    _this.isWeb3Locked = false;\n    _this.appName = \"Patient Data\";\n    _this.state = {\n      network: \"checking...\",\n      accounts: null,\n      patientContract: null\n    };\n    var web3 = window.web3;\n\n    if (typeof web3 !== \"undefined\") {\n      _this.web3Provider = web3.currentProvider;\n      _this.web3 = new Web3(web3.currentProvider);\n      if (web3.eth.coinbase === null) _this.isWeb3Locked = true;\n    } else {\n      _this.isWeb3 = false;\n    }\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (this.isWeb3) {\n        if (this.isWeb3Locked) {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 117\n            },\n            __self: this\n          }, React.createElement(Nav, {\n            appName: this.appName,\n            network: this.state.network,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 118\n            },\n            __self: this\n          }), React.createElement(UnlockMetamask, {\n            message: \"Unlock Your Metamask/Mist Wallet\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 119\n            },\n            __self: this\n          }));\n        } else {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 123\n            },\n            __self: this\n          }, React.createElement(Nav, {\n            appName: this.appName,\n            network: this.state.network,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 124\n            },\n            __self: this\n          }), React.createElement(Container, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 125\n            },\n            __self: this\n          }), React.createElement(\"button\", {\n            onClick: function onClick(event) {\n              return _this2.setPatient(\"cuong\", 45645, 23, 1);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 126\n            },\n            __self: this\n          }, \" new patient\"), React.createElement(\"h2\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 127\n            },\n            __self: this\n          }, \" den day roi \"));\n        }\n      } else {\n        return React.createElement(\"div\", {\n          className: \"App\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131\n          },\n          __self: this\n        }, React.createElement(\"header\", {\n          className: \"App-header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: logo,\n          className: \"App-logo\",\n          alt: \"logo\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        }), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }, \"Edit \", React.createElement(\"code\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }, \"src/App.js\"), \" and save to reload.\"), React.createElement(\"a\", {\n          className: \"App-link\",\n          href: \"https://reactjs.org\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        }, \"start up\")));\n      }\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/src/App.js"],"names":["React","Component","Web3","TruffleContract","Nav","UnlockMetamask","PatientFactory","SetSick","SickFactory","Container","App","setNetwork","networkName","that","web3","version","getNetwork","err","networkId","setState","network","getPatient","componentDidMount","account","eth","coinbase","app","getAccounts","accounts","net","getId","PatientDeploy","networks","SickDeploy","state","SetSickDeploy","patientContract","contract","abi","address","alert","console","log","error","setPatient","name","cmt","age","sex","userAccount","methods","CreatePatient","send","from","isWeb3","isWeb3Locked","appName","window","web3Provider","currentProvider","event","logo"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Web3 from 'web3';\nimport TruffleContract from 'truffle-contract';\nimport Nav from \"./Components/Nav\";\nimport UnlockMetamask from \"./Components/UnlockMetamask\";\nimport PatientFactory from './build/contracts/PatientFactory.json';\nimport SetSick from \"./build/contracts/SetSick.json\";\nimport SickFactory from './build/contracts/SickFactory.json';\nimport Container from './Components/Container';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.isWeb3 = true;\n    this.isWeb3Locked = false;\n    this.appName = \"Patient Data\";\n\n    this.state = {\n      network: \"checking...\",\n      accounts: null,\n      patientContract:null\n    };\n\n    let web3 = window.web3;\n    if (typeof web3 !== \"undefined\") {\n      this.web3Provider = web3.currentProvider;\n      this.web3 = new Web3(web3.currentProvider);\n\n      if (web3.eth.coinbase === null)\n        this.isWeb3Locked = true;\n    } else {\n\n      this.isWeb3 = false;\n    }\n  }\n\n  setNetwork = () => {\n    let networkName,\n      that = this;\n\n    this.web3.version.getNetwork(function(err, networkId) {\n      switch (networkId) {\n      case \"1\":\n        networkName = \"Main\";\n        break;\n      case \"2\":\n        networkName = \"Morden\";\n        break;\n      case \"3\":\n        networkName = \"Ropsten\";\n        break;\n      case \"4\":\n        networkName = \"Rinkeby\";\n        break;\n      case \"42\":\n        networkName = \"Kovan\";\n        break;\n      default:\n        networkName = networkId;\n      }\n      that.setState({\n        network: networkName\n      })\n    });\n  };\n\n  getPatient = ()=>{\n    }\n\n\n  componentDidMount = async() => {\n    let account = this.web3.eth.coinbase;\n    let app = this;\ntry{\n    this.setNetwork(); \n\n    const accounts = await this.web3.eth.getAccounts();\n    const networkId = await this.web3.eth.net.getId();\n    const PatientDeploy= PatientFactory.networks[networkId];\n    const SickDeploy=SickFactory.networks[this.state.network];\n    const SetSickDeploy=SetSick.networks[this.state.network];\n\n    const patientContract =this.web3.eth.contract(\n      PatientFactory.abi,PatientDeploy && PatientDeploy.address\n    );\n\n    this.setState({\n      patientContract,\n      accounts\n    })\n}catch(err){\n  alert(\n    `Failed to load web3, accounts, or contract. Check console for details.`,\n  );\n  console.log(\"error to doko\");\n  console.error(err);\n}\n  }\n\n  setPatient = async(name,cmt,age,sex)=>{\n    const {patientContract}=this.state;\n    var userAccount =this.web3.eth.accounts[0];\n    await patientContract.methods.CreatePatient(name,cmt,age,sex).send({from:userAccount})\n  }\n  getPatient=()=>{\n    // const {}\n  }\n\n\n  render() {\n    if (this.isWeb3) {\n      if (this.isWeb3Locked) {\n        return (\n          <div>\n            <Nav appName={ this.appName } network={ this.state.network } />\n            <UnlockMetamask message=\"Unlock Your Metamask/Mist Wallet\" />\n          </div>)\n      } else {\n        return (\n          <div>\n            <Nav appName={ this.appName } network={ this.state.network } />\n            <Container/>\n            <button onClick={event=>this.setPatient(\"cuong\",45645,23,1)}> new patient</button>\n            <h2> den day roi </h2></div>)\n      }\n    } else {\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={ logo } className=\"App-logo\" alt=\"logo\" />\n            <p>\n              Edit <code>src/App.js</code> and save to reload.\n            </p>\n            <a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n                                                                                       start up\n                                                                                     </a>\n          </header>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}