{"ast":null,"code":"'use strict';\n\nvar debug = require('debug');\n\nvar errcode = require('err-code');\n\nvar promisify = require('promisify-es6');\n\nvar IpnsPubsubDatastore = require('../ipns/routing/pubsub-datastore');\n\nvar log = debug('ipfs:name-pubsub');\nlog.error = debug('ipfs:name-pubsub:error'); // Is pubsub enabled\n\nvar isNamePubsubEnabled = function isNamePubsubEnabled(node) {\n  try {\n    return Boolean(getPubsubRouting(node));\n  } catch (err) {\n    return false;\n  }\n}; // Get pubsub from IPNS routing\n\n\nvar getPubsubRouting = function getPubsubRouting(node) {\n  if (!node._ipns || !node._options.EXPERIMENTAL.ipnsPubsub) {\n    var errMsg = 'IPNS pubsub subsystem is not enabled';\n    throw errcode(errMsg, 'ERR_IPNS_PUBSUB_NOT_ENABLED');\n  } // Only one store and it is pubsub\n\n\n  if (IpnsPubsubDatastore.isIpnsPubsubDatastore(node._ipns.routing)) {\n    return node._ipns.routing;\n  } // Find in tiered\n\n\n  var pubsub = (node._ipns.routing.stores || []).find(function (s) {\n    return IpnsPubsubDatastore.isIpnsPubsubDatastore(s);\n  });\n\n  if (!pubsub) {\n    var _errMsg = 'IPNS pubsub datastore not found';\n    throw errcode(_errMsg, 'ERR_PUBSUB_DATASTORE_NOT_FOUND');\n  }\n\n  return pubsub;\n};\n\nmodule.exports = function namePubsub(self) {\n  return {\n    /**\n     * Query the state of IPNS pubsub.\n     *\n     * @returns {Promise|void}\n     */\n    state: promisify(function (callback) {\n      callback(null, {\n        enabled: isNamePubsubEnabled(self)\n      });\n    }),\n\n    /**\n     * Cancel a name subscription.\n     *\n     * @param {String} name subscription name.\n     * @param {function(Error)} [callback]\n     * @returns {Promise|void}\n     */\n    cancel: promisify(function (name, callback) {\n      var pubsub;\n\n      try {\n        pubsub = getPubsubRouting(self);\n      } catch (err) {\n        return callback(err);\n      }\n\n      pubsub.cancel(name, callback);\n    }),\n\n    /**\n     * Show current name subscriptions.\n     *\n     * @param {function(Error)} [callback]\n     * @returns {Promise|void}\n     */\n    subs: promisify(function (callback) {\n      var pubsub;\n\n      try {\n        pubsub = getPubsubRouting(self);\n      } catch (err) {\n        return callback(err);\n      }\n\n      pubsub.getSubscriptions(callback);\n    })\n  };\n};","map":null,"metadata":{},"sourceType":"script"}