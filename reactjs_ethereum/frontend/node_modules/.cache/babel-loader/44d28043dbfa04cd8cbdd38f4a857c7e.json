{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _regeneratorRuntime = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _awaitAsyncGenerator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _require = require('ipld-dag-pb'),\n    DAGLink = _require.DAGLink,\n    DAGNode = _require.DAGNode;\n\nvar UnixFS = require('ipfs-unixfs');\n\nvar multihashing = require('multihashing-async');\n\nvar Dir = require('./dir');\n\nvar persist = require('./utils/persist');\n\nvar Bucket = require('hamt-sharding');\n\nvar extend = require('deep-extend');\n\nvar hashFn =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(value) {\n    var hash, justHash, length, result, i;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return multihashing(Buffer.from(value, 'utf8'), 'murmur3-128');\n\n          case 2:\n            hash = _context.sent;\n            // Multihashing inserts preamble of 2 bytes. Remove it.\n            // Also, murmur3 outputs 128 bit but, accidently, IPFS Go's\n            // implementation only uses the first 64, so we must do the same\n            // for parity..\n            justHash = hash.slice(2, 10);\n            length = justHash.length;\n            result = Buffer.alloc(length); // TODO: invert buffer because that's how Go impl does it\n\n            for (i = 0; i < length; i++) {\n              result[length - i - 1] = justHash[i];\n            }\n\n            return _context.abrupt(\"return\", result);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function hashFn(_x5) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nhashFn.code = 0x22; // TODO: get this from multihashing-async?\n\nvar defaultOptions = {\n  hashFn: hashFn\n};\n\nvar DirSharded =\n/*#__PURE__*/\nfunction (_Dir) {\n  _inherits(DirSharded, _Dir);\n\n  function DirSharded(props, options) {\n    var _this3;\n\n    _classCallCheck(this, DirSharded);\n\n    options = extend({}, defaultOptions, options);\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(DirSharded).call(this, props, options));\n    _this3._bucket = Bucket(options);\n    return _this3;\n  }\n\n  _createClass(DirSharded, [{\n    key: \"put\",\n    value: function () {\n      var _put = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(name, value) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this._bucket.put(name, value);\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function put(_x6, _x7) {\n        return _put.apply(this, arguments);\n      }\n\n      return put;\n    }()\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(name) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", this._bucket.get(name));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function get(_x8) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n  }, {\n    key: \"childCount\",\n    value: function childCount() {\n      return this._bucket.leafCount();\n    }\n  }, {\n    key: \"directChildrenCount\",\n    value: function directChildrenCount() {\n      return this._bucket.childrenCount();\n    }\n  }, {\n    key: \"onlyChild\",\n    value: function onlyChild() {\n      return this._bucket.onlyChild();\n    }\n  }, {\n    key: \"eachChildSeries\",\n    value: function eachChildSeries() {\n      var _this = this;\n\n      return _wrapAsyncGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, _value5, key, value;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context4.prev = 2;\n                _iterator = _asyncIterator(_this._bucket.eachLeafSeries());\n\n              case 4:\n                _context4.next = 6;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 6:\n                _step = _context4.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context4.next = 10;\n                return _awaitAsyncGenerator(_step.value);\n\n              case 10:\n                _value = _context4.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context4.next = 18;\n                  break;\n                }\n\n                _value5 = _value, key = _value5.key, value = _value5.value;\n                _context4.next = 15;\n                return {\n                  key: key,\n                  child: value\n                };\n\n              case 15:\n                _iteratorNormalCompletion = true;\n                _context4.next = 4;\n                break;\n\n              case 18:\n                _context4.next = 24;\n                break;\n\n              case 20:\n                _context4.prev = 20;\n                _context4.t0 = _context4[\"catch\"](2);\n                _didIteratorError = true;\n                _iteratorError = _context4.t0;\n\n              case 24:\n                _context4.prev = 24;\n                _context4.prev = 25;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context4.next = 29;\n                  break;\n                }\n\n                _context4.next = 29;\n                return _awaitAsyncGenerator(_iterator.return());\n\n              case 29:\n                _context4.prev = 29;\n\n                if (!_didIteratorError) {\n                  _context4.next = 32;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 32:\n                return _context4.finish(29);\n\n              case 33:\n                return _context4.finish(24);\n\n              case 34:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[2, 20, 24, 34], [25,, 29, 33]]);\n      }))();\n    }\n  }, {\n    key: \"flush\",\n    value: function flush(path, ipld) {\n      var _this2 = this;\n\n      return _wrapAsyncGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5() {\n        var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, entry;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _iteratorNormalCompletion2 = true;\n                _didIteratorError2 = false;\n                _context5.prev = 2;\n                _iterator2 = _asyncIterator(_flush2(path, _this2._bucket, ipld, _this2.options));\n\n              case 4:\n                _context5.next = 6;\n                return _awaitAsyncGenerator(_iterator2.next());\n\n              case 6:\n                _step2 = _context5.sent;\n                _iteratorNormalCompletion2 = _step2.done;\n                _context5.next = 10;\n                return _awaitAsyncGenerator(_step2.value);\n\n              case 10:\n                _value2 = _context5.sent;\n\n                if (_iteratorNormalCompletion2) {\n                  _context5.next = 18;\n                  break;\n                }\n\n                entry = _value2;\n                _context5.next = 15;\n                return entry;\n\n              case 15:\n                _iteratorNormalCompletion2 = true;\n                _context5.next = 4;\n                break;\n\n              case 18:\n                _context5.next = 24;\n                break;\n\n              case 20:\n                _context5.prev = 20;\n                _context5.t0 = _context5[\"catch\"](2);\n                _didIteratorError2 = true;\n                _iteratorError2 = _context5.t0;\n\n              case 24:\n                _context5.prev = 24;\n                _context5.prev = 25;\n\n                if (!(!_iteratorNormalCompletion2 && _iterator2.return != null)) {\n                  _context5.next = 29;\n                  break;\n                }\n\n                _context5.next = 29;\n                return _awaitAsyncGenerator(_iterator2.return());\n\n              case 29:\n                _context5.prev = 29;\n\n                if (!_didIteratorError2) {\n                  _context5.next = 32;\n                  break;\n                }\n\n                throw _iteratorError2;\n\n              case 32:\n                return _context5.finish(29);\n\n              case 33:\n                return _context5.finish(24);\n\n              case 34:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, null, [[2, 20, 24, 34], [25,, 29, 33]]);\n      }))();\n    }\n  }]);\n\n  return DirSharded;\n}(Dir);\n\nmodule.exports = DirSharded;\nmodule.exports.hashFn = hashFn;\n\nfunction _flush2(_x, _x2, _x3, _x4) {\n  return _flush.apply(this, arguments);\n}\n\nfunction _flush() {\n  _flush = _wrapAsyncGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee6(path, bucket, ipld, options) {\n    var children, links, i, child, labelPrefix, shard, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _value3, subShard, _dir, flushedDir, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, _value4, entry, label, value, _label, size, data, dir, node, cid;\n\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            children = bucket._children;\n            links = [];\n            i = 0;\n\n          case 3:\n            if (!(i < children.length)) {\n              _context6.next = 115;\n              break;\n            }\n\n            child = children.get(i);\n\n            if (child) {\n              _context6.next = 7;\n              break;\n            }\n\n            return _context6.abrupt(\"continue\", 112);\n\n          case 7:\n            labelPrefix = i.toString(16).toUpperCase().padStart(2, '0');\n\n            if (!Bucket.isBucket(child)) {\n              _context6.next = 54;\n              break;\n            }\n\n            shard = void 0;\n            _iteratorNormalCompletion3 = true;\n            _didIteratorError3 = false;\n            _context6.prev = 12;\n            _context6.t0 = _asyncIterator;\n            _context6.next = 16;\n            return _awaitAsyncGenerator(_flush2('', child, ipld, options));\n\n          case 16:\n            _context6.t1 = _context6.sent;\n            _iterator3 = (0, _context6.t0)(_context6.t1);\n\n          case 18:\n            _context6.next = 20;\n            return _awaitAsyncGenerator(_iterator3.next());\n\n          case 20:\n            _step3 = _context6.sent;\n            _iteratorNormalCompletion3 = _step3.done;\n            _context6.next = 24;\n            return _awaitAsyncGenerator(_step3.value);\n\n          case 24:\n            _value3 = _context6.sent;\n\n            if (_iteratorNormalCompletion3) {\n              _context6.next = 31;\n              break;\n            }\n\n            subShard = _value3;\n            shard = subShard;\n\n          case 28:\n            _iteratorNormalCompletion3 = true;\n            _context6.next = 18;\n            break;\n\n          case 31:\n            _context6.next = 37;\n            break;\n\n          case 33:\n            _context6.prev = 33;\n            _context6.t2 = _context6[\"catch\"](12);\n            _didIteratorError3 = true;\n            _iteratorError3 = _context6.t2;\n\n          case 37:\n            _context6.prev = 37;\n            _context6.prev = 38;\n\n            if (!(!_iteratorNormalCompletion3 && _iterator3.return != null)) {\n              _context6.next = 42;\n              break;\n            }\n\n            _context6.next = 42;\n            return _awaitAsyncGenerator(_iterator3.return());\n\n          case 42:\n            _context6.prev = 42;\n\n            if (!_didIteratorError3) {\n              _context6.next = 45;\n              break;\n            }\n\n            throw _iteratorError3;\n\n          case 45:\n            return _context6.finish(42);\n\n          case 46:\n            return _context6.finish(37);\n\n          case 47:\n            _context6.t3 = links;\n            _context6.next = 50;\n            return _awaitAsyncGenerator(new DAGLink(labelPrefix, shard.node.size, shard.cid));\n\n          case 50:\n            _context6.t4 = _context6.sent;\n\n            _context6.t3.push.call(_context6.t3, _context6.t4);\n\n            _context6.next = 112;\n            break;\n\n          case 54:\n            if (!(typeof child.value.flush === 'function')) {\n              _context6.next = 96;\n              break;\n            }\n\n            _dir = child.value;\n            flushedDir = void 0;\n            _iteratorNormalCompletion4 = true;\n            _didIteratorError4 = false;\n            _context6.prev = 59;\n            _iterator4 = _asyncIterator(_dir.flush(_dir.path, ipld));\n\n          case 61:\n            _context6.next = 63;\n            return _awaitAsyncGenerator(_iterator4.next());\n\n          case 63:\n            _step4 = _context6.sent;\n            _iteratorNormalCompletion4 = _step4.done;\n            _context6.next = 67;\n            return _awaitAsyncGenerator(_step4.value);\n\n          case 67:\n            _value4 = _context6.sent;\n\n            if (_iteratorNormalCompletion4) {\n              _context6.next = 76;\n              break;\n            }\n\n            entry = _value4;\n            flushedDir = entry;\n            _context6.next = 73;\n            return flushedDir;\n\n          case 73:\n            _iteratorNormalCompletion4 = true;\n            _context6.next = 61;\n            break;\n\n          case 76:\n            _context6.next = 82;\n            break;\n\n          case 78:\n            _context6.prev = 78;\n            _context6.t5 = _context6[\"catch\"](59);\n            _didIteratorError4 = true;\n            _iteratorError4 = _context6.t5;\n\n          case 82:\n            _context6.prev = 82;\n            _context6.prev = 83;\n\n            if (!(!_iteratorNormalCompletion4 && _iterator4.return != null)) {\n              _context6.next = 87;\n              break;\n            }\n\n            _context6.next = 87;\n            return _awaitAsyncGenerator(_iterator4.return());\n\n          case 87:\n            _context6.prev = 87;\n\n            if (!_didIteratorError4) {\n              _context6.next = 90;\n              break;\n            }\n\n            throw _iteratorError4;\n\n          case 90:\n            return _context6.finish(87);\n\n          case 91:\n            return _context6.finish(82);\n\n          case 92:\n            label = labelPrefix + child.key;\n            links.push(new DAGLink(label, flushedDir.node.size, flushedDir.cid));\n            _context6.next = 112;\n            break;\n\n          case 96:\n            value = child.value;\n\n            if (value.node) {\n              _context6.next = 105;\n              break;\n            }\n\n            if (!value.cid) {\n              _context6.next = 104;\n              break;\n            }\n\n            _context6.next = 101;\n            return _awaitAsyncGenerator(ipld.get(value.cid));\n\n          case 101:\n            value.node = _context6.sent;\n            _context6.next = 105;\n            break;\n\n          case 104:\n            return _context6.abrupt(\"continue\", 112);\n\n          case 105:\n            _label = labelPrefix + child.key;\n            size = value.node.length || value.node.size || value.node.Size;\n            _context6.t6 = links;\n            _context6.next = 110;\n            return _awaitAsyncGenerator(new DAGLink(_label, size, value.cid));\n\n          case 110:\n            _context6.t7 = _context6.sent;\n\n            _context6.t6.push.call(_context6.t6, _context6.t7);\n\n          case 112:\n            i++;\n            _context6.next = 3;\n            break;\n\n          case 115:\n            // go-ipfs uses little endian, that's why we have to\n            // reverse the bit field before storing it\n            data = Buffer.from(children.bitField().reverse());\n            dir = new UnixFS('hamt-sharded-directory', data);\n            dir.fanout = bucket.tableSize();\n            dir.hashType = options.hashFn.code;\n            node = DAGNode.create(dir.marshal(), links);\n            _context6.next = 122;\n            return _awaitAsyncGenerator(persist(node, ipld, options));\n\n          case 122:\n            cid = _context6.sent;\n            _context6.next = 125;\n            return {\n              cid: cid,\n              node: node,\n              unixfs: dir,\n              path: path\n            };\n\n          case 125:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6, null, [[12, 33, 37, 47], [38,, 42, 46], [59, 78, 82, 92], [83,, 87, 91]]);\n  }));\n  return _flush.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"script"}