{"ast":null,"code":"'use strict';\n\nvar mortice = require('mortice');\n\nvar lock;\n\nmodule.exports = function (repoOwner) {\n  if (lock) {\n    return lock;\n  }\n\n  var mutex = mortice({\n    // ordinarily the main thread would store the read/write lock but\n    // if we are the thread that owns the repo, we can store the lock\n    // on this process even if we are a worker thread\n    singleProcess: repoOwner\n  });\n  lock = {\n    readLock: function readLock(func) {\n      return function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return mutex.readLock(function () {\n          return func.apply(null, args);\n        });\n      };\n    },\n    writeLock: function writeLock(func) {\n      return function () {\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        return mutex.writeLock(function () {\n          return func.apply(null, args);\n        });\n      };\n    }\n  };\n  return lock;\n};","map":null,"metadata":{},"sourceType":"script"}