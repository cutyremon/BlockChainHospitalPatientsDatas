{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _regeneratorRuntime = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar errCode = require('err-code');\n\nvar Long = require('long');\n\nvar BufferList = require('bl');\n\nvar rabin;\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  var _rabinChunker = _wrapAsyncGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(source, options) {\n    var min, max, avg, sizepow, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, chunk;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!rabin) {\n              try {\n                rabin = nativeRabin();\n              } catch (_) {\n                // fallback to js implementation\n                rabin = jsRabin();\n              }\n            }\n\n            if (options.minChunkSize && options.maxChunkSize && options.avgChunkSize) {\n              avg = options.avgChunkSize;\n              min = options.minChunkSize;\n              max = options.maxChunkSize;\n            } else {\n              avg = options.avgChunkSize;\n              min = avg / 3;\n              max = avg + avg / 2;\n            }\n\n            sizepow = Math.floor(Math.log2(avg));\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 5;\n            _iterator = _asyncIterator(rabin(source, {\n              min: min,\n              max: max,\n              bits: sizepow,\n              window: options.window,\n              polynomial: options.polynomial\n            }));\n\n          case 7:\n            _context.next = 9;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 9:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 13;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 13:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 21;\n              break;\n            }\n\n            chunk = _value;\n            _context.next = 18;\n            return chunk;\n\n          case 18:\n            _iteratorNormalCompletion = true;\n            _context.next = 7;\n            break;\n\n          case 21:\n            _context.next = 27;\n            break;\n\n          case 23:\n            _context.prev = 23;\n            _context.t0 = _context[\"catch\"](5);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 27:\n            _context.prev = 27;\n            _context.prev = 28;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 32;\n              break;\n            }\n\n            _context.next = 32;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 32:\n            _context.prev = 32;\n\n            if (!_didIteratorError) {\n              _context.next = 35;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 35:\n            return _context.finish(32);\n\n          case 36:\n            return _context.finish(27);\n\n          case 37:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[5, 23, 27, 37], [28,, 32, 36]]);\n  }));\n\n  function rabinChunker(_x, _x2) {\n    return _rabinChunker.apply(this, arguments);\n  }\n\n  return rabinChunker;\n}();\n\nvar nativeRabin = function nativeRabin() {\n  var createRabin = require('rabin');\n\n  if (typeof rabin !== 'function') {\n    throw errCode(new Error(\"rabin was not a function\"), 'ERR_UNSUPPORTED');\n  }\n\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _wrapAsyncGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(source, options) {\n        var rabin, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, chunk, sizes, i, size, buf;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                rabin = createRabin(options); // TODO: rewrite rabin using node streams v3\n\n                _iteratorNormalCompletion2 = true;\n                _didIteratorError2 = false;\n                _context2.prev = 3;\n                _iterator2 = _asyncIterator(source);\n\n              case 5:\n                _context2.next = 7;\n                return _awaitAsyncGenerator(_iterator2.next());\n\n              case 7:\n                _step2 = _context2.sent;\n                _iteratorNormalCompletion2 = _step2.done;\n                _context2.next = 11;\n                return _awaitAsyncGenerator(_step2.value);\n\n              case 11:\n                _value2 = _context2.sent;\n\n                if (_iteratorNormalCompletion2) {\n                  _context2.next = 32;\n                  break;\n                }\n\n                chunk = _value2;\n                rabin.buffers.append(chunk);\n                rabin.pending.push(chunk);\n                sizes = [];\n                rabin.rabin.fingerprint(rabin.pending, sizes);\n                rabin.pending = [];\n                i = 0;\n\n              case 20:\n                if (!(i < sizes.length)) {\n                  _context2.next = 29;\n                  break;\n                }\n\n                size = sizes[i];\n                buf = rabin.buffers.slice(0, size);\n                rabin.buffers.consume(size);\n                _context2.next = 26;\n                return buf;\n\n              case 26:\n                i++;\n                _context2.next = 20;\n                break;\n\n              case 29:\n                _iteratorNormalCompletion2 = true;\n                _context2.next = 5;\n                break;\n\n              case 32:\n                _context2.next = 38;\n                break;\n\n              case 34:\n                _context2.prev = 34;\n                _context2.t0 = _context2[\"catch\"](3);\n                _didIteratorError2 = true;\n                _iteratorError2 = _context2.t0;\n\n              case 38:\n                _context2.prev = 38;\n                _context2.prev = 39;\n\n                if (!(!_iteratorNormalCompletion2 && _iterator2.return != null)) {\n                  _context2.next = 43;\n                  break;\n                }\n\n                _context2.next = 43;\n                return _awaitAsyncGenerator(_iterator2.return());\n\n              case 43:\n                _context2.prev = 43;\n\n                if (!_didIteratorError2) {\n                  _context2.next = 46;\n                  break;\n                }\n\n                throw _iteratorError2;\n\n              case 46:\n                return _context2.finish(43);\n\n              case 47:\n                return _context2.finish(38);\n\n              case 48:\n                if (!rabin.buffers.length) {\n                  _context2.next = 51;\n                  break;\n                }\n\n                _context2.next = 51;\n                return rabin.buffers.slice(0);\n\n              case 51:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[3, 34, 38, 48], [39,, 43, 47]]);\n      }));\n\n      return function (_x3, _x4) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\n\nvar jsRabin = function jsRabin() {\n  // see https://github.com/datproject/rabin/blob/c0378395dc0a125ab21ac176ec504f9995b34e62/src/rabin.cc\n  var Rabin =\n  /*#__PURE__*/\n  function () {\n    function Rabin(options) {\n      _classCallCheck(this, Rabin);\n\n      this.window = new Array(options.window || 64).fill(Long.fromInt(0));\n      this.wpos = 0;\n      this.count = 0;\n      this.digest = Long.fromInt(0);\n      this.chunkLength = 0;\n      this.polynomial = options.polynomial;\n      this.polynomialDegree = 53;\n      this.polynomialShift = this.polynomialDegree - 8;\n      this.averageBits = options.bits || 12;\n      this.minSize = options.min || 8 * 1024;\n      this.maxSize = options.max || 32 * 1024;\n      this.mask = Long.fromInt(1).shiftLeft(this.averageBits).subtract(1);\n      this.modTable = [];\n      this.outTable = [];\n      this.calculateTables();\n    }\n\n    _createClass(Rabin, [{\n      key: \"calculateTables\",\n      value: function calculateTables() {\n        for (var i = 0; i < 256; i++) {\n          var hash = Long.fromInt(0, true);\n          hash = this.appendByte(hash, i);\n\n          for (var j = 0; j < this.window.length - 1; j++) {\n            hash = this.appendByte(hash, 0);\n          }\n\n          this.outTable[i] = hash;\n        }\n\n        var k = this.deg(this.polynomial);\n\n        for (var _i = 0; _i < 256; _i++) {\n          var b = Long.fromInt(_i, true);\n          this.modTable[_i] = b.shiftLeft(k).modulo(this.polynomial).or(b.shiftLeft(k));\n        }\n      }\n    }, {\n      key: \"deg\",\n      value: function deg(p) {\n        var mask = Long.fromString('0x8000000000000000', true, 16);\n\n        for (var i = 0; i < 64; i++) {\n          if (mask.and(p).greaterThan(0)) {\n            return Long.fromInt(63 - i);\n          }\n\n          mask = mask.shiftRight(1);\n        }\n\n        return Long.fromInt(-1);\n      }\n    }, {\n      key: \"appendByte\",\n      value: function appendByte(hash, b) {\n        hash = hash.shiftLeft(8);\n        hash = hash.or(b);\n        return hash.modulo(this.polynomial);\n      }\n    }, {\n      key: \"getFingerprints\",\n      value: function getFingerprints(bufs) {\n        var lengths = [];\n\n        for (var i = 0; i < bufs.length; i++) {\n          var buf = bufs[i];\n\n          while (true) {\n            var remaining = this.nextChunk(buf);\n\n            if (remaining < 0) {\n              break;\n            }\n\n            buf = buf.slice(remaining);\n            lengths.push(this.chunkLength);\n          }\n        }\n\n        return lengths;\n      }\n    }, {\n      key: \"nextChunk\",\n      value: function nextChunk(buf) {\n        for (var i = 0; i < buf.length; i++) {\n          var val = Long.fromInt(buf[i]);\n          this.slide(val);\n          this.count++;\n\n          if (this.count >= this.minSize && this.digest.and(this.mask).equals(0) || this.count >= this.maxSize) {\n            this.chunkLength = this.count;\n            this.reset();\n            return i + 1;\n          }\n        }\n\n        return -1;\n      }\n    }, {\n      key: \"slide\",\n      value: function slide(value) {\n        var out = this.window[this.wpos].toInt() & 255;\n        this.window[this.wpos] = value;\n        this.digest = this.digest.xor(this.outTable[out]);\n        this.wpos = (this.wpos + 1) % this.window.length;\n        this.append(value);\n      }\n    }, {\n      key: \"reset\",\n      value: function reset() {\n        this.window = this.window.map(function () {\n          return Long.fromInt(0);\n        });\n        this.wpos = 0;\n        this.count = 0;\n        this.digest = Long.fromInt(0);\n        this.slide(Long.fromInt(1));\n      }\n    }, {\n      key: \"append\",\n      value: function append(value) {\n        var index = this.digest.shiftRight(this.polynomialShift).toInt() & 255;\n        this.digest = this.digest.shiftLeft(8);\n        this.digest = this.digest.or(value);\n        var entry = this.modTable[index];\n\n        if (entry) {\n          this.digest = this.digest.xor(entry);\n        }\n      }\n    }]);\n\n    return Rabin;\n  }();\n\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _wrapAsyncGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(source, options) {\n        var r, buffers, pending, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _value3, chunk, sizes, i, size, buf;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                r = new Rabin(options);\n                buffers = new BufferList();\n                pending = [];\n                _iteratorNormalCompletion3 = true;\n                _didIteratorError3 = false;\n                _context3.prev = 5;\n                _iterator3 = _asyncIterator(source);\n\n              case 7:\n                _context3.next = 9;\n                return _awaitAsyncGenerator(_iterator3.next());\n\n              case 9:\n                _step3 = _context3.sent;\n                _iteratorNormalCompletion3 = _step3.done;\n                _context3.next = 13;\n                return _awaitAsyncGenerator(_step3.value);\n\n              case 13:\n                _value3 = _context3.sent;\n\n                if (_iteratorNormalCompletion3) {\n                  _context3.next = 33;\n                  break;\n                }\n\n                chunk = _value3;\n                buffers.append(chunk);\n                pending.push(chunk);\n                sizes = r.getFingerprints(pending);\n                pending = [];\n                i = 0;\n\n              case 21:\n                if (!(i < sizes.length)) {\n                  _context3.next = 30;\n                  break;\n                }\n\n                size = sizes[i];\n                buf = buffers.slice(0, size);\n                buffers.consume(size);\n                _context3.next = 27;\n                return buf;\n\n              case 27:\n                i++;\n                _context3.next = 21;\n                break;\n\n              case 30:\n                _iteratorNormalCompletion3 = true;\n                _context3.next = 7;\n                break;\n\n              case 33:\n                _context3.next = 39;\n                break;\n\n              case 35:\n                _context3.prev = 35;\n                _context3.t0 = _context3[\"catch\"](5);\n                _didIteratorError3 = true;\n                _iteratorError3 = _context3.t0;\n\n              case 39:\n                _context3.prev = 39;\n                _context3.prev = 40;\n\n                if (!(!_iteratorNormalCompletion3 && _iterator3.return != null)) {\n                  _context3.next = 44;\n                  break;\n                }\n\n                _context3.next = 44;\n                return _awaitAsyncGenerator(_iterator3.return());\n\n              case 44:\n                _context3.prev = 44;\n\n                if (!_didIteratorError3) {\n                  _context3.next = 47;\n                  break;\n                }\n\n                throw _iteratorError3;\n\n              case 47:\n                return _context3.finish(44);\n\n              case 48:\n                return _context3.finish(39);\n\n              case 49:\n                if (!buffers.length) {\n                  _context3.next = 52;\n                  break;\n                }\n\n                _context3.next = 52;\n                return buffers.slice(0);\n\n              case 52:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[5, 35, 39, 49], [40,, 44, 48]]);\n      }));\n\n      return function (_x5, _x6) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n};","map":null,"metadata":{},"sourceType":"script"}