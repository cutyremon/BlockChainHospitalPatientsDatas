{"ast":null,"code":"'use strict';\n\nvar PeerId = require('peer-id');\n\nvar PeerInfo = require('peer-info');\n\nvar multiaddr = require('multiaddr');\n\nvar errCode = require('err-code');\n\nmodule.exports = function (node) {\n  /*\n   * Helper method to check the data type of peer and convert it to PeerInfo\n   */\n  return function (peer, callback) {\n    var p; // PeerInfo\n\n    if (PeerInfo.isPeerInfo(peer)) {\n      p = peer; // Multiaddr instance or Multiaddr String\n    } else if (multiaddr.isMultiaddr(peer) || typeof peer === 'string') {\n      if (typeof peer === 'string') {\n        try {\n          peer = multiaddr(peer);\n        } catch (err) {\n          return callback(errCode(err, 'ERR_INVALID_MULTIADDR'));\n        }\n      }\n\n      var peerIdB58Str = peer.getPeerId();\n\n      if (!peerIdB58Str) {\n        return callback(errCode(new Error('peer multiaddr instance or string must include peerId'), 'ERR_INVALID_MULTIADDR'));\n      }\n\n      try {\n        p = node.peerBook.get(peerIdB58Str);\n      } catch (err) {\n        p = new PeerInfo(PeerId.createFromB58String(peerIdB58Str));\n      }\n\n      p.multiaddrs.add(peer); // PeerId\n    } else if (PeerId.isPeerId(peer)) {\n      var _peerIdB58Str = peer.toB58String();\n\n      try {\n        p = node.peerBook.get(_peerIdB58Str);\n      } catch (err) {\n        return node.peerRouting.findPeer(peer, callback);\n      }\n    } else {\n      return callback(errCode(new Error(\"\".concat(p, \" is not a valid peer type\")), 'ERR_INVALID_PEER_TYPE'));\n    }\n\n    callback(null, p);\n  };\n};","map":null,"metadata":{},"sourceType":"script"}