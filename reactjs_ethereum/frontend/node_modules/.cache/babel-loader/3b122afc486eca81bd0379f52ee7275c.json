{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/regenerator\");\n\nvar CID = require('cids');\n\nvar util = require('./util');\n/**\n * Resolves a path within a PB block.\n *\n * Returns the value or a link and the partial mising path. This way the\n * IPLD Resolver can fetch the link and continue to resolve.\n *\n * @param {Buffer} binaryBlob - Binary representation of a PB block\n * @param {string} [path='/'] - Path that should be resolved\n * @returns {Object} result - Result of the path it it was resolved successfully\n * @returns {*} result.value - Value the path resolves to\n * @returns {string} result.remainderPath - If the path resolves half-way to a\n *   link, then the `remainderPath` is the part after the link that can be used\n *   for further resolving\n */\n\n\nexports.resolve = function (binaryBlob, path) {\n  var node = util.deserialize(binaryBlob);\n  var parts = path.split('/').filter(Boolean);\n\n  while (parts.length) {\n    var key = parts.shift();\n\n    if (node[key] === undefined) {\n      throw new Error(\"Object has no property '\".concat(key, \"'\"));\n    }\n\n    node = node[key];\n\n    if (CID.isCID(node)) {\n      return {\n        value: node,\n        remainderPath: parts.join('/')\n      };\n    }\n  }\n\n  return {\n    value: node,\n    remainderPath: ''\n  };\n};\n\nvar traverse =\n/*#__PURE__*/\n_regeneratorRuntime.mark(function traverse(node, path) {\n  var _arr, _i, item, nextpath;\n\n  return _regeneratorRuntime.wrap(function traverse$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(Buffer.isBuffer(node) || CID.isCID(node) || typeof node === 'string' || node === null)) {\n            _context.next = 2;\n            break;\n          }\n\n          return _context.abrupt(\"return\");\n\n        case 2:\n          _arr = Object.keys(node);\n          _i = 0;\n\n        case 4:\n          if (!(_i < _arr.length)) {\n            _context.next = 13;\n            break;\n          }\n\n          item = _arr[_i];\n          nextpath = path === undefined ? item : path + '/' + item;\n          _context.next = 9;\n          return nextpath;\n\n        case 9:\n          return _context.delegateYield(traverse(node[item], nextpath), \"t0\", 10);\n\n        case 10:\n          _i++;\n          _context.next = 4;\n          break;\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, traverse);\n});\n/**\n * Return all available paths of a block.\n *\n * @generator\n * @param {Buffer} binaryBlob - Binary representation of a PB block\n * @yields {string} - A single path\n */\n\n\nexports.tree =\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee(binaryBlob) {\n  var node;\n  return _regeneratorRuntime.wrap(function _callee$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          node = util.deserialize(binaryBlob);\n          return _context2.delegateYield(traverse(node), \"t0\", 2);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _callee);\n});","map":null,"metadata":{},"sourceType":"script"}