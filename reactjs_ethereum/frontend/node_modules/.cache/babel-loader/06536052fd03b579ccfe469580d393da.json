{"ast":null,"code":"import _regeneratorRuntime from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/src/App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Web3 from 'web3';\nimport TruffleContract from 'truffle-contract';\nimport Nav from \"./Components/Nav\";\nimport UnlockMetamask from \"./Components/UnlockMetamask\";\nimport PatientFactory from './build/contracts/PatientFactory.json';\nimport SetSick from \"./build/contracts/SetSick.json\";\nimport SickFactory from './build/contracts/SickFactory.json';\nimport Container from './Components/Container';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));\n\n    _this.setNetwork = function () {\n      var networkName,\n          that = _assertThisInitialized(_assertThisInitialized(_this));\n\n      _this.web3.version.getNetwork(function (err, networkId) {\n        switch (networkId) {\n          case \"1\":\n            networkName = \"Main\";\n            break;\n\n          case \"2\":\n            networkName = \"Morden\";\n            break;\n\n          case \"3\":\n            networkName = \"Ropsten\";\n            break;\n\n          case \"4\":\n            networkName = \"Rinkeby\";\n            break;\n\n          case \"42\":\n            networkName = \"Kovan\";\n            break;\n\n          default:\n            networkName = networkId;\n        }\n\n        that.setState({\n          network: networkName\n        });\n      });\n    };\n\n    _this.getPatient = function () {};\n\n    _this.componentDidMount =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var account, app, accounts, SickDeploy, SetSickDeploy;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              account = _this.web3.eth.coinbase;\n              app = _assertThisInitialized(_assertThisInitialized(_this));\n              _context.prev = 2;\n\n              _this.setNetwork();\n\n              _context.next = 6;\n              return _this.web3.eth.getAccounts();\n\n            case 6:\n              accounts = _context.sent;\n              // const PatientDeploy= PatientFactory.networks[this.state.network];\n              SickDeploy = SickFactory.networks[_this.state.network];\n              SetSickDeploy = SetSick.networks[_this.state.network]; // const patientContract =this.web3.eth.contract(\n              //   PatientFactory.abi,PatientDeploy && PatientDeploy.address\n              // );\n\n              _this.setState({\n                accounts: accounts\n              }, _this.runExample);\n\n              _context.next = 17;\n              break;\n\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](2);\n              alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n              console.log(\"error to doko\");\n              console.error(_context.t0);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 12]]);\n    }));\n    _this.runExample =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var userAccount;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              // const {patientContract}=this.state;\n              userAccount = _this.web3.eth.accounts[0]; // console.log(userAccount.address)\n\n              _this.patientContract.deployed().then(function (instance) {\n                _this.patientContractDeployed = instance;\n\n                _this.patientContractDeployed.CreatePatient(\"cuong\", 5453, 23, 1, {\n                  from: userAccount\n                }).then(function (response, error) {\n                  if (response) {\n                    var that = _assertThisInitialized(_assertThisInitialized(_this));\n\n                    console.log(\"den day chua\"); // console.log(\"dung \" + response);\n\n                    that.patientContractDeployed.OwnerPatientCount(userAccount).then(function (data) {\n                      console.log(data);\n                    }); // that.setState({patientData: that.patientContractDeployed.patients(2)});\n\n                    that.patientContractDeployed.patients(2).call().then(function (zombie) {\n                      React.render(React.createElement(\"ul\", {\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 122\n                        },\n                        __self: this\n                      }, React.createElement(\"li\", {\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 123\n                        },\n                        __self: this\n                      }, \"Name: $\", zombie.name), React.createElement(\"li\", {\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 124\n                        },\n                        __self: this\n                      }, \"DNA: $\", zombie.age), React.createElement(\"li\", {\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 125\n                        },\n                        __self: this\n                      }, \"Level: $\", zombie.cmt), React.createElement(\"li\", {\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 126\n                        },\n                        __self: this\n                      }, \"Wins: $\", zombie.sex)), document.getElementById('patientData'));\n                    });\n                  } else {\n                    console.log(\"error cmnr \"); // console.log(\"error\" + error);\n                  }\n                }); //  console.log(this.patientContractDeployed.OwnerToPatient(userAccount).call());\n\n              }); // console.log(\"heheh\")\n              // await this.patientContract.methods.CreatePatient(\"cuong\",5453,23,1).send({from:userAccount})\n\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    _this.getPatient = function () {// const {}\n    };\n\n    _this.isWeb3 = true;\n    _this.isWeb3Locked = false;\n    _this.appName = \"Patient Data\";\n    _this.state = {\n      network: \"checking...\",\n      accounts: null,\n      patientContract: null,\n      patientData: null\n    };\n    var web3 = window.web3;\n\n    if (typeof web3 !== \"undefined\") {\n      _this.web3Provider = web3.currentProvider;\n      _this.web3 = new Web3(web3.currentProvider);\n      _this.patientContract = TruffleContract(PatientFactory);\n\n      _this.patientContract.setProvider(_this.web3Provider);\n\n      if (web3.eth.coinbase === null) _this.isWeb3Locked = true;\n    } else {\n      _this.isWeb3 = false;\n    }\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      if (this.isWeb3) {\n        if (this.isWeb3Locked) {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 160\n            },\n            __self: this\n          }, React.createElement(Nav, {\n            appName: this.appName,\n            network: this.state.network,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 161\n            },\n            __self: this\n          }), React.createElement(UnlockMetamask, {\n            message: \"Unlock Your Metamask/Mist Wallet\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 162\n            },\n            __self: this\n          }));\n        } else {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 166\n            },\n            __self: this\n          }, React.createElement(Nav, {\n            appName: this.appName,\n            network: this.state.network,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 167\n            },\n            __self: this\n          }), React.createElement(Container, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 168\n            },\n            __self: this\n          }), React.createElement(\"h2\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 170\n            },\n            __self: this\n          }, \" den day roi \"), React.createElement(\"div\", {\n            id: \"patientData\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 171\n            },\n            __self: this\n          }));\n        }\n      } else {\n        return React.createElement(\"div\", {\n          className: \"App\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177\n          },\n          __self: this\n        }, React.createElement(\"header\", {\n          className: \"App-header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 178\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: logo,\n          className: \"App-logo\",\n          alt: \"logo\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179\n          },\n          __self: this\n        }), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180\n          },\n          __self: this\n        }, \"Edit \", React.createElement(\"code\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 181\n          },\n          __self: this\n        }, \"src/App.js\"), \" and save to reload.\"), React.createElement(\"a\", {\n          className: \"App-link\",\n          href: \"https://reactjs.org\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183\n          },\n          __self: this\n        }, \"start up\")));\n      }\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/src/App.js"],"names":["React","Component","Web3","TruffleContract","Nav","UnlockMetamask","PatientFactory","SetSick","SickFactory","Container","App","setNetwork","networkName","that","web3","version","getNetwork","err","networkId","setState","network","getPatient","componentDidMount","account","eth","coinbase","app","getAccounts","accounts","SickDeploy","networks","state","SetSickDeploy","runExample","alert","console","log","error","userAccount","patientContract","deployed","then","instance","patientContractDeployed","CreatePatient","from","response","OwnerPatientCount","data","patients","call","zombie","render","name","age","cmt","sex","document","getElementById","isWeb3","isWeb3Locked","appName","patientData","window","web3Provider","currentProvider","setProvider","logo"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Web3 from 'web3';\nimport TruffleContract from 'truffle-contract';\nimport Nav from \"./Components/Nav\";\nimport UnlockMetamask from \"./Components/UnlockMetamask\";\nimport PatientFactory from './build/contracts/PatientFactory.json';\nimport SetSick from \"./build/contracts/SetSick.json\";\nimport SickFactory from './build/contracts/SickFactory.json';\nimport Container from './Components/Container';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.isWeb3 = true;\n    this.isWeb3Locked = false;\n    this.appName = \"Patient Data\";\n\n    this.state = {\n      network: \"checking...\",\n      accounts: null,\n      patientContract:null,\n      patientData:null\n    };\n\n    let web3 = window.web3;\n    if (typeof web3 !== \"undefined\") {\n      this.web3Provider = web3.currentProvider;\n      this.web3 = new Web3(web3.currentProvider);\n      this.patientContract = TruffleContract(PatientFactory);\n      this.patientContract.setProvider(this.web3Provider);\n\n      if (web3.eth.coinbase === null)\n        this.isWeb3Locked = true;\n    } else {\n\n      this.isWeb3 = false;\n    }\n  }\n\n  setNetwork = () => {\n    let networkName,\n      that = this;\n\n    this.web3.version.getNetwork(function(err, networkId) {\n      switch (networkId) {\n      case \"1\":\n        networkName = \"Main\";\n        break;\n      case \"2\":\n        networkName = \"Morden\";\n        break;\n      case \"3\":\n        networkName = \"Ropsten\";\n        break;\n      case \"4\":\n        networkName = \"Rinkeby\";\n        break;\n      case \"42\":\n        networkName = \"Kovan\";\n        break;\n      default:\n        networkName = networkId;\n      }\n      that.setState({\n        network: networkName\n      })\n    });\n  };\n\n  getPatient = ()=>{\n    }\n\n\n  componentDidMount = async() => {\n    let account = this.web3.eth.coinbase;\n    let app = this;\ntry{\n    this.setNetwork(); \n\n    const accounts = await this.web3.eth.getAccounts();\n    // const PatientDeploy= PatientFactory.networks[this.state.network];\n    const SickDeploy=SickFactory.networks[this.state.network];\n    const SetSickDeploy=SetSick.networks[this.state.network];\n\n    // const patientContract =this.web3.eth.contract(\n    //   PatientFactory.abi,PatientDeploy && PatientDeploy.address\n    // );\n    this.setState({\n      accounts\n    },this.runExample)\n}catch(err){\n  alert(\n    `Failed to load web3, accounts, or contract. Check console for details.`,\n  );\n  console.log(\"error to doko\");\n  console.error(err);\n}\n\n  }\n\n  runExample= async()=>{\n    // const {patientContract}=this.state;\n    var userAccount =this.web3.eth.accounts[0];\n    // console.log(userAccount.address)\n    this.patientContract.deployed().then((instance)=>{\n      this.patientContractDeployed=instance;\n    this.patientContractDeployed.CreatePatient(\"cuong\",5453,23,1,{from:userAccount}).then((response,error)=>{\n      if(response){\n        let that = this;\n        console.log(\"den day chua\");\n        // console.log(\"dung \" + response);\n        that.patientContractDeployed.OwnerPatientCount(userAccount).then((data)=>{\n          \n            console.log(data);\n        });\n        // that.setState({patientData: that.patientContractDeployed.patients(2)});\n        that.patientContractDeployed.patients(2).call().then((zombie)=>{\n          React.render(\n            ( <ul>\n              <li>Name: ${zombie.name}</li>\n              <li>DNA: ${zombie.age}</li>\n              <li>Level: ${zombie.cmt}</li>\n              <li>Wins: ${zombie.sex}</li>\n            </ul>),\n            document.getElementById('patientData')\n          );\n        })\n\n          \n }\n      else{\n        console.log(\"error cmnr \");\n        // console.log(\"error\" + error);\n      }\n    })\n    //  console.log(this.patientContractDeployed.OwnerToPatient(userAccount).call());\n\n    })\n    // console.log(\"heheh\")\n    // await this.patientContract.methods.CreatePatient(\"cuong\",5453,23,1).send({from:userAccount})\n  }\n\n  // setPatient = async(name,cmt,age,sex)=>{\n  //   const {patientContract}=this.state;\n  //   var userAccount =this.web3.eth.accounts[0];\n  //   await patientContract.methods.CreatePatient(name,cmt,age,sex).send({from:userAccount})\n  // }\n  getPatient=()=>{\n    // const {}\n  }\n\n\n  render() {\n    if (this.isWeb3) {\n      if (this.isWeb3Locked) {\n        return (\n          <div>\n            <Nav appName={ this.appName } network={ this.state.network } />\n            <UnlockMetamask message=\"Unlock Your Metamask/Mist Wallet\" />\n          </div>)\n      } else {\n        return (\n          <div>\n            <Nav appName={ this.appName } network={ this.state.network } />\n            <Container/>\n            {/* <button onClick={event=>this.setPatient(\"cuong\",45645,23,1)}> new patient</button> */}\n            <h2> den day roi </h2>\n            <div id= \"patientData\"></div>\n    \n            </div>)\n      }\n    } else {\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={ logo } className=\"App-logo\" alt=\"logo\" />\n            <p>\n              Edit <code>src/App.js</code> and save to reload.\n            </p>\n            <a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n                                                                                       start up\n                                                                                     </a>\n          </header>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}