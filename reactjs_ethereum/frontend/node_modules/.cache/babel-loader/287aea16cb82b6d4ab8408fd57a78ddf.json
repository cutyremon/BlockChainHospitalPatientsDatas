{"ast":null,"code":"import _regeneratorRuntime from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/src/Components/CreateMedical.js\";\nimport React, { Component } from 'react';\nimport ipfs from './ipfs';\n\nvar Patient =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Patient, _Component);\n\n  function Patient(props) {\n    var _this;\n\n    _classCallCheck(this, Patient);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Patient).call(this));\n\n    _this.loadFile = function () {\n      var input, file, fr;\n      console.log(\"denday chua\");\n      input = document.getElementById('fileinput');\n      file = input.files[0];\n      fr = new FileReader();\n      fr.onload = receivedText();\n\n      function receivedText() {\n        fr = new FileReader();\n        fr.readAsBinaryString(file); //IPFS START\n\n        var files = [{\n          path: 'image.png',\n          content: ipfs.types.Buffer.from(btoa(fr.result), \"base64\")\n        }];\n        ipfs.files.add(files, function (err, files) {\n          var url = \"https://ipfs.io/ipfs/\" + files[0].hash;\n          log(\"Storing file on IPFS using Javascript. HASH: https://ipfs.io/ipfs/\" + files[0].hash);\n          var ipfsPath = files[0].hash;\n          console.log(\"hash of img :\" + ipfsPath);\n          ipfs.files.cat(ipfsPath, function (err, file) {\n            if (err) {\n              throw err;\n            }\n\n            var img = file.toString(\"base64\");\n            document.getElementById(\"design_display\").src = \"data:image/png;base64,\" + img;\n          });\n        });\n\n        var log = function log(line) {\n          document.getElementById('output').appendChild(document.createTextNode(\"\".concat(line, \"\\r\\n\")));\n        };\n      }\n    };\n\n    _this.loadImage = function (input) {\n      var input, file, fr;\n      ipfs.on('ready', function () {\n        var ipfsPath = input;\n        ipfs.files.cat(ipfsPath, function (err, file) {\n          if (err) {\n            throw err;\n          }\n\n          var img = file.toString(\"base64\");\n          document.getElementById(\"design_display\").src = \"data:image/png;base64,\" + img;\n        });\n\n        var log = function log(line) {\n          document.getElementById('output').appendChild(document.createTextNode(\"\".concat(line, \"\\r\\n\")));\n        };\n      });\n    };\n\n    _this.ipfsUpload =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var buffer;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return Buffer.from(\"toi di an thit cho\");\n\n            case 2:\n              buffer = _context.sent;\n              ipfs.add(buffer, function (err, ipfsHash) {\n                if (err) return console.error(err);\n                console.log(\"ma ban\" + ipfsHash[0].hash);\n\n                _this.setState({\n                  ipfsHashData: ipfsHash[0].hash\n                });\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    _this.ipfsGetdata =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              ipfs.cat(_this.state.ipfsHashData, function (err, data) {\n                if (err) return console.error(err);\n                console.log(\"data\" + data.toString());\n              });\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    _this.state = {\n      ipfsHashData: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(Patient, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"col-md-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"#\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \"Create medical \"), React.createElement(\"span\", {\n        className: \"pull-right-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        type: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        onClick: function onClick(event) {\n          return _this2.ipfsUpload();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"get data\",\n        onClick: function onClick(event) {\n          return _this2.ipfsGetdata();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"file\",\n        id: \"fileinput\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"submit file\",\n        onClick: function onClick(event) {\n          return _this2.loadFile();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Patient;\n}(Component);\n\nexport default Patient;","map":{"version":3,"sources":["/home/cutyremon/blockChain/reactjs_ethereum/frontend/src/Components/CreateMedical.js"],"names":["React","Component","ipfs","Patient","props","loadFile","input","file","fr","console","log","document","getElementById","files","FileReader","onload","receivedText","readAsBinaryString","path","content","types","Buffer","from","btoa","result","add","err","url","hash","ipfsPath","cat","img","toString","src","line","appendChild","createTextNode","loadImage","on","ipfsUpload","buffer","ipfsHash","error","setState","ipfsHashData","ipfsGetdata","state","data","event"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ipfs from './ipfs';\n\nclass Patient extends Component {\n  constructor(props) {\n    super();\n    this.state={\n      ipfsHashData:\"\"\n    }\n\n  }\n\n loadFile=()=> {\n    var input, file, fr;\n    console.log(\"denday chua\");\n\n    input = document.getElementById('fileinput');\n\n    file = input.files[0];\n    fr = new FileReader();\n    fr.onload = receivedText();\n     \n\n    function receivedText() {\n        fr = new FileReader();\n        fr.readAsBinaryString(file);\n         \n        //IPFS START\n            const files = [\n            {\n                path: 'image.png',\n                content: ipfs.types.Buffer.from(btoa(fr.result),\"base64\")\n            }\n            ]\n\n            ipfs.files.add(files, function (err, files) {\n                let url = \"https://ipfs.io/ipfs/\"+files[0].hash;\n                log(\"Storing file on IPFS using Javascript. HASH: https://ipfs.io/ipfs/\"+files[0].hash);\n                let ipfsPath = files[0].hash;\n                console.log(\"hash of img :\" + ipfsPath);\n                ipfs.files.cat(ipfsPath, function (err, file) {\n                if (err) {\n                    throw err\n                }\n               let  img = file.toString(\"base64\");\n                document.getElementById(\"design_display\").src= \"data:image/png;base64,\" + img;\n                })\n            })\n \n            const log = (line) => {\n                document.getElementById('output').appendChild(document.createTextNode(`${line}\\r\\n`))\n            }\n \n \n        \n    }\n\n\n}\n \n \n loadImage = (input)=> {\n    var input, file, fr;\n\n   \n        \n\n        ipfs.on('ready', () => {\n\n                let ipfsPath = input\n                ipfs.files.cat(ipfsPath, function (err, file) {\n                if (err) {\n                    throw err\n                }\n               let  img = file.toString(\"base64\");\n                document.getElementById(\"design_display\").src= \"data:image/png;base64,\" + img;\n                })\n \n            const log = (line) => {\n                document.getElementById('output').appendChild(document.createTextNode(`${line}\\r\\n`))\n            }\n \n \n        })\n     \n\n\n}\n  ipfsUpload = async () => {\n    const buffer = await Buffer.from(\"toi di an thit cho\");\n    ipfs.add(buffer, (err, ipfsHash) => {\n      if (err) return console.error(err)\n      console.log( \"ma ban\" + ipfsHash[0].hash)\n      this.setState({\n        ipfsHashData: ipfsHash[0].hash\n      })\n\n    })\n  }\n  ipfsGetdata = async () => {\n    ipfs.cat(this.state.ipfsHashData, (err, data) => {\n      if (err) return console.error(err)\n      console.log( \"data\" + data.toString())\n    })\n  }\n  render() {\n    return (\n      <div className=\"col-md-3\">\n        <a href=\"#\">\n          <span>Create medical </span>\n          <span className=\"pull-right-container\">\n          </span>\n        </a>\n        <input type=\"text\"  ></input>\n        <input type=\"submit\" onClick={event => this.ipfsUpload()}></input>\n        <input type=\"submit\"  value=\"get data\" onClick={event => this.ipfsGetdata()}></input>\n        <input type=\"file\" id = \"fileinput\" ></input>\n        <input type=\"submit\" value=\"submit file\" onClick={event=>this.loadFile()}></input>\n        \n      </div>\n    )\n  }\n}\n\nexport default Patient;"]},"metadata":{},"sourceType":"module"}