{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar Multiaddr = require('multiaddr');\n\nvar mafmt = require('mafmt');\n\nvar _require = require('superstruct'),\n    struct = _require.struct,\n    superstruct = _require.superstruct;\n\nvar optional = struct.optional,\n    union = struct.union;\nvar s = superstruct({\n  types: {\n    multiaddr: function multiaddr(v) {\n      if (v === null) {\n        return \"multiaddr invalid, value must be a string, Buffer, or another Multiaddr got \".concat(v);\n      }\n\n      try {\n        Multiaddr(v);\n      } catch (err) {\n        return \"multiaddr invalid, \".concat(err.message);\n      }\n\n      return true;\n    },\n    'multiaddr-ipfs': function multiaddrIpfs(v) {\n      return mafmt.IPFS.matches(v) ? true : \"multiaddr IPFS invalid\";\n    }\n  }\n});\nvar configSchema = s({\n  repo: optional(s('object|string')),\n  repoOwner: 'boolean?',\n  preload: s({\n    enabled: 'boolean?',\n    addresses: optional(s(['multiaddr'])),\n    interval: 'number?'\n  }, {\n    enabled: true,\n    interval: 30 * 1000\n  }),\n  init: optional(union(['boolean', s({\n    bits: 'number?',\n    emptyRepo: 'boolean?',\n    privateKey: optional(s('object|string')),\n    // object should be a custom type for PeerId using 'kind-of'\n    pass: 'string?'\n  })])),\n  start: 'boolean?',\n  offline: 'boolean?',\n  pass: 'string?',\n  silent: 'boolean?',\n  relay: 'object?',\n  // relay validates in libp2p\n  EXPERIMENTAL: optional(s({\n    pubsub: 'boolean?',\n    ipnsPubsub: 'boolean?',\n    sharding: 'boolean?',\n    dht: 'boolean?'\n  })),\n  connectionManager: 'object?',\n  config: optional(s({\n    API: 'object?',\n    Addresses: optional(s({\n      Swarm: optional(s(['multiaddr'])),\n      API: 'multiaddr?',\n      Gateway: 'multiaddr'\n    })),\n    Discovery: optional(s({\n      MDNS: optional(s({\n        Enabled: 'boolean?',\n        Interval: 'number?'\n      })),\n      webRTCStar: optional(s({\n        Enabled: 'boolean?'\n      }))\n    })),\n    Bootstrap: optional(s(['multiaddr-ipfs']))\n  })),\n  ipld: 'object?',\n  libp2p: optional(union(['function', 'object'])) // libp2p validates this\n\n}, {\n  repoOwner: true\n});\n\nvar validate = function validate(opts) {\n  var _configSchema$validat = configSchema.validate(opts),\n      _configSchema$validat2 = _slicedToArray(_configSchema$validat, 2),\n      err = _configSchema$validat2[0],\n      options = _configSchema$validat2[1];\n\n  if (err) {\n    throw err;\n  }\n\n  return options;\n};\n\nmodule.exports = {\n  validate: validate\n};","map":null,"metadata":{},"sourceType":"script"}