{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar exporter = require('ipfs-unixfs-exporter');\n\nvar applyDefaultOptions = require('./utils/apply-default-options');\n\nvar toMfsPath = require('./utils/to-mfs-path');\n\nvar _require = require('./utils/constants'),\n    FILE_SEPARATOR = _require.FILE_SEPARATOR,\n    FILE_TYPES = _require.FILE_TYPES;\n\nvar defaultOptions = {};\n\nvar toOutput = function toOutput(fsEntry) {\n  var type = 0;\n  var size = fsEntry.node.size || fsEntry.node.length;\n\n  if (fsEntry.unixfs) {\n    size = fsEntry.unixfs.fileSize();\n    type = FILE_TYPES[fsEntry.unixfs.type];\n  }\n\n  return {\n    cid: fsEntry.cid,\n    name: fsEntry.name,\n    type: type,\n    size: size\n  };\n};\n\nmodule.exports = function (context) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _mfsLs = _wrapAsyncGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var path,\n            options,\n            mfsPath,\n            fsDir,\n            _iteratorNormalCompletion,\n            _didIteratorError,\n            _iteratorError,\n            _iterator,\n            _step,\n            _value,\n            fsEntry,\n            _args = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                path = _args.length > 0 && _args[0] !== undefined ? _args[0] : FILE_SEPARATOR;\n                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n                if (typeof path === 'object' && !(path instanceof String)) {\n                  options = path;\n                  path = FILE_SEPARATOR;\n                }\n\n                options = applyDefaultOptions(options, defaultOptions);\n                _context.next = 6;\n                return _awaitAsyncGenerator(toMfsPath(context, path));\n\n              case 6:\n                mfsPath = _context.sent;\n                _context.next = 9;\n                return _awaitAsyncGenerator(exporter(mfsPath.mfsPath, context.ipld));\n\n              case 9:\n                fsDir = _context.sent;\n\n                if (!(!fsDir.unixfs || !fsDir.unixfs.type.includes('directory'))) {\n                  _context.next = 14;\n                  break;\n                }\n\n                _context.next = 13;\n                return toOutput(fsDir);\n\n              case 13:\n                return _context.abrupt(\"return\");\n\n              case 14:\n                // directory, perhaps sharded\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context.prev = 16;\n                _iterator = _asyncIterator(fsDir.content(options));\n\n              case 18:\n                _context.next = 20;\n                return _awaitAsyncGenerator(_iterator.next());\n\n              case 20:\n                _step = _context.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context.next = 24;\n                return _awaitAsyncGenerator(_step.value);\n\n              case 24:\n                _value = _context.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context.next = 32;\n                  break;\n                }\n\n                fsEntry = _value;\n                _context.next = 29;\n                return toOutput(fsEntry);\n\n              case 29:\n                _iteratorNormalCompletion = true;\n                _context.next = 18;\n                break;\n\n              case 32:\n                _context.next = 38;\n                break;\n\n              case 34:\n                _context.prev = 34;\n                _context.t0 = _context[\"catch\"](16);\n                _didIteratorError = true;\n                _iteratorError = _context.t0;\n\n              case 38:\n                _context.prev = 38;\n                _context.prev = 39;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context.next = 43;\n                  break;\n                }\n\n                _context.next = 43;\n                return _awaitAsyncGenerator(_iterator.return());\n\n              case 43:\n                _context.prev = 43;\n\n                if (!_didIteratorError) {\n                  _context.next = 46;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 46:\n                return _context.finish(43);\n\n              case 47:\n                return _context.finish(38);\n\n              case 48:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[16, 34, 38, 48], [39,, 43, 47]]);\n      }));\n\n      function mfsLs() {\n        return _mfsLs.apply(this, arguments);\n      }\n\n      return mfsLs;\n    }()\n  );\n};","map":null,"metadata":{},"sourceType":"script"}