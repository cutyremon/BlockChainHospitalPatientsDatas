{"ast":null,"code":"import _regeneratorRuntime from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/src/Components/CreateMedical.js\";\nimport React, { Component } from 'react';\nimport ipfs from './ipfs';\nimport IPFSUploader from 'ipfs-image-web-upload';\n\nvar Patient =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Patient, _Component);\n\n  function Patient(props) {\n    var _this;\n\n    _classCallCheck(this, Patient);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Patient).call(this));\n\n    _this.loadFile = function () {\n      var input, file, fr;\n      console.log(\"denday chua\");\n      input = document.getElementById('fileinput');\n      file = input.files[0];\n      fr = new FileReader();\n      fr.onload = receivedText();\n\n      var app = _assertThisInitialized(_assertThisInitialized(_this));\n\n      function receivedText() {\n        fr = new FileReader();\n        fr.readAsBinaryString(file); //IPFS START\n\n        var files = [{\n          path: 'image.png',\n          content: ipfs.types.Buffer.from(btoa(fr.result), \"base64\")\n        }];\n        ipfs.files.add(files, function (err, files) {\n          var url = \"https://ipfs.io/ipfs/\" + files[0].hash;\n          console.log(\"Storing file on IPFS using Javascript. HASH: https://ipfs.io/ipfs/\" + files[0].hash);\n          var ipfsPath = files[0].hash;\n          console.log(\"hash of img :\" + ipfsPath);\n          app.setState({\n            ipfsHashImg: ipfsPath\n          });\n        }); // const log = (line) => {\n        //     document.getElementById('output').appendChild(document.createTextNode(`${line}\\r\\n`))\n        // }\n      }\n    };\n\n    _this.loadImage = function (input) {\n      var uploader = new IPFSUploader(ipfs);\n      var img_tag = document.querySelector(\"design_display\");\n      uploader.loadImage(img_tag, input); // let ipfsPath = input\n      // console.log(\"loadmig\" + ipfsPath)\n      // ipfs.files.cat(ipfsPath, function (err, file) {\n      //   if (err) {\n      //     console.log(\"error \" +err )\n      //   }\n      //   let img = file.toString(\"base64\");\n      //   document.getElementById(\"design_display\").src = \"data:image/png;base64,\" + img;\n      // })\n      // const log = (line) => {\n      //   document.getElementById('output').appendChild(document.createTextNode(`${line}\\r\\n`))\n      // }\n    };\n\n    _this.ipfsUpload =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var buffer;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return Buffer.from(\"toi di an thit cho\");\n\n            case 2:\n              buffer = _context.sent;\n              ipfs.add(buffer, function (err, ipfsHash) {\n                if (err) return console.error(err);\n                console.log(\"ma ban\" + ipfsHash[0].hash);\n\n                _this.setState({\n                  ipfsHashData: ipfsHash[0].hash\n                });\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    _this.ipfsGetdata =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              ipfs.cat(_this.state.ipfsHashData, function (err, data) {\n                if (err) return console.error(err);\n                console.log(\"data\" + data.toString());\n              });\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    _this.state = {\n      ipfsHashData: \"\",\n      ipfsHashImg: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(Patient, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"col-md-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"#\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"Create medical \"), React.createElement(\"span\", {\n        className: \"pull-right-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        type: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        onClick: function onClick(event) {\n          return _this2.ipfsUpload();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"get data\",\n        onClick: function onClick(event) {\n          return _this2.ipfsGetdata();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"file\",\n        id: \"fileinput\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"submit file\",\n        onClick: function onClick(event) {\n          return _this2.loadFile();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"show file\",\n        onClick: function onClick(event) {\n          return _this2.loadImage(_this2.state.ipfsHashImg);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        id: \"design_display\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Patient;\n}(Component);\n\nexport default Patient;","map":{"version":3,"sources":["/home/cutyremon/blockChain/reactjs_ethereum/frontend/src/Components/CreateMedical.js"],"names":["React","Component","ipfs","IPFSUploader","Patient","props","loadFile","input","file","fr","console","log","document","getElementById","files","FileReader","onload","receivedText","app","readAsBinaryString","path","content","types","Buffer","from","btoa","result","add","err","url","hash","ipfsPath","setState","ipfsHashImg","loadImage","uploader","img_tag","querySelector","ipfsUpload","buffer","ipfsHash","error","ipfsHashData","ipfsGetdata","cat","state","data","toString","event"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ipfs from './ipfs';\nimport IPFSUploader from 'ipfs-image-web-upload';\n\nclass Patient extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      ipfsHashData: \"\",\n      ipfsHashImg: \"\"\n    }\n\n  }\n\n  loadFile = () => {\n    var input, file, fr;\n    console.log(\"denday chua\");\n\n    input = document.getElementById('fileinput');\n\n    file = input.files[0];\n    fr = new FileReader();\n    fr.onload = receivedText();\n    let app = this;\n\n\n    function receivedText() {\n      fr = new FileReader();\n      fr.readAsBinaryString(file);\n\n      //IPFS START\n      const files = [\n        {\n          path: 'image.png',\n          content: ipfs.types.Buffer.from(btoa(fr.result), \"base64\")\n        }\n      ]\n\n      ipfs.files.add(files, function (err, files) {\n        let url = \"https://ipfs.io/ipfs/\" + files[0].hash;\n        console.log(\"Storing file on IPFS using Javascript. HASH: https://ipfs.io/ipfs/\" + files[0].hash);\n        let ipfsPath = files[0].hash;\n        console.log(\"hash of img :\" + ipfsPath);\n        app.setState({\n          ipfsHashImg: ipfsPath\n        })\n      })\n\n      // const log = (line) => {\n      //     document.getElementById('output').appendChild(document.createTextNode(`${line}\\r\\n`))\n      // }\n\n\n\n    }\n\n\n  }\n\n  loadImage = (input) => { \n    let  uploader = new IPFSUploader(ipfs);\n    let img_tag = document.querySelector(\"design_display\");\n    uploader.loadImage(img_tag, input);\n\n    // let ipfsPath = input\n    // console.log(\"loadmig\" + ipfsPath)\n    // ipfs.files.cat(ipfsPath, function (err, file) {\n    //   if (err) {\n    //     console.log(\"error \" +err )\n        \n    //   }\n    //   let img = file.toString(\"base64\");\n    //   document.getElementById(\"design_display\").src = \"data:image/png;base64,\" + img;\n    // })\n\n    // const log = (line) => {\n    //   document.getElementById('output').appendChild(document.createTextNode(`${line}\\r\\n`))\n    // }\n  }\n  \n  ipfsUpload = async () => {\n    const buffer = await Buffer.from(\"toi di an thit cho\");\n    ipfs.add(buffer, (err, ipfsHash) => {\n      if (err) return console.error(err)\n      console.log(\"ma ban\" + ipfsHash[0].hash)\n      this.setState({\n        ipfsHashData: ipfsHash[0].hash\n      })\n\n    })\n  }\n  ipfsGetdata = async () => {\n    ipfs.cat(this.state.ipfsHashData, (err, data) => {\n      if (err) return console.error(err)\n      console.log(\"data\" + data.toString())\n    })\n  }\n  render() {\n    return (\n      <div className=\"col-md-3\">\n        <a href=\"#\">\n          <span>Create medical </span>\n          <span className=\"pull-right-container\">\n          </span>\n        </a>\n        <input type=\"text\"  ></input>\n        <input type=\"submit\" onClick={event => this.ipfsUpload()}></input>\n        <input type=\"submit\" value=\"get data\" onClick={event => this.ipfsGetdata()}></input>\n        <input type=\"file\" id=\"fileinput\" ></input>\n        <input type=\"submit\" value=\"submit file\" onClick={event => this.loadFile()}></input>\n        <input type=\"submit\" value=\"show file\" onClick={event => this.loadImage(this.state.ipfsHashImg)}></input>\n        <br />\n        <img id=\"design_display\" />\n\n      </div>\n    )\n  }\n}\n\nexport default Patient;"]},"metadata":{},"sourceType":"module"}