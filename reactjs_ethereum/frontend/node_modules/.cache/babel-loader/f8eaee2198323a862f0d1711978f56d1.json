{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar Identify = require('libp2p-identify');\n/**\n * For a given multistream, registers to handle the given connection\n * @param {MultistreamDialer} multistream\n * @param {Connection} connection\n * @returns {Promise}\n */\n\n\nmodule.exports.msHandle = function (multistream, connection) {\n  return new Promise(function (resolve, reject) {\n    multistream.handle(connection, function (err) {\n      if (err) return reject(err);\n      resolve();\n    });\n  });\n};\n/**\n * For a given multistream, selects the given protocol\n * @param {MultistreamDialer} multistream\n * @param {string} protocol\n * @returns {Promise} Resolves the selected Connection\n */\n\n\nmodule.exports.msSelect = function (multistream, protocol) {\n  return new Promise(function (resolve, reject) {\n    multistream.select(protocol, function (err, connection) {\n      if (err) return reject(err);\n      resolve(connection);\n    });\n  });\n};\n/**\n * Runs identify for the given connection and verifies it against the\n * PeerInfo provided\n * @param {Connection} connection\n * @param {PeerInfo} cryptoPeerInfo The PeerInfo determined during crypto exchange\n * @returns {Promise} Resolves {peerInfo, observedAddrs}\n */\n\n\nmodule.exports.identifyDialer = function (connection, cryptoPeerInfo) {\n  return new Promise(function (resolve, reject) {\n    Identify.dialer(connection, cryptoPeerInfo, function (err, peerInfo, observedAddrs) {\n      if (err) return reject(err);\n      resolve({\n        peerInfo: peerInfo,\n        observedAddrs: observedAddrs\n      });\n    });\n  });\n};\n/**\n * Get unique values from `arr` using `getValue` to determine\n * what is used for uniqueness\n * @param {Array} arr The array to get unique values for\n * @param {function(value)} getValue The function to determine what is compared\n * @returns {Array}\n */\n\n\nmodule.exports.uniqueBy = function (arr, getValue) {\n  return _toConsumableArray(new Map(arr.map(function (i) {\n    return [getValue(i), i];\n  })).values());\n};","map":null,"metadata":{},"sourceType":"script"}