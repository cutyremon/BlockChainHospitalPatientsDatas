{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar _require = require('superstruct'),\n    superstruct = _require.superstruct;\n\nvar dagBuilder = require('./dag-builder');\n\nvar treeBuilder = require('./tree-builder');\n\nvar mh = require('multihashes');\n\nvar struct = superstruct({\n  types: {\n    codec: function codec(v) {\n      return ['dag-pb', 'dag-cbor', 'raw'].includes(v);\n    },\n    hashAlg: function hashAlg(v) {\n      return Object.keys(mh.names).includes(v);\n    },\n    leafType: function leafType(v) {\n      return ['file', 'raw'].includes(v);\n    }\n  }\n});\nvar ChunkerOptions = struct({\n  minChunkSize: 'number?',\n  maxChunkSize: 'number?',\n  avgChunkSize: 'number?',\n  window: 'number?',\n  polynomial: 'number?'\n}, {\n  maxChunkSize: 262144,\n  avgChunkSize: 262144,\n  window: 16,\n  polynomial: 17437180132763653 // https://github.com/ipfs/go-ipfs-chunker/blob/d0125832512163708c0804a3cda060e21acddae4/rabin.go#L11\n\n});\nvar BuilderOptions = struct({\n  maxChildrenPerNode: 'number?',\n  layerRepeat: 'number?'\n}, {\n  maxChildrenPerNode: 174,\n  layerRepeat: 4\n});\nvar Options = struct({\n  chunker: struct.enum(['fixed', 'rabin']),\n  rawLeaves: 'boolean?',\n  hashOnly: 'boolean?',\n  strategy: struct.enum(['balanced', 'flat', 'trickle']),\n  reduceSingleLeafToSelf: 'boolean?',\n  codec: 'codec?',\n  format: 'codec?',\n  hashAlg: 'hashAlg?',\n  leafType: 'leafType?',\n  cidVersion: 'number?',\n  progress: 'function?',\n  wrapWithDirectory: 'boolean?',\n  shardSplitThreshold: 'number?',\n  onlyHash: 'boolean?',\n  chunkerOptions: ChunkerOptions,\n  builderOptions: BuilderOptions,\n  wrap: 'boolean?',\n  pin: 'boolean?',\n  recursive: 'boolean?',\n  ignore: 'array?',\n  hidden: 'boolean?',\n  preload: 'boolean?'\n}, {\n  chunker: 'fixed',\n  strategy: 'balanced',\n  rawLeaves: false,\n  reduceSingleLeafToSelf: true,\n  codec: 'dag-pb',\n  hashAlg: 'sha2-256',\n  leafType: 'file',\n  cidVersion: 0,\n  progress: function progress() {\n    return function () {};\n  },\n  shardSplitThreshold: 1000\n});\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  var _ref = _wrapAsyncGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(source, ipld) {\n    var options,\n        opts,\n        _iteratorNormalCompletion,\n        _didIteratorError,\n        _iteratorError,\n        _iterator,\n        _step,\n        _value,\n        entry,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n            opts = Options(options);\n\n            if (options.cidVersion > 0 && options.rawLeaves === undefined) {\n              // if the cid version is 1 or above, use raw leaves as this is\n              // what go does.\n              opts.rawLeaves = true;\n            }\n\n            if (options.hashAlg !== undefined && options.rawLeaves === undefined) {\n              // if a non-default hash alg has been specified, use raw leaves as this is\n              // what go does.\n              opts.rawLeaves = true;\n            } // go-ifps trickle dag defaults to unixfs raw leaves, balanced dag defaults to file leaves\n\n\n            if (options.strategy === 'trickle') {\n              opts.leafType = 'raw';\n              opts.reduceSingleLeafToSelf = false;\n            }\n\n            if (options.format) {\n              options.codec = options.format;\n            }\n\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 8;\n            _iterator = _asyncIterator(treeBuilder(dagBuilder(source, ipld, opts), ipld, opts));\n\n          case 10:\n            _context.next = 12;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 12:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 16;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 16:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 24;\n              break;\n            }\n\n            entry = _value;\n            _context.next = 21;\n            return {\n              cid: entry.cid,\n              path: entry.path,\n              unixfs: entry.unixfs,\n              size: entry.size\n            };\n\n          case 21:\n            _iteratorNormalCompletion = true;\n            _context.next = 10;\n            break;\n\n          case 24:\n            _context.next = 30;\n            break;\n\n          case 26:\n            _context.prev = 26;\n            _context.t0 = _context[\"catch\"](8);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 30:\n            _context.prev = 30;\n            _context.prev = 31;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 35;\n              break;\n            }\n\n            _context.next = 35;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 35:\n            _context.prev = 35;\n\n            if (!_didIteratorError) {\n              _context.next = 38;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 38:\n            return _context.finish(35);\n\n          case 39:\n            return _context.finish(30);\n\n          case 40:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[8, 26, 30, 40], [31,, 35, 39]]);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"script"}