{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar hamtShardedDirectoryContent = function hamtShardedDirectoryContent(cid, node, unixfs, path, resolve, depth, ipld) {\n  return function () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return listDirectory(node, path, resolve, depth, ipld, options);\n  };\n};\n\nfunction listDirectory(_x, _x2, _x3, _x4, _x5, _x6) {\n  return _listDirectory.apply(this, arguments);\n}\n\nfunction _listDirectory() {\n  _listDirectory = _wrapAsyncGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(node, path, resolve, depth, ipld, options) {\n    var links, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, link, name, result, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, file;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            links = node.Links;\n            _iteratorNormalCompletion2 = true;\n            _didIteratorError2 = false;\n            _iteratorError2 = undefined;\n            _context.prev = 4;\n            _iterator2 = links[Symbol.iterator]();\n\n          case 6:\n            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {\n              _context.next = 57;\n              break;\n            }\n\n            link = _step2.value;\n            name = link.Name.substring(2);\n\n            if (!name) {\n              _context.next = 17;\n              break;\n            }\n\n            _context.next = 12;\n            return _awaitAsyncGenerator(resolve(link.Hash, name, \"\".concat(path, \"/\").concat(name), [], depth + 1, ipld));\n\n          case 12:\n            result = _context.sent;\n            _context.next = 15;\n            return result.entry;\n\n          case 15:\n            _context.next = 54;\n            break;\n\n          case 17:\n            _context.next = 19;\n            return _awaitAsyncGenerator(ipld.get(link.Hash));\n\n          case 19:\n            node = _context.sent;\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 22;\n            _iterator = _asyncIterator(listDirectory(node, path, resolve, depth, ipld, options));\n\n          case 24:\n            _context.next = 26;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 26:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 30;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 30:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 38;\n              break;\n            }\n\n            file = _value;\n            _context.next = 35;\n            return file;\n\n          case 35:\n            _iteratorNormalCompletion = true;\n            _context.next = 24;\n            break;\n\n          case 38:\n            _context.next = 44;\n            break;\n\n          case 40:\n            _context.prev = 40;\n            _context.t0 = _context[\"catch\"](22);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 44:\n            _context.prev = 44;\n            _context.prev = 45;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 49;\n              break;\n            }\n\n            _context.next = 49;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 49:\n            _context.prev = 49;\n\n            if (!_didIteratorError) {\n              _context.next = 52;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 52:\n            return _context.finish(49);\n\n          case 53:\n            return _context.finish(44);\n\n          case 54:\n            _iteratorNormalCompletion2 = true;\n            _context.next = 6;\n            break;\n\n          case 57:\n            _context.next = 63;\n            break;\n\n          case 59:\n            _context.prev = 59;\n            _context.t1 = _context[\"catch\"](4);\n            _didIteratorError2 = true;\n            _iteratorError2 = _context.t1;\n\n          case 63:\n            _context.prev = 63;\n            _context.prev = 64;\n\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n\n          case 66:\n            _context.prev = 66;\n\n            if (!_didIteratorError2) {\n              _context.next = 69;\n              break;\n            }\n\n            throw _iteratorError2;\n\n          case 69:\n            return _context.finish(66);\n\n          case 70:\n            return _context.finish(63);\n\n          case 71:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4, 59, 63, 71], [22, 40, 44, 54], [45,, 49, 53], [64,, 66, 70]]);\n  }));\n  return _listDirectory.apply(this, arguments);\n}\n\nmodule.exports = hamtShardedDirectoryContent;","map":null,"metadata":{},"sourceType":"script"}