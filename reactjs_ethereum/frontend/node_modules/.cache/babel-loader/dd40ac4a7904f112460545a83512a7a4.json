{"ast":null,"code":"import _regeneratorRuntime from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/src/App.js\";\nimport React, { Component } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Web3 from 'web3';\nimport TruffleContract from 'truffle-contract';\nimport UnlockMetamask from \"./Components/UnlockMetamask\";\nimport Medical from './build/contracts/Medical.json';\nimport SetSick from \"./build/contracts/SetSick.json\";\nimport SickFactory from './build/contracts/SickFactory.json';\nimport Container from './Components/Container';\nimport ReactDOM from 'react-dom';\nimport Header from './Components/Header';\nimport 'react-sticky-header/styles.css';\nimport SideBar from './Components/SideBar';\nimport Content from './Components/Content';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));\n\n    _this.setNetwork = function () {\n      var networkName,\n          that = _assertThisInitialized(_assertThisInitialized(_this));\n\n      _this.web3.version.getNetwork(function (err, networkId) {\n        switch (networkId) {\n          case \"1\":\n            networkName = \"Main\";\n            break;\n\n          case \"2\":\n            networkName = \"Morden\";\n            break;\n\n          case \"3\":\n            networkName = \"Ropsten\";\n            break;\n\n          case \"4\":\n            networkName = \"Rinkeby\";\n            break;\n\n          case \"42\":\n            networkName = \"Kovan\";\n            break;\n\n          default:\n            networkName = networkId;\n        }\n\n        that.setState({\n          network: networkName\n        });\n      });\n    };\n\n    _this.getPatient = function () {};\n\n    _this.componentDidMount =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var account, app, accounts;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              account = _this.web3.eth.coinbase;\n              app = _assertThisInitialized(_assertThisInitialized(_this));\n\n              try {\n                _this.setNetwork();\n\n                accounts = _this.web3.eth.accounts[0]; // const PatientDeploy= PatientFactory.networks[this.state.network];\n                // const patientContract =this.web3.eth.contract(\n                //   PatientFactory.abi,PatientDeploy && PatientDeploy.address\n                // );\n\n                _this.setState({\n                  accounts: accounts\n                }, _this.runExample);\n              } catch (err) {\n                alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n                console.log(\"error to doko\");\n                console.error(err);\n              }\n\n              _this.medicalContract.deployed().then(function (instance) {\n                var patientdt = instance;\n                var patientdt2 = instance;\n                instance.getPatientByOwner(app.state.accounts).then(function (ids) {\n                  console.log(\"so patient \" + ids);\n                  var _iteratorNormalCompletion = true;\n                  var _didIteratorError = false;\n                  var _iteratorError = undefined;\n\n                  try {\n                    var _loop = function _loop() {\n                      var id = _step.value;\n                      patientdt.patients(id).then(function (data) {\n                        var patientData = app.state.patientData;\n                        patientData.push(data);\n                        app.setState({\n                          patientData: patientData\n                        });\n                        console.log(\"hahaha\" + data);\n                      }, 100);\n                      patientdt.PatientToSick(id).then(function (_idSickCode) {\n                        patientdt2.viewSickCode(_idSickCode).then(function (data) {\n                          var sickCodes = app.state.sickCodes;\n                          var idPatient = id;\n                          sickCodes.push({\n                            idPatient: idPatient,\n                            data: data\n                          });\n                          app.setState({\n                            sickCodes: sickCodes\n                          });\n                          console.log(\"ban ghi sick code \" + data);\n                        });\n                      });\n                    };\n\n                    for (var _iterator = ids[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                      _loop();\n                    }\n                  } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion && _iterator.return != null) {\n                        _iterator.return();\n                      }\n                    } finally {\n                      if (_didIteratorError) {\n                        throw _iteratorError;\n                      }\n                    }\n                  }\n                }); // instance.countSickCode().then(function(counts){\n                //   console.log(\"so ban ghi \" + counts);\n                //   let a = counts;\n                //   for(let id =0 ; id <counts; id ++){\n                //     patientdt.sickcodes(id).then(function(data1){\n                //       const sickcodes = app.state.sickcodes;\n                //       sickcodes.push(data1);\n                //       app.setState({\n                //         sickcodes\n                //       });\n                //     })\n                //   }\n                // })\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    _this.runExample =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var userAccount;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              // const {patientContract}=this.state;\n              userAccount = _this.web3.eth.accounts[0]; // console.log(userAccount.address)\n\n              _this.medicalContract.deployed().then(function (instance) {\n                var that = _assertThisInitialized(_assertThisInitialized(_this));\n\n                _this.medicalContractDeployed = instance;\n\n                _this.medicalContractDeployed.CreatePatient(\"cuong\", 5453, 23, 1, {\n                  from: userAccount\n                }).then(function (response, error) {\n                  if (response) {\n                    var _that = _assertThisInitialized(_assertThisInitialized(_this));\n\n                    console.log(\"den day chua\"); // console.log(\"dung \" + response);\n\n                    _that.medicalContractDeployed.OwnerPatientCount(userAccount).then(function (data) {\n                      console.log(data);\n                      console.log(_that.state.patientData);\n                      console.log(\"code \" + _that.state.sickCodes[1].data);\n                      console.log(\"code  sick \" + _that.state.sickCodeByPatient);\n                    }); // that.setState({patientData: that.patientContractDeployed.patients(2)});\n\n                  } else {\n                    console.log(\"error cmnr \"); // console.log(\"error\" + error);\n                  }\n                });\n              });\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    _this.getPatient = function () {// const {}\n    };\n\n    _this.displayPatient = function (patient) {\n      return React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, \"Name: \", patient.name), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, \"DNA: \", patient.age), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, \"Level: \", patient.cmt), React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, \"Wins: \", patient.sex));\n    };\n\n    _this.updatePatient = function () {\n      console.log(\"con me no\");\n\n      if (_this.state.patientData) {\n        var patient = _this.state.patientData;\n        return React.createElement(\"ul\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 242\n          },\n          __self: this\n        }, React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 243\n          },\n          __self: this\n        }, \"Name: \", patient.name), React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 244\n          },\n          __self: this\n        }, \"DNA: \", patient.age), React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 245\n          },\n          __self: this\n        }, \"Level: \", patient.cmt), React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 246\n          },\n          __self: this\n        }, \"Wins: \", patient.sex));\n      }\n    };\n\n    _this.getSickbypatient = function (patientID) {\n      var sickCode = _this.state.sickCodes;\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = sickCode[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var sickcode = _step2.value;\n\n          if (sickcode.idPatient == patientID) {\n            var x = sickcode.idPatient;\n\n            _this.setState({\n              sickCodeByPatient: x\n            });\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      console.log(\"an lol chuaw\" + _this.state.sickCodeByPatient);\n    };\n\n    _this.isWeb3 = true;\n    _this.isWeb3Locked = false;\n    _this.appName = \"Patient Data\";\n    _this.state = {\n      network: \"checking...\",\n      accounts: null,\n      medicalContract: null,\n      patientData: [],\n      sickCodes: [{\n        idPatient: 0,\n        data: []\n      }],\n      sickCodeByPatient: []\n    };\n    var web3 = window.web3;\n\n    if (typeof web3 !== \"undefined\") {\n      _this.web3Provider = web3.currentProvider;\n      _this.web3 = new Web3(web3.currentProvider);\n      _this.medicalContract = TruffleContract(Medical);\n\n      _this.medicalContract.setProvider(_this.web3Provider);\n\n      if (web3.eth.coinbase === null) _this.isWeb3Locked = true;\n    } else {\n      _this.isWeb3 = false;\n    }\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      if (this.isWeb3) {\n        if (this.isWeb3Locked) {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 269\n            },\n            __self: this\n          }, React.createElement(Header, {\n            network: this.state.network,\n            appName: this.appName,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 270\n            },\n            __self: this\n          }), React.createElement(SideBar, {\n            patientData: this.state.patientData,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 271\n            },\n            __self: this\n          }), React.createElement(Content, {\n            message: \"Unlock Your Metamask/Mist Wallet\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 272\n            },\n            __self: this\n          }));\n        } else {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 277\n            },\n            __self: this\n          }, React.createElement(Header, {\n            network: this.state.network,\n            appName: this.appName,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 278\n            },\n            __self: this\n          }), React.createElement(SideBar, {\n            patientData: this.state.patientData,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 279\n            },\n            __self: this\n          }), React.createElement(Content, {\n            getSickbypatient: this.getSickbypatient,\n            patientData: this.state.patientData,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 280\n            },\n            __self: this\n          }));\n        }\n      } else {\n        return React.createElement(\"div\", {\n          className: \"App\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 285\n          },\n          __self: this\n        }, React.createElement(Header, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 286\n          },\n          __self: this\n        }));\n      }\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/src/App.js"],"names":["React","Component","Web3","TruffleContract","UnlockMetamask","Medical","SetSick","SickFactory","Container","ReactDOM","Header","SideBar","Content","App","setNetwork","networkName","that","web3","version","getNetwork","err","networkId","setState","network","getPatient","componentDidMount","account","eth","coinbase","app","accounts","runExample","alert","console","log","error","medicalContract","deployed","then","instance","patientdt","patientdt2","getPatientByOwner","state","ids","id","patients","data","patientData","push","PatientToSick","_idSickCode","viewSickCode","sickCodes","idPatient","userAccount","medicalContractDeployed","CreatePatient","from","response","OwnerPatientCount","sickCodeByPatient","displayPatient","patient","name","age","cmt","sex","updatePatient","getSickbypatient","patientID","sickCode","sickcode","x","isWeb3","isWeb3Locked","appName","window","web3Provider","currentProvider","setProvider"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Web3 from 'web3';\nimport TruffleContract from 'truffle-contract';\nimport UnlockMetamask from \"./Components/UnlockMetamask\";\nimport Medical from './build/contracts/Medical.json';\nimport SetSick from \"./build/contracts/SetSick.json\";\nimport SickFactory from './build/contracts/SickFactory.json';\nimport Container from './Components/Container';\nimport ReactDOM from 'react-dom';\nimport Header from './Components/Header';\nimport 'react-sticky-header/styles.css';\nimport SideBar from './Components/SideBar';\nimport Content from './Components/Content';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.isWeb3 = true;\n    this.isWeb3Locked = false;\n    this.appName = \"Patient Data\";\n\n    this.state = {\n      network: \"checking...\",\n      accounts: null,\n      medicalContract:null,\n      patientData:[],\n      sickCodes:[\n        {\n          idPatient: 0,\n          data:[]\n\n        }\n      ],\n      sickCodeByPatient:[]\n      \n    };\n\n    let web3 = window.web3;\n    if (typeof web3 !== \"undefined\") {\n      this.web3Provider = web3.currentProvider;\n      this.web3 = new Web3(web3.currentProvider);\n      this.medicalContract = TruffleContract(Medical);\n      this.medicalContract.setProvider(this.web3Provider);\n\n      if (web3.eth.coinbase === null)\n        this.isWeb3Locked = true;\n    } else {\n\n      this.isWeb3 = false;\n    }\n  }\n\n  setNetwork = () => {\n    let networkName,\n      that = this;\n\n    this.web3.version.getNetwork(function(err, networkId) {\n      switch (networkId) {\n      case \"1\":\n        networkName = \"Main\";\n        break;\n      case \"2\":\n        networkName = \"Morden\";\n        break;\n      case \"3\":\n        networkName = \"Ropsten\";\n        break;\n      case \"4\":\n        networkName = \"Rinkeby\";\n        break;\n      case \"42\":\n        networkName = \"Kovan\";\n        break;\n      default:\n        networkName = networkId;\n      }\n      that.setState({\n        network: networkName\n      })\n    });\n  };\n\n  getPatient = ()=>{\n    }\n\n\n  componentDidMount = async() => {\n    let account = this.web3.eth.coinbase;\n    let app = this;\ntry{\n    this.setNetwork(); \n\n    const accounts =this.web3.eth.accounts[0];\n    // const PatientDeploy= PatientFactory.networks[this.state.network];\n    // const patientContract =this.web3.eth.contract(\n    //   PatientFactory.abi,PatientDeploy && PatientDeploy.address\n    // );\n    this.setState({\n      accounts\n    },this.runExample)\n}catch(err){\n  alert(\n    `Failed to load web3, accounts, or contract. Check console for details.`,\n  );\n  console.log(\"error to doko\");\n  console.error(err);\n}\nthis.medicalContract.deployed().then(function(instance){\n  let patientdt = instance;\n  let patientdt2=instance;\n  instance.getPatientByOwner(app.state.accounts).then(function(ids){\n\n  console.log(\"so patient \" +ids);\n\nfor( let id of ids){\n\n  patientdt.patients(id).then(function(data){\n    const patientData = app.state.patientData; \n  patientData.push(data);\n    app.setState({\n      patientData\n    });\n    console.log(\"hahaha\" + data);\n  },100);\n\n  patientdt.PatientToSick(id).then(function(_idSickCode){\n    patientdt2.viewSickCode(_idSickCode).then(function(data){\n      const sickCodes = app.state.sickCodes;\n      let idPatient = id ;\n      sickCodes.push({idPatient,data});\n      app.setState({\n        sickCodes\n      });\n      console.log(\"ban ghi sick code \" + data)\n\n    })\n\n  })\n\n\n}\n  })\n\n  // instance.countSickCode().then(function(counts){\n  //   console.log(\"so ban ghi \" + counts);\n  //   let a = counts;\n  //   for(let id =0 ; id <counts; id ++){\n  //     patientdt.sickcodes(id).then(function(data1){\n  //       const sickcodes = app.state.sickcodes;\n  //       sickcodes.push(data1);\n  //       app.setState({\n  //         sickcodes\n  //       });\n  //     })\n  //   }\n  // })\n\n\n\n})\n\n\n  }\n\n  runExample= async()=>{\n    // const {patientContract}=this.state;\n    var userAccount =this.web3.eth.accounts[0];\n    // console.log(userAccount.address)\n    this.medicalContract.deployed().then((instance)=>{\n      let that=this;\n      this.medicalContractDeployed=instance;\n    this.medicalContractDeployed.CreatePatient(\"cuong\",5453,23,1,{from:userAccount}).then((response,error)=>{\n      if(response){\n        let that = this;\n        console.log(\"den day chua\");\n        // console.log(\"dung \" + response);\n        that.medicalContractDeployed.OwnerPatientCount(userAccount).then((data)=>{\n          \n            console.log(data);\n            console.log(that.state.patientData);\n            console.log(\"code \" + that.state.sickCodes[1].data);\n            console.log(\"code  sick \" + that.state.sickCodeByPatient);\n\n        });\n        // that.setState({patientData: that.patientContractDeployed.patients(2)});\n          \n }\n      else{\n        console.log(\"error cmnr \");\n        // console.log(\"error\" + error);\n      }\n    })\n  })\n}\n  \n    // that.patientContractDeployed.patients(1).then((zombie)=>{\n    //   ReactDOM.render(\n    //     ( <ul>\n    //       <li>Name: {zombie.name}</li>\n    //       <li>DNA: {zombie.age}</li>\n    //       <li>Level: {zombie.cmt}</li>\n    //       <li>Wins: {zombie.sex}</li>\n    //     </ul>),\n    //     document.getElementById('patientData')\n    //   );\n        \n    // })\n    //  console.log(this.patientContractDeployed.OwnerToPatient(userAccount).call());\n\n    \n    // console.log(\"heheh\")\n    // await this.patientContract.methods.CreatePatient(\"cuong\",5453,23,1).send({from:userAccount})\n\n\n  // setPatient = async(name,cmt,age,sex)=>{\n  //   const {patientContract}=this.state;\n  //   var userAccount =this.web3.eth.accounts[0];\n  //   await patientContract.methods.CreatePatient(name,cmt,age,sex).send({from:userAccount})\n  // }\n  getPatient=()=>{\n    // const {}\n  }\n  displayPatient=(patient)=>{\n    return(\n      <ul>\n          <li>Name: {patient.name}</li>\n         <li>DNA: {patient.age}</li>\n          <li>Level: {patient.cmt}</li>\n           <li>Wins: {patient.sex}</li>\n        </ul>)\n\n  }\n\n  updatePatient=()=>{\n    console.log(\"con me no\")\n    if(this.state.patientData){\n      let patient=this.state.patientData;\n      return(\n        <ul>\n          <li>Name: {patient.name}</li>\n         <li>DNA: {patient.age}</li>\n          <li>Level: {patient.cmt}</li>\n           <li>Wins: {patient.sex}</li>\n        </ul>\n      )\n    }\n  }\n\n  getSickbypatient=(patientID)=>{\n    let sickCode = this.state.sickCodes;\n    for(let sickcode of sickCode){\nif(sickcode.idPatient== patientID){\n  let x =  sickcode.idPatient;\n  this.setState({\n    sickCodeByPatient : x\n  })\n}\n    }\n    console.log(\"an lol chuaw\" + this.state.sickCodeByPatient )\n\n  }\n  render() {\n    if (this.isWeb3) {\n      if (this.isWeb3Locked) {\n        return (\n          <div>\n             <Header network={ this.state.network } appName={ this.appName }/>\n             <SideBar  patientData ={this.state.patientData}/>\n             <Content  message=\"Unlock Your Metamask/Mist Wallet\"/>\n            \n          </div>)\n      } else {\n        return (\n          <div>\n             <Header  network={ this.state.network }   appName={ this.appName }/>\n             <SideBar  patientData ={this.state.patientData}/>\n             <Content getSickbypatient= {this.getSickbypatient} patientData ={this.state.patientData}/>        \n            </div>)\n      }\n    } else {\n      return (\n        <div className=\"App\">\n        <Header />\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}