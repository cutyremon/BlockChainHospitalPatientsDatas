{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar distance = require('xor-distance');\n\nvar utils = require('./utils');\n\nvar map = require('async/map');\n/**\n * Maintains a list of peerIds sorted by distance from a DHT key.\n */\n\n\nvar PeerDistanceList =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Creates a new PeerDistanceList.\n   *\n   * @param {Buffer} originDhtKey - the DHT key from which distance is calculated\n   * @param {number} capacity - the maximum size of the list\n   */\n  function PeerDistanceList(originDhtKey, capacity) {\n    _classCallCheck(this, PeerDistanceList);\n\n    this.originDhtKey = originDhtKey;\n    this.capacity = capacity;\n    this.peerDistances = [];\n  }\n  /**\n   * The length of the list\n   */\n\n\n  _createClass(PeerDistanceList, [{\n    key: \"add\",\n\n    /**\n     * Add a peerId to the list.\n     *\n     * @param {PeerId} peerId\n     * @param {function(Error)} callback\n     * @returns {void}\n     */\n    value: function add(peerId, callback) {\n      var _this = this;\n\n      if (this.peerDistances.find(function (pd) {\n        return pd.peerId.id.equals(peerId.id);\n      })) {\n        return callback();\n      }\n\n      utils.convertPeerId(peerId, function (err, dhtKey) {\n        if (err) {\n          return callback(err);\n        }\n\n        var el = {\n          peerId: peerId,\n          distance: distance(_this.originDhtKey, dhtKey)\n        };\n\n        _this.peerDistances.push(el);\n\n        _this.peerDistances.sort(function (a, b) {\n          return distance.compare(a.distance, b.distance);\n        });\n\n        _this.peerDistances = _this.peerDistances.slice(0, _this.capacity);\n        callback();\n      });\n    }\n    /**\n     * Indicates whether any of the peerIds passed as a parameter are closer\n     * to the origin key than the furthest peerId in the PeerDistanceList.\n     *\n     * @param {Array<PeerId>} peerIds\n     * @param {function(Error, Boolean)} callback\n     * @returns {void}\n     */\n\n  }, {\n    key: \"anyCloser\",\n    value: function anyCloser(peerIds, callback) {\n      var _this2 = this;\n\n      if (!peerIds.length) {\n        return callback(null, false);\n      }\n\n      if (!this.length) {\n        return callback(null, true);\n      }\n\n      map(peerIds, function (peerId, cb) {\n        return utils.convertPeerId(peerId, cb);\n      }, function (err, dhtKeys) {\n        if (err) {\n          return callback(err);\n        }\n\n        var furthestDistance = _this2.peerDistances[_this2.peerDistances.length - 1].distance;\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = dhtKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var dhtKey = _step.value;\n            var keyDistance = distance(_this2.originDhtKey, dhtKey);\n\n            if (distance.compare(keyDistance, furthestDistance) < 0) {\n              return callback(null, true);\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        return callback(null, false);\n      });\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.peerDistances.length;\n    }\n    /**\n     * The peerIds in the list, in order of distance from the origin key\n     */\n\n  }, {\n    key: \"peers\",\n    get: function get() {\n      return this.peerDistances.map(function (pd) {\n        return pd.peerId;\n      });\n    }\n  }]);\n\n  return PeerDistanceList;\n}();\n\nmodule.exports = PeerDistanceList;","map":null,"metadata":{},"sourceType":"script"}