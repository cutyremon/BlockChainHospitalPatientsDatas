{"ast":null,"code":"'use strict';\n\nvar tryEach = require('async/tryEach');\n\nvar errCode = require('err-code');\n\nmodule.exports = function (node) {\n  var routers = node._modules.peerRouting || []; // If we have the dht, make it first\n\n  if (node._dht) {\n    routers.unshift(node._dht);\n  }\n\n  return {\n    /**\n     * Iterates over all peer routers in series to find the given peer.\n     *\n     * @param {String} id The id of the peer to find\n     * @param {object} options\n     * @param {number} options.maxTimeout How long the query should run\n     * @param {function(Error, Result<Array>)} callback\n     * @returns {void}\n     */\n    findPeer: function findPeer(id, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      if (!routers.length) {\n        callback(errCode(new Error('No peer routers available'), 'NO_ROUTERS_AVAILABLE'));\n      }\n\n      var tasks = routers.map(function (router) {\n        return function (cb) {\n          return router.findPeer(id, options, function (err, result) {\n            if (err) {\n              return cb(err);\n            } // If we don't have a result, we need to provide an error to keep trying\n\n\n            if (!result || Object.keys(result).length === 0) {\n              return cb(errCode(new Error('not found'), 'NOT_FOUND'), null);\n            }\n\n            cb(null, result);\n          });\n        };\n      });\n      tryEach(tasks, function (err, results) {\n        if (err && err.code !== 'NOT_FOUND') {\n          return callback(err);\n        }\n\n        results = results || [];\n        callback(null, results);\n      });\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}