{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar each = require('async/each');\n\nvar timeout = require('async/timeout');\n\nvar waterfall = require('async/waterfall');\n\nvar PeerQueue = require('../peer-queue'); // TODO: Temporary until parallel dial in Switch have a proper\n// timeout. Requires async/await refactor of transports and\n// dial abort logic. This gives us 30s to complete the `queryFunc`.\n// This should help reduce the high end call times of queries\n\n\nvar QUERY_FUNC_TIMEOUT = 30e3;\n/**\n * Manages a single Path through the DHT.\n */\n\nvar Path =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Creates a Path.\n   *\n   * @param {Run} run\n   * @param {queryFunc} queryFunc\n   */\n  function Path(run, queryFunc) {\n    _classCallCheck(this, Path);\n\n    this.run = run;\n    this.queryFunc = timeout(queryFunc, QUERY_FUNC_TIMEOUT);\n    /**\n     * @type {Array<PeerId>}\n     */\n\n    this.initialPeers = [];\n    /**\n     * @type {PeerQueue}\n     */\n\n    this.peersToQuery = null;\n  }\n  /**\n   * Add a peer to the set of peers that are used to intialize the path.\n   *\n   * @param {PeerId} peer\n   */\n\n\n  _createClass(Path, [{\n    key: \"addInitialPeer\",\n    value: function addInitialPeer(peer) {\n      this.initialPeers.push(peer);\n    }\n    /**\n     * Execute the path.\n     *\n     * @param {function(Error)} callback\n     */\n\n  }, {\n    key: \"execute\",\n    value: function execute(callback) {\n      var _this = this;\n\n      waterfall([// Create a queue of peers ordered by distance from the key\n      function (cb) {\n        return PeerQueue.fromKey(_this.run.query.key, cb);\n      }, // Add initial peers to the queue\n      function (q, cb) {\n        _this.peersToQuery = q;\n        each(_this.initialPeers, _this.addPeerToQuery.bind(_this), cb);\n      }, // Start processing the queue\n      function (cb) {\n        _this.run.workerQueue(_this, cb);\n      }], callback);\n    }\n    /**\n     * Add a peer to the peers to be queried.\n     *\n     * @param {PeerId} peer\n     * @param {function(Error)} callback\n     * @returns {void}\n     * @private\n     */\n\n  }, {\n    key: \"addPeerToQuery\",\n    value: function addPeerToQuery(peer, callback) {\n      // Don't add self\n      if (this.run.query.dht._isSelf(peer)) {\n        return callback();\n      } // The paths must be disjoint, meaning that no two paths in the Query may\n      // traverse the same peer\n\n\n      if (this.run.peersSeen.has(peer)) {\n        return callback();\n      }\n\n      this.peersToQuery.enqueue(peer, callback);\n    }\n  }]);\n\n  return Path;\n}();\n\nmodule.exports = Path;","map":null,"metadata":{},"sourceType":"script"}