{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _asyncIterator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar DirSharded = require('./dir-sharded');\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  var _flatToShard = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(child, dir, threshold, options) {\n    var newDir, parent;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            newDir = dir;\n\n            if (!(dir.flat && dir.directChildrenCount() >= threshold)) {\n              _context.next = 5;\n              break;\n            }\n\n            _context.next = 4;\n            return convertToShard(dir, options);\n\n          case 4:\n            newDir = _context.sent;\n\n          case 5:\n            parent = newDir.parent;\n\n            if (!parent) {\n              _context.next = 13;\n              break;\n            }\n\n            if (!(newDir !== dir)) {\n              _context.next = 11;\n              break;\n            }\n\n            if (child) {\n              child.parent = newDir;\n            }\n\n            _context.next = 11;\n            return parent.put(newDir.parentKey, newDir);\n\n          case 11:\n            if (!parent) {\n              _context.next = 13;\n              break;\n            }\n\n            return _context.abrupt(\"return\", flatToShard(newDir, parent, threshold, options));\n\n          case 13:\n            return _context.abrupt(\"return\", newDir);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  function flatToShard(_x, _x2, _x3, _x4) {\n    return _flatToShard.apply(this, arguments);\n  }\n\n  return flatToShard;\n}();\n\nfunction convertToShard(_x5, _x6) {\n  return _convertToShard.apply(this, arguments);\n}\n\nfunction _convertToShard() {\n  _convertToShard = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(oldDir, options) {\n    var newDir, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, _value2, key, child;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            newDir = new DirSharded({\n              root: oldDir.root,\n              dir: true,\n              parent: oldDir.parent,\n              parentKey: oldDir.parentKey,\n              path: oldDir.path,\n              dirty: oldDir.dirty,\n              flat: false\n            }, options);\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context2.prev = 3;\n            _iterator = _asyncIterator(oldDir.eachChildSeries());\n\n          case 5:\n            _context2.next = 7;\n            return _iterator.next();\n\n          case 7:\n            _step = _context2.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context2.next = 11;\n            return _step.value;\n\n          case 11:\n            _value = _context2.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context2.next = 19;\n              break;\n            }\n\n            _value2 = _value, key = _value2.key, child = _value2.child;\n            _context2.next = 16;\n            return newDir.put(key, child);\n\n          case 16:\n            _iteratorNormalCompletion = true;\n            _context2.next = 5;\n            break;\n\n          case 19:\n            _context2.next = 25;\n            break;\n\n          case 21:\n            _context2.prev = 21;\n            _context2.t0 = _context2[\"catch\"](3);\n            _didIteratorError = true;\n            _iteratorError = _context2.t0;\n\n          case 25:\n            _context2.prev = 25;\n            _context2.prev = 26;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context2.next = 30;\n              break;\n            }\n\n            _context2.next = 30;\n            return _iterator.return();\n\n          case 30:\n            _context2.prev = 30;\n\n            if (!_didIteratorError) {\n              _context2.next = 33;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 33:\n            return _context2.finish(30);\n\n          case 34:\n            return _context2.finish(25);\n\n          case 35:\n            return _context2.abrupt(\"return\", newDir);\n\n          case 36:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[3, 21, 25, 35], [26,, 30, 34]]);\n  }));\n  return _convertToShard.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"script"}