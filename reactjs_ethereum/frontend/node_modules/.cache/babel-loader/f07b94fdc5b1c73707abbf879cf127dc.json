{"ast":null,"code":"'use strict';\n\nvar debug = require('debug');\n\nvar setImmediate = require('async/setImmediate');\n\nvar log = debug('ipfs:mfs-preload');\nlog.error = debug('ipfs:mfs-preload:error');\n\nmodule.exports = function (self) {\n  var options = self._options.preload || {};\n  options.interval = options.interval || 30 * 1000;\n\n  if (!options.enabled) {\n    log('MFS preload disabled');\n    return {\n      start: function start(cb) {\n        return setImmediate(cb);\n      },\n      stop: function stop(cb) {\n        return setImmediate(cb);\n      }\n    };\n  }\n\n  var rootCid;\n  var timeoutId;\n\n  var preloadMfs = function preloadMfs() {\n    self.files.stat('/', function (err, stats) {\n      if (err) {\n        timeoutId = setTimeout(preloadMfs, options.interval);\n        return log.error('failed to stat MFS root for preload', err);\n      }\n\n      if (rootCid !== stats.hash) {\n        log(\"preloading updated MFS root \".concat(rootCid, \" -> \").concat(stats.hash));\n        return self._preload(stats.hash, function (err) {\n          timeoutId = setTimeout(preloadMfs, options.interval);\n          if (err) return log.error(\"failed to preload MFS root \".concat(stats.hash), err);\n          rootCid = stats.hash;\n        });\n      }\n\n      timeoutId = setTimeout(preloadMfs, options.interval);\n    });\n  };\n\n  return {\n    start: function start(cb) {\n      self.files.stat('/', function (err, stats) {\n        if (err) return cb(err);\n        rootCid = stats.hash;\n        log(\"monitoring MFS root \".concat(rootCid));\n        timeoutId = setTimeout(preloadMfs, options.interval);\n        cb();\n      });\n    },\n    stop: function stop(cb) {\n      clearTimeout(timeoutId);\n      cb();\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}