{"ast":null,"code":"'use strict';\n\nvar _objectSpread = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _classCallCheck = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar times = require('async/times');\n\nvar crypto = require('libp2p-crypto');\n\nvar waterfall = require('async/waterfall');\n\nvar multihashing = require('multihashing-async');\n\nvar PeerId = require('peer-id');\n\nvar assert = require('assert');\n\nvar c = require('./constants');\n\nvar _require = require('./utils'),\n    logger = _require.logger;\n\nvar AbortController = require('abort-controller');\n\nvar errcode = require('err-code');\n\nvar RandomWalk =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   * @param {DHT} dht\n   * @param {object} options\n   * @param {randomWalkOptions.enabled} options.enabled\n   * @param {randomWalkOptions.queriesPerPeriod} options.queriesPerPeriod\n   * @param {randomWalkOptions.interval} options.interval\n   * @param {randomWalkOptions.timeout} options.timeout\n   * @param {randomWalkOptions.delay} options.delay\n   * @param {DHT} options.dht\n   */\n  function RandomWalk(dht, options) {\n    _classCallCheck(this, RandomWalk);\n\n    assert(dht, 'Random Walk needs an instance of the Kademlia DHT');\n    this._options = _objectSpread({}, c.defaultRandomWalk, options);\n    this._kadDHT = dht;\n    this.log = logger(dht.peerInfo.id, 'random-walk');\n  }\n  /**\n   * Start the Random Walk process. This means running a number of queries\n   * every interval requesting random data. This is done to keep the dht\n   * healthy over time.\n   *\n   * @returns {void}\n   */\n\n\n  _createClass(RandomWalk, [{\n    key: \"start\",\n    value: function start() {\n      var _this = this;\n\n      // Don't run twice\n      if (this._timeoutId || !this._options.enabled) {\n        return;\n      } // Start doing random walks after `this._options.delay`\n\n\n      this._timeoutId = setTimeout(function () {\n        // Start runner immediately\n        _this._runPeriodically(function (done) {\n          // Each subsequent walk should run on a `this._options.interval` interval\n          _this._walk(_this._options.queriesPerPeriod, _this._options.timeout, function () {\n            return done(_this._options.interval);\n          });\n        }, 0);\n      }, this._options.delay);\n    }\n    /**\n     * Stop the random-walk process. Any active\n     * queries will be aborted.\n     *\n     * @returns {void}\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      clearTimeout(this._timeoutId);\n      this._timeoutId = null;\n      this._controller && this._controller.abort();\n    }\n    /**\n     * Run function `walk` on every `interval` ms\n     * @param {function(callback)} walk The function to execute on `interval`\n     * @param {number} interval The interval to run on in ms\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_runPeriodically\",\n    value: function _runPeriodically(walk, interval) {\n      var _this2 = this;\n\n      this._timeoutId = setTimeout(function () {\n        walk(function (nextInterval) {\n          // Schedule next\n          _this2._runPeriodically(walk, nextInterval);\n        });\n      }, interval);\n    }\n    /**\n     * Do the random walk work.\n     *\n     * @param {number} queries\n     * @param {number} walkTimeout\n     * @param {function(Error)} callback\n     * @returns {void}\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_walk\",\n    value: function _walk(queries, walkTimeout, callback) {\n      var _this3 = this;\n\n      this.log('start');\n      this._controller = new AbortController();\n      times(queries, function (i, next) {\n        _this3.log('running query %d', i); // Perform the walk\n\n\n        waterfall([function (cb) {\n          return _this3._randomPeerId(cb);\n        }, function (id, cb) {\n          // Check if we've happened to already abort\n          if (!_this3._controller) return cb();\n\n          _this3._query(id, {\n            timeout: walkTimeout,\n            signal: _this3._controller.signal\n          }, cb);\n        }], function (err) {\n          if (err && err.code !== 'ETIMEDOUT') {\n            _this3.log.error('query %d finished with error', i, err);\n\n            return next(err);\n          }\n\n          _this3.log('finished query %d', i);\n\n          next(null);\n        });\n      }, function (err) {\n        _this3._controller = null;\n\n        _this3.log('finished queries');\n\n        callback(err);\n      });\n    }\n    /**\n     * The query run during a random walk request.\n     *\n     * TODO: While query currently supports an abort controller, it is not\n     * yet supported by `DHT.findPeer`. Once https://github.com/libp2p/js-libp2p-kad-dht/pull/82\n     * is complete, and AbortController support has been added to the\n     * DHT query functions, the abort here will just work, provided the\n     * functions support `options.signal`. Once done, this todo should be\n     * removed.\n     *\n     * @param {PeerId} id\n     * @param {object} options\n     * @param {number} options.timeout\n     * @param {AbortControllerSignal} options.signal\n     * @param {function(Error)} callback\n     * @returns {void}\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_query\",\n    value: function _query(id, options, callback) {\n      var _this4 = this;\n\n      this.log('query:%s', id.toB58String());\n\n      this._kadDHT.findPeer(id, options, function (err, peer) {\n        if (err && err.code === 'ERR_NOT_FOUND') {\n          // expected case, we asked for random stuff after all\n          return callback();\n        }\n\n        if (err) {\n          return callback(err);\n        }\n\n        _this4.log('query:found', peer); // wait what, there was something found? Lucky day!\n\n\n        callback(errcode(new Error(\"random-walk: ACTUALLY FOUND PEER: \".concat(peer, \", \").concat(id.toB58String())), 'ERR_FOUND_RANDOM_PEER'));\n      });\n    }\n    /**\n     * Generate a random peer id for random-walk purposes.\n     *\n     * @param {function(Error, PeerId)} callback\n     * @returns {void}\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_randomPeerId\",\n    value: function _randomPeerId(callback) {\n      multihashing(crypto.randomBytes(16), 'sha2-256', function (err, digest) {\n        if (err) {\n          return callback(err);\n        }\n\n        callback(null, new PeerId(digest));\n      });\n    }\n  }]);\n\n  return RandomWalk;\n}();\n\nmodule.exports = RandomWalk;","map":null,"metadata":{},"sourceType":"script"}