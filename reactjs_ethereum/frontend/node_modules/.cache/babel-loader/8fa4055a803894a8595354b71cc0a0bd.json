{"ast":null,"code":"'use strict';\n\nvar exporter = require('ipfs-unixfs-exporter');\n\nvar deferred = require('pull-defer');\n\nvar pull = require('pull-stream/pull');\n\nvar once = require('pull-stream/sources/once');\n\nvar map = require('pull-stream/throughs/map');\n\nvar filter = require('pull-stream/throughs/filter');\n\nvar errCode = require('err-code');\n\nvar toPullStream = require('async-iterator-to-pull-stream');\n\nvar _require = require('./utils'),\n    normalizePath = _require.normalizePath,\n    mapFile = _require.mapFile;\n\nmodule.exports = function (self) {\n  return function (ipfsPath, options) {\n    options = options || {};\n    var path = normalizePath(ipfsPath);\n    var recursive = options.recursive;\n    var pathComponents = path.split('/');\n\n    if (options.preload !== false) {\n      self._preload(pathComponents[0]);\n    }\n\n    var d = deferred.source();\n    exporter(ipfsPath, self._ipld, options).then(function (file) {\n      if (!file.unixfs) {\n        return d.abort(errCode(new Error('dag node was not a UnixFS node'), 'ENOTUNIXFS'));\n      }\n\n      if (file.unixfs.type === 'file') {\n        return d.resolve(once(mapFile(options)(file)));\n      }\n\n      if (file.unixfs.type.includes('dir')) {\n        if (recursive) {\n          return d.resolve(pull(toPullStream.source(exporter.recursive(file.cid, self._ipld, options)), filter(function (child) {\n            return file.cid.toBaseEncodedString() !== child.cid.toBaseEncodedString();\n          }), map(mapFile(options))));\n        }\n\n        return d.resolve(pull(toPullStream.source(file.content()), map(mapFile(options)), map(function (file) {\n          file.depth--;\n          return file;\n        })));\n      }\n\n      d.abort(errCode(new Error(\"Unknown UnixFS type \".concat(file.unixfs.type)), 'EUNKNOWNUNIXFSTYPE'));\n    }, function (err) {\n      d.abort(err);\n    });\n    return d;\n  };\n};","map":null,"metadata":{},"sourceType":"script"}