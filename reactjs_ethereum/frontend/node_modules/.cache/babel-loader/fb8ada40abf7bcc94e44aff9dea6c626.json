{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar errCode = require('err-code');\n\nvar updateTree = require('./utils/update-tree');\n\nvar updateMfsRoot = require('./utils/update-mfs-root');\n\nvar toSources = require('./utils/to-sources');\n\nvar removeLink = require('./utils/remove-link');\n\nvar toMfsPath = require('./utils/to-mfs-path');\n\nvar toTrail = require('./utils/to-trail');\n\nvar applyDefaultOptions = require('./utils/apply-default-options');\n\nvar _require = require('./utils/constants'),\n    FILE_SEPARATOR = _require.FILE_SEPARATOR;\n\nvar defaultOptions = {\n  recursive: false,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  format: 'dag-pb',\n  flush: true\n};\n\nmodule.exports = function (context) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _mfsRm = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var args,\n            _ref,\n            sources,\n            options,\n            _iteratorNormalCompletion,\n            _didIteratorError,\n            _iteratorError,\n            _iterator,\n            _step,\n            source,\n            _args = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                args = Array.from(_args);\n                _context.next = 3;\n                return toSources(context, args, defaultOptions);\n\n              case 3:\n                _ref = _context.sent;\n                sources = _ref.sources;\n                options = applyDefaultOptions(args, defaultOptions);\n\n                if (sources.length) {\n                  _context.next = 8;\n                  break;\n                }\n\n                throw errCode(new Error('Please supply at least one path to remove'), 'ERR_INVALID_PARAMS');\n\n              case 8:\n                sources.forEach(function (source) {\n                  if (source.path === FILE_SEPARATOR) {\n                    throw errCode(new Error('Cannot delete root'), 'ERR_INVALID_PARAMS');\n                  }\n                });\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _iteratorError = undefined;\n                _context.prev = 12;\n                _iterator = sources[Symbol.iterator]();\n\n              case 14:\n                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n                  _context.next = 21;\n                  break;\n                }\n\n                source = _step.value;\n                _context.next = 18;\n                return removePath(context, source.path, options);\n\n              case 18:\n                _iteratorNormalCompletion = true;\n                _context.next = 14;\n                break;\n\n              case 21:\n                _context.next = 27;\n                break;\n\n              case 23:\n                _context.prev = 23;\n                _context.t0 = _context[\"catch\"](12);\n                _didIteratorError = true;\n                _iteratorError = _context.t0;\n\n              case 27:\n                _context.prev = 27;\n                _context.prev = 28;\n\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n\n              case 30:\n                _context.prev = 30;\n\n                if (!_didIteratorError) {\n                  _context.next = 33;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 33:\n                return _context.finish(30);\n\n              case 34:\n                return _context.finish(27);\n\n              case 35:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[12, 23, 27, 35], [28,, 30, 34]]);\n      }));\n\n      function mfsRm() {\n        return _mfsRm.apply(this, arguments);\n      }\n\n      return mfsRm;\n    }()\n  );\n};\n\nvar removePath =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(context, path, options) {\n    var mfsPath, trail, child, parent, _ref3, cid, newRootCid;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return toMfsPath(context, path);\n\n          case 2:\n            mfsPath = _context2.sent;\n            _context2.next = 5;\n            return toTrail(context, mfsPath.mfsPath, options);\n\n          case 5:\n            trail = _context2.sent;\n            child = trail.pop();\n            parent = trail[trail.length - 1];\n\n            if (parent) {\n              _context2.next = 10;\n              break;\n            }\n\n            throw errCode(new Error(\"\".concat(path, \" does not exist\")), 'ERR_NOT_FOUND');\n\n          case 10:\n            if (!(child.type === 'directory' && !options.recursive)) {\n              _context2.next = 12;\n              break;\n            }\n\n            throw errCode(new Error(\"\".concat(path, \" is a directory, use -r to remove directories\")), 'ERR_WAS_DIR');\n\n          case 12:\n            _context2.next = 14;\n            return removeLink(context, {\n              parentCid: parent.cid,\n              name: child.name,\n              format: options.format,\n              hashAlg: options.hashAlg,\n              cidVersion: options.cidVersion,\n              flush: options.flush\n            });\n\n          case 14:\n            _ref3 = _context2.sent;\n            cid = _ref3.cid;\n            parent.cid = cid; // update the tree with the new child\n\n            _context2.next = 19;\n            return updateTree(context, trail, options);\n\n          case 19:\n            newRootCid = _context2.sent;\n            _context2.next = 22;\n            return updateMfsRoot(context, newRootCid);\n\n          case 22:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function removePath(_x, _x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"script"}