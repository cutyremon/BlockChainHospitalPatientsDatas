{"ast":null,"code":"import _regeneratorRuntime from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Web3 from 'web3';\nimport TruffleContract from 'truffle-contract';\nimport Medical from './build/contracts/Medical.json';\nimport ReactDOM from 'react-dom';\nimport Header from './Components/Header';\nimport 'react-sticky-header/styles.css';\nimport SideBar from './Components/SideBar';\nimport Content from './Components/Content';\nimport { type } from 'os';\nimport ContentSendPatient from './Components/ContentSendPatient';\nimport { Route, Switch } from 'react-router-dom';\nimport CreatePatient from './Components/CreactPatient';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));\n\n    _this.setNetwork = function () {\n      var networkName,\n          that = _assertThisInitialized(_assertThisInitialized(_this));\n\n      _this.web3.version.getNetwork(function (err, networkId) {\n        switch (networkId) {\n          case \"1\":\n            networkName = \"Main\";\n            break;\n\n          case \"2\":\n            networkName = \"Morden\";\n            break;\n\n          case \"3\":\n            networkName = \"Ropsten\";\n            break;\n\n          case \"4\":\n            networkName = \"Rinkeby\";\n            break;\n\n          case \"42\":\n            networkName = \"Kovan\";\n            break;\n\n          default:\n            networkName = networkId;\n        }\n\n        that.setState({\n          network: networkName\n        });\n      });\n    };\n\n    _this.getPatient = function () {};\n\n    _this.componentDidMount =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var app, accounts;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              app = _assertThisInitialized(_assertThisInitialized(_this));\n\n              try {\n                _this.setNetwork();\n\n                accounts = _this.web3.eth.accounts[0];\n\n                _this.setState({\n                  accounts: accounts\n                }, _this.runExample);\n              } catch (err) {\n                alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n                console.log(\"error to doko\");\n                console.error(err);\n              }\n\n              _this.medicalContract.deployed().then(function (instance) {\n                var patientdt = instance;\n                var patientdt2 = instance;\n                instance.getPatientByOwner(app.state.accounts).then(function (ids) {\n                  console.log(\"ids:\" + ids + \" type : \" + typeof ids);\n                  var _iteratorNormalCompletion = true;\n                  var _didIteratorError = false;\n                  var _iteratorError = undefined;\n\n                  try {\n                    var _loop = function _loop() {\n                      var id = _step.value;\n                      //  let x = id ; \n                      patientdt.patients(id).then(function (data) {\n                        var patientData = app.state.patientData;\n                        patientData.push(data);\n                        app.setState({\n                          patientData: patientData\n                        });\n                      }, 100);\n                      patientdt.viewSickCode(id).then(function (data1) {\n                        // get sickcode của tất cả patient của user\n                        var idpatient1 = id.toNumber();\n                        data1 = data1.map(function (x) {\n                          return x.toNumber();\n                        });\n                        console.log(idpatient1 + typeof idpatient1 + typeof data1 + data1); // console.log(\"day la so \" + typeof(0) +  \" so : \" +idpatient1 );\n\n                        var sickCodes = app.state.sickCodes;\n                        sickCodes.push({\n                          idpatient1: idpatient1,\n                          data1: data1\n                        });\n                        app.setState({\n                          sickCodes: sickCodes\n                        });\n                        console.log(\"ban ghi sick code \" + idpatient1 + data1);\n                      });\n                    };\n\n                    for (var _iterator = ids[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                      _loop();\n                    }\n                  } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion && _iterator.return != null) {\n                        _iterator.return();\n                      }\n                    } finally {\n                      if (_didIteratorError) {\n                        throw _iteratorError;\n                      }\n                    }\n                  }\n                });\n\n                instance._countSick().then(function (count) {\n                  console.log(\"sick all \" + count);\n\n                  for (var id = 0; id < count; id++) {\n                    patientdt.sicks(id).then(function (data) {\n                      var name = data[0];\n                      var sickCode = data[1].toNumber();\n                      var sickDataAll = app.state.sickDataAll;\n                      sickDataAll.push({\n                        name: name,\n                        sickCode: sickCode\n                      }); // console.log(\"sck \" + sic)\n\n                      app.setState({\n                        sickDataAll: sickDataAll\n                      });\n                    });\n                  }\n                });\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    _this.runExample =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var userAccount;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              // const {patientContract}=this.state;\n              userAccount = _this.web3.eth.accounts[0]; // console.log(userAccount.address)\n\n              _this.medicalContract.deployed().then(function (instance) {\n                var that = _assertThisInitialized(_assertThisInitialized(_this));\n\n                _this.medicalContractDeployed = instance;\n\n                _this.medicalContractDeployed.CreatePatient(\"nguyen van cuong\", \"5453433333\", 23, 1, {\n                  from: userAccount\n                }).then(function (response, error) {\n                  if (response) {\n                    console.log(\"den day chua\"); // console.log(\"dung \" + response);\n                  } else {\n                    console.log(\"error cmnr \"); // console.log(\"error\" + error);\n                  }\n                });\n              });\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    _this.getSickbypatient = function (patientID) {\n      var app = _assertThisInitialized(_assertThisInitialized(_this)); // console.log(this.state.sickCodes[0])\n\n\n      var sickCodes = _this.state.sickCodes;\n      console.log(\"id = 0 :\" + sickCodes[0]);\n      sickCodes.forEach(function (x) {\n        if (x.idpatient1 == patientID) {\n          console.log(\"data\" + x.data1);\n          var sickCodeByPatient = [];\n          var sickDataAll = app.state.sickDataAll;\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = x.data1[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var data = _step2.value;\n              console.log(\"dem cai nay xem may cai\" + data);\n              var _iteratorNormalCompletion3 = true;\n              var _didIteratorError3 = false;\n              var _iteratorError3 = undefined;\n\n              try {\n                for (var _iterator3 = sickDataAll[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                  var sickdata = _step3.value;\n\n                  if (data == sickdata.sickCode) {\n                    sickCodeByPatient.push(sickdata);\n                    console.log(sickdata);\n                  }\n                }\n              } catch (err) {\n                _didIteratorError3 = true;\n                _iteratorError3 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                    _iterator3.return();\n                  }\n                } finally {\n                  if (_didIteratorError3) {\n                    throw _iteratorError3;\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n\n          app.setState({\n            sickCodeByPatient: sickCodeByPatient\n          });\n        }\n      });\n      console.log(\"day la cai xem \" + app.state.sickCodeByPatient[0]);\n    };\n\n    _this.getRecordMedecal = function (id, sickCode) {\n      var app = _assertThisInitialized(_assertThisInitialized(_this)); // console.log( \"id + sickcode\" + id + sickCode)\n\n\n      _this.medicalContract.deployed().then(function (instance) {\n        var contract = instance;\n        instance.getRecordMedical(id, sickCode).then(function (ids) {\n          // console.log(\"show id by patient \" + ids)\n          var recordMedical = [];\n          var _iteratorNormalCompletion4 = true;\n          var _didIteratorError4 = false;\n          var _iteratorError4 = undefined;\n\n          try {\n            for (var _iterator4 = ids[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n              var _id = _step4.value;\n              contract.medicalExaminations(_id).then(function (data) {\n                var number = data[0].toNumber();\n\n                var realTime = _this.convertNumberToRealTime(number);\n\n                var description = data[1];\n                recordMedical.push({\n                  realTime: realTime,\n                  description: description\n                });\n                console.log(data[0].toNumber() + recordMedical);\n                app.setState({\n                  recordMedical: recordMedical\n                });\n              });\n            } // app.setState({\n            //   recordMedical\n            // })\n\n          } catch (err) {\n            _didIteratorError4 = true;\n            _iteratorError4 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                _iterator4.return();\n              }\n            } finally {\n              if (_didIteratorError4) {\n                throw _iteratorError4;\n              }\n            }\n          }\n        }).catch(function (error) {\n          console.log(error);\n          alert(\"benh nhan khong bi mac benh nay , vui long khoi tao benh an\");\n        });\n      });\n    };\n\n    _this.convertNumberToRealTime = function (number) {\n      var d = new Date();\n      d.setTime(number * 1000);\n      var dateString = d.toUTCString(); // or d.toString if local time required\n\n      alert(dateString);\n      return dateString;\n    };\n\n    _this.setPatientTransport = function (id) {\n      _this.setState({\n        patientTransport: id[0]\n      });\n\n      console.log(id[0]);\n    };\n\n    _this.setToHospital = function (name, account) {\n      console.log(\"di chet di\" + account);\n      var patientID = _this.state.patientTransport;\n      var userAccount = _this.state.accounts;\n\n      var userAccount1 = _this.web3.toChecksumAddress(userAccount);\n\n      console.log(\"account\" + userAccount + \" , id \" + patientID); // let account1 = account.toLowerCase(); \n\n      console.log(\"from : \" + userAccount1 + \",   to : \" + account);\n\n      _this.medicalContract.deployed().then(function (instance) {\n        instance.transferFrom(userAccount, account, patientID, {\n          from: userAccount\n        }).then(function (response) {\n          alert(\"patient transferred to : \" + name);\n        }).catch(function (error) {\n          console.log(\"error cmnr \" + error);\n        });\n      });\n    };\n\n    _this.createPatient = function (name, cmt, age, gender) {\n      var userAccount = _this.web3.eth.accounts[0]; // console.log(userAccount.address)\n\n      _this.medicalContract.deployed().then(function (instance) {\n        var that = _assertThisInitialized(_assertThisInitialized(_this));\n\n        instance.CreatePatient(name, cmt, age, gender, {\n          from: userAccount\n        }).then(function (response, error) {\n          if (response) {\n            alert(\"More successful patients \");\n          } else {\n            console.log(\"error:\" + error); // console.log(\"error\" + error);\n          }\n        });\n      });\n    };\n\n    _this.isWeb3 = true;\n    _this.isWeb3Locked = false;\n    _this.appName = \"Patient Data\";\n    _this.state = {\n      network: \"checking...\",\n      accounts: null,\n      medicalContract: null,\n      patientData: [],\n      sickCodes: [],\n      //show ra cac ban ghi benh cua tat ca cac patient cua user\n      sickCodeByPatient: [],\n      //show cac benh cua 1 patient.\n      sickDataAll: [],\n      //  tat cac benh trong contract \n      recordMedical: [],\n      // by patient + sickCode\n      keyComponentRender: 0,\n      patientTransport: null\n    };\n    var web3 = window.web3;\n\n    if (typeof web3 !== \"undefined\") {\n      _this.web3Provider = web3.currentProvider;\n      _this.web3 = new Web3(web3.currentProvider);\n      _this.medicalContract = TruffleContract(Medical);\n\n      _this.medicalContract.setProvider(_this.web3Provider);\n\n      if (web3.eth.coinbase === null) _this.isWeb3Locked = true;\n    } else {\n      _this.isWeb3 = false;\n    }\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (this.isWeb3) {\n        if (this.isWeb3Locked) {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 307\n            },\n            __self: this\n          }, React.createElement(Header, {\n            network: this.state.network,\n            appName: this.appName,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 308\n            },\n            __self: this\n          }), React.createElement(SideBar, {\n            patientData: this.state.patientData,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 309\n            },\n            __self: this\n          }), React.createElement(Content, {\n            message: \"Unlock Your Metamask/Mist Wallet\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 310\n            },\n            __self: this\n          }));\n        } else {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 315\n            },\n            __self: this\n          }, React.createElement(Header, {\n            network: this.state.network,\n            appName: this.appName,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 316\n            },\n            __self: this\n          }), React.createElement(SideBar, {\n            patientData: this.state.patientData,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 317\n            },\n            __self: this\n          }), React.createElement(Switch, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 318\n            },\n            __self: this\n          }, React.createElement(Route, {\n            exact: true,\n            path: \"/\",\n            render: function render(props) {\n              return React.createElement(Content, {\n                getSickbypatient: _this2.getSickbypatient,\n                patientData: _this2.state.patientData,\n                sickCodeByPatient: _this2.state.sickCodeByPatient,\n                sickDataAll: _this2.state.sickDataAll,\n                getRecordMedecal: _this2.getRecordMedecal,\n                recordMedical: _this2.state.recordMedical,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 320\n                },\n                __self: this\n              });\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 319\n            },\n            __self: this\n          }), React.createElement(Route, {\n            path: \"/createPatient\",\n            render: function render(props) {\n              return React.createElement(CreatePatient, {\n                createPatient: _this2.createPatient,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 323\n                },\n                __self: this\n              });\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 323\n            },\n            __self: this\n          }), React.createElement(Route, {\n            path: \"/sendPatient\",\n            render: function render(props) {\n              return React.createElement(ContentSendPatient, {\n                patientData: _this2.state.patientData,\n                setPatientTransport: _this2.setPatientTransport,\n                setToHospital: _this2.setToHospital,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 326\n                },\n                __self: this\n              });\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 326\n            },\n            __self: this\n          })));\n        }\n      } else {\n        return React.createElement(\"div\", {\n          className: \"App\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 333\n          },\n          __self: this\n        }, React.createElement(Header, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 334\n          },\n          __self: this\n        }));\n      }\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/cutyremon/blockChain/reactjs_ethereum/frontend/src/App.js"],"names":["React","Component","Web3","TruffleContract","Medical","ReactDOM","Header","SideBar","Content","type","ContentSendPatient","Route","Switch","CreatePatient","App","setNetwork","networkName","that","web3","version","getNetwork","err","networkId","setState","network","getPatient","componentDidMount","app","accounts","eth","runExample","alert","console","log","error","medicalContract","deployed","then","instance","patientdt","patientdt2","getPatientByOwner","state","ids","id","patients","data","patientData","push","viewSickCode","data1","idpatient1","toNumber","map","x","sickCodes","_countSick","count","sicks","name","sickCode","sickDataAll","userAccount","medicalContractDeployed","from","response","getSickbypatient","patientID","forEach","sickCodeByPatient","sickdata","getRecordMedecal","contract","getRecordMedical","recordMedical","medicalExaminations","number","realTime","convertNumberToRealTime","description","catch","d","Date","setTime","dateString","toUTCString","setPatientTransport","patientTransport","setToHospital","account","userAccount1","toChecksumAddress","transferFrom","createPatient","cmt","age","gender","isWeb3","isWeb3Locked","appName","keyComponentRender","window","web3Provider","currentProvider","setProvider","coinbase","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Web3 from 'web3';\nimport TruffleContract from 'truffle-contract';\nimport Medical from './build/contracts/Medical.json';\nimport ReactDOM from 'react-dom';\nimport Header from './Components/Header';\nimport 'react-sticky-header/styles.css';\nimport SideBar from './Components/SideBar';\nimport Content from './Components/Content';\nimport { type } from 'os';\nimport ContentSendPatient from './Components/ContentSendPatient';\nimport { Route, Switch } from 'react-router-dom';\nimport CreatePatient from './Components/CreactPatient';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.isWeb3 = true;\n    this.isWeb3Locked = false;\n    this.appName = \"Patient Data\";\n\n    this.state = {\n      network: \"checking...\",\n      accounts: null,\n      medicalContract: null,\n      patientData: [],\n      sickCodes: [],//show ra cac ban ghi benh cua tat ca cac patient cua user\n      sickCodeByPatient: [],//show cac benh cua 1 patient.\n      sickDataAll: [], //  tat cac benh trong contract \n      recordMedical: [],// by patient + sickCode\n      keyComponentRender: 0,\n      patientTransport: null\n    };\n\n    let web3 = window.web3;\n    if (typeof web3 !== \"undefined\") {\n      this.web3Provider = web3.currentProvider;\n      this.web3 = new Web3(web3.currentProvider);\n      this.medicalContract = TruffleContract(Medical);\n      this.medicalContract.setProvider(this.web3Provider);\n\n      if (web3.eth.coinbase === null)\n        this.isWeb3Locked = true;\n    } else {\n\n      this.isWeb3 = false;\n    }\n  }\n\n  setNetwork = () => {\n    let networkName,\n      that = this;\n\n    this.web3.version.getNetwork(function (err, networkId) {\n      switch (networkId) {\n        case \"1\":\n          networkName = \"Main\";\n          break;\n        case \"2\":\n          networkName = \"Morden\";\n          break;\n        case \"3\":\n          networkName = \"Ropsten\";\n          break;\n        case \"4\":\n          networkName = \"Rinkeby\";\n          break;\n        case \"42\":\n          networkName = \"Kovan\";\n          break;\n        default:\n          networkName = networkId;\n      }\n      that.setState({\n        network: networkName\n      })\n    });\n  };\n\n  getPatient = () => {\n  }\n\n\n  componentDidMount = async () => {\n    let app = this;\n    try {\n      this.setNetwork();\n\n      const accounts = this.web3.eth.accounts[0];\n\n      this.setState({\n        accounts\n      }, this.runExample)\n    } catch (err) {\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.log(\"error to doko\");\n      console.error(err);\n    }\n    this.medicalContract.deployed().then(function (instance) {\n      let patientdt = instance;\n      let patientdt2 = instance;\n      instance.getPatientByOwner(app.state.accounts).then(function (ids) {\n\n        console.log(\"ids:\" + ids + \" type : \" + typeof (ids));\n\n        for (let id of ids) {\n          //  let x = id ; \n          patientdt.patients(id).then(function (data) {\n            const patientData = app.state.patientData;\n            patientData.push(data);\n            app.setState({\n              patientData\n            });\n\n          }, 100);\n\n          patientdt.viewSickCode(id).then(function (data1) {// get sickcode của tất cả patient của user\n            let idpatient1 = id.toNumber();\n            data1 = data1.map(x => x.toNumber());\n            console.log(idpatient1 + typeof (idpatient1) + typeof (data1) + data1);\n            // console.log(\"day la so \" + typeof(0) +  \" so : \" +idpatient1 );\n            const sickCodes = app.state.sickCodes;\n            sickCodes.push({ idpatient1, data1 })\n            app.setState({\n              sickCodes\n            });\n            console.log(\"ban ghi sick code \" + idpatient1 + data1)\n\n          })\n\n\n        }\n      })\n\n      instance._countSick().then(function (count) {\n        console.log(\"sick all \" + count);\n        for (let id = 0; id < count; id++) {\n          patientdt.sicks(id).then(function (data) {\n            let name = data[0];\n            let sickCode = data[1].toNumber();\n            let sickDataAll = app.state.sickDataAll;\n            sickDataAll.push({ name, sickCode });\n            // console.log(\"sck \" + sic)\n            app.setState({\n              sickDataAll\n            });\n\n          })\n        }\n      })\n\n    })\n\n\n  }\n\n  runExample = async () => {\n    // const {patientContract}=this.state;\n    var userAccount = this.web3.eth.accounts[0];\n    // console.log(userAccount.address)\n    this.medicalContract.deployed().then((instance) => {\n      let that = this;\n      this.medicalContractDeployed = instance;\n      this.medicalContractDeployed.CreatePatient(\"nguyen van cuong\", \"5453433333\", 23, 1, { from: userAccount }).then((response, error) => {\n        if (response) {\n          console.log(\"den day chua\");\n          // console.log(\"dung \" + response);\n        }\n        else {\n          console.log(\"error cmnr \");\n          // console.log(\"error\" + error);\n        }\n      })\n    })\n  }\n\n\n  getSickbypatient = (patientID) => {\n    let app = this;\n    // console.log(this.state.sickCodes[0])\n    let sickCodes = this.state.sickCodes;\n    console.log(\"id = 0 :\" + sickCodes[0])\n    sickCodes.forEach(function (x) {\n      if (x.idpatient1 == patientID) {\n        console.log(\"data\" + x.data1);\n\n        let sickCodeByPatient = [];\n        let sickDataAll = app.state.sickDataAll;\n        for (let data of x.data1) {\n          console.log(\"dem cai nay xem may cai\" + data)\n          for (let sickdata of sickDataAll) {\n            if (data == sickdata.sickCode) {\n              sickCodeByPatient.push(sickdata);\n              console.log(sickdata);\n            }\n          }\n\n        }\n\n        app.setState({\n          sickCodeByPatient\n        })\n      }\n    });\n\n    console.log(\"day la cai xem \" + app.state.sickCodeByPatient[0]);\n\n  }\n\n  getRecordMedecal = (id, sickCode) => {\n    let app = this;\n    // console.log( \"id + sickcode\" + id + sickCode)\n    this.medicalContract.deployed().then((instance) => {\n      let contract = instance;\n      instance.getRecordMedical(id, sickCode).then((ids) => {\n        // console.log(\"show id by patient \" + ids)\n        let recordMedical = [];\n        for (let id of ids) {\n          contract.medicalExaminations(id).then((data) => {\n\n            let number = data[0].toNumber();\n            let realTime = this.convertNumberToRealTime(number);\n\n            let description = data[1];\n            recordMedical.push({ realTime, description });\n            console.log(data[0].toNumber() + recordMedical);\n            app.setState({\n              recordMedical\n            });\n          })\n        }\n        // app.setState({\n        //   recordMedical\n        // })\n      }).catch((error) => {\n        console.log(error)\n        alert(\"benh nhan khong bi mac benh nay , vui long khoi tao benh an\");\n      })\n\n    })\n\n  }\n\n  convertNumberToRealTime = (number) => {\n    let d = new Date();\n    d.setTime(number * 1000);\n    let dateString = d.toUTCString();  // or d.toString if local time required\n    alert(dateString);\n    return dateString;\n\n  }\n  setPatientTransport = (id) => {\n    this.setState({\n      patientTransport: id[0]\n    })\n    console.log(id[0])\n  }\n\n\n  setToHospital = (name, account) => {\n    console.log(\"di chet di\" + account);\n    let patientID = this.state.patientTransport;\n    let userAccount = this.state.accounts;\n    let userAccount1 = this.web3.toChecksumAddress(userAccount);\n    console.log(\"account\" + userAccount + \" , id \" + patientID);\n    // let account1 = account.toLowerCase(); \n    console.log(\"from : \" + userAccount1 + \",   to : \" + account);\n    this.medicalContract.deployed().then((instance) => {\n      instance.transferFrom(userAccount, account, patientID, { from: userAccount }).then((response) => {\n\n        alert(\"patient transferred to : \" + name);\n      }).catch((error) => {\n        console.log(\"error cmnr \" + error)\n      })\n\n    })\n\n\n  }\n  createPatient = (name,cmt,age,gender)=>{\n    let userAccount = this.web3.eth.accounts[0];\n    // console.log(userAccount.address)\n    this.medicalContract.deployed().then((instance) => {\n      let that = this;\n      instance.CreatePatient(name,cmt,age, gender, { from: userAccount }).then((response, error) => {\n        if (response) {\n         alert(\"More successful patients \")\n        }\n        else {\n          console.log(\"error:\" + error);\n          // console.log(\"error\" + error);\n        }\n      })\n    })\n\n\n  }\n\n  render() {\n    if (this.isWeb3) {\n      if (this.isWeb3Locked) {\n        return (\n          <div>\n            <Header network={this.state.network} appName={this.appName} />\n            <SideBar patientData={this.state.patientData} />\n            <Content message=\"Unlock Your Metamask/Mist Wallet\" />\n\n          </div>)\n      } else {\n        return (\n          <div>\n            <Header network={this.state.network} appName={this.appName} />\n            <SideBar patientData={this.state.patientData} />\n            <Switch>\n              <Route exact path='/' render={(props) =>\n                <Content getSickbypatient={this.getSickbypatient} patientData={this.state.patientData} sickCodeByPatient={this.state.sickCodeByPatient}\n                  sickDataAll={this.state.sickDataAll} getRecordMedecal={this.getRecordMedecal} recordMedical={this.state.recordMedical} />\n              } />\n              <Route path='/createPatient' render={(props)=><CreatePatient createPatient = {this.createPatient}/>}/>\n\n             \n              <Route path='/sendPatient' render={(props) => <ContentSendPatient patientData={this.state.patientData}\n                setPatientTransport={this.setPatientTransport} setToHospital={this.setToHospital} />} />\n            </Switch>\n          </div>)\n      }\n    } else {\n      return (\n        <div className=\"App\">\n          <Header />\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}