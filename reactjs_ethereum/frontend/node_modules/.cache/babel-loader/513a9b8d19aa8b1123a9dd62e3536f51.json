{"ast":null,"code":"'use strict';\n\nvar get = require('dlv');\n\nvar mergeOptions = require('merge-options');\n\nvar ipnsUtils = require('../ipns/routing/utils');\n\nmodule.exports = function libp2p(self, config) {\n  var options = self._options || {};\n  config = config || {}; // Always create libp2p via a bundle function\n\n  var createBundle = typeof options.libp2p === 'function' ? options.libp2p : defaultBundle;\n  var datastore = self._repo.datastore;\n  var peerInfo = self._peerInfo;\n  var peerBook = self._peerInfoBook;\n  var libp2p = createBundle({\n    options: options,\n    config: config,\n    datastore: datastore,\n    peerInfo: peerInfo,\n    peerBook: peerBook\n  });\n  libp2p.on('stop', function () {\n    // Clear our addresses so we can start clean\n    peerInfo.multiaddrs.clear();\n  });\n  libp2p.on('start', function () {\n    peerInfo.multiaddrs.forEach(function (ma) {\n      self._print('Swarm listening on', ma.toString());\n    });\n  });\n  libp2p.on('peer:connect', function (peerInfo) {\n    return peerBook.put(peerInfo);\n  });\n  return libp2p;\n};\n\nfunction defaultBundle(_ref) {\n  var datastore = _ref.datastore,\n      peerInfo = _ref.peerInfo,\n      peerBook = _ref.peerBook,\n      options = _ref.options,\n      config = _ref.config;\n  var libp2pDefaults = {\n    datastore: datastore,\n    peerInfo: peerInfo,\n    peerBook: peerBook,\n    config: {\n      peerDiscovery: {\n        mdns: {\n          enabled: get(options, 'config.Discovery.MDNS.Enabled', get(config, 'Discovery.MDNS.Enabled', true))\n        },\n        webRTCStar: {\n          enabled: get(options, 'config.Discovery.webRTCStar.Enabled', get(config, 'Discovery.webRTCStar.Enabled', true))\n        },\n        bootstrap: {\n          list: get(options, 'config.Bootstrap', get(config, 'Bootstrap', []))\n        }\n      },\n      relay: {\n        enabled: get(options, 'relay.enabled', get(config, 'relay.enabled', true)),\n        hop: {\n          enabled: get(options, 'relay.hop.enabled', get(config, 'relay.hop.enabled', false)),\n          active: get(options, 'relay.hop.active', get(config, 'relay.hop.active', false))\n        }\n      },\n      dht: {\n        kBucketSize: get(options, 'dht.kBucketSize', 20),\n        // enabled: !get(options, 'offline', false), // disable if offline, on by default\n        enabled: false,\n        randomWalk: {\n          enabled: false // disabled waiting for https://github.com/libp2p/js-libp2p-kad-dht/issues/86\n\n        },\n        validators: {\n          ipns: ipnsUtils.validator\n        },\n        selectors: {\n          ipns: ipnsUtils.selector\n        }\n      },\n      EXPERIMENTAL: {\n        pubsub: get(options, 'EXPERIMENTAL.pubsub', false)\n      }\n    },\n    connectionManager: get(options, 'connectionManager', {\n      maxPeers: get(config, 'Swarm.ConnMgr.HighWater'),\n      minPeers: get(config, 'Swarm.ConnMgr.LowWater')\n    })\n  };\n  var libp2pOptions = mergeOptions(libp2pDefaults, get(options, 'libp2p', {})); // Required inline to reduce startup time\n  // Note: libp2p-nodejs gets replaced by libp2p-browser when webpacked/browserified\n\n  var Node = require('../runtime/libp2p-nodejs');\n\n  return new Node(libp2pOptions);\n}","map":null,"metadata":{},"sourceType":"script"}