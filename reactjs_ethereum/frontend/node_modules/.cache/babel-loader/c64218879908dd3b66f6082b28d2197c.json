{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _possibleConstructorReturn = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/inherits\");\n\nvar WS = require('libp2p-websockets');\n\nvar WebRTCStar = require('libp2p-webrtc-star');\n\nvar WebSocketStarMulti = require('libp2p-websocket-star-multi');\n\nvar Multiplex = require('pull-mplex');\n\nvar SECIO = require('libp2p-secio');\n\nvar Bootstrap = require('libp2p-bootstrap');\n\nvar KadDHT = require('libp2p-kad-dht');\n\nvar libp2p = require('libp2p');\n\nvar mergeOptions = require('merge-options');\n\nvar multiaddr = require('multiaddr');\n\nvar Node =\n/*#__PURE__*/\nfunction (_libp2p) {\n  _inherits(Node, _libp2p);\n\n  function Node(_options) {\n    _classCallCheck(this, Node);\n\n    var wrtcstar = new WebRTCStar({\n      id: _options.peerInfo.id\n    }); // this can be replaced once optional listening is supported with the below code. ref: https://github.com/libp2p/interface-transport/issues/41\n    // const wsstar = new WebSocketStar({ id: _options.peerInfo.id })\n\n    var wsstarServers = _options.peerInfo.multiaddrs.toArray().map(String).filter(function (addr) {\n      return addr.includes('p2p-websocket-star');\n    });\n\n    _options.peerInfo.multiaddrs.replace(wsstarServers.map(multiaddr), '/p2p-websocket-star'); // the ws-star-multi module will replace this with the chosen ws-star servers\n\n\n    var wsstar = new WebSocketStarMulti({\n      servers: wsstarServers,\n      id: _options.peerInfo.id,\n      ignore_no_online: !wsstarServers.length || _options.wsStarIgnoreErrors\n    });\n    var defaults = {\n      switch: {\n        blacklistTTL: 2 * 60 * 1e3,\n        // 2 minute base\n        blackListAttempts: 5,\n        // back off 5 times\n        maxParallelDials: 100,\n        maxColdCalls: 25,\n        dialTimeout: 20e3\n      },\n      modules: {\n        transport: [WS, wrtcstar, wsstar],\n        streamMuxer: [Multiplex],\n        connEncryption: [SECIO],\n        peerDiscovery: [wrtcstar.discovery, wsstar.discovery, Bootstrap],\n        dht: KadDHT\n      },\n      config: {\n        peerDiscovery: {\n          autoDial: true,\n          bootstrap: {\n            enabled: true\n          },\n          webRTCStar: {\n            enabled: true\n          },\n          websocketStar: {\n            enabled: true\n          }\n        },\n        dht: {\n          enabled: false\n        },\n        EXPERIMENTAL: {\n          pubsub: false\n        }\n      }\n    };\n    return _possibleConstructorReturn(this, _getPrototypeOf(Node).call(this, mergeOptions(defaults, _options)));\n  }\n\n  return Node;\n}(libp2p);\n\nmodule.exports = Node;","map":null,"metadata":{},"sourceType":"script"}