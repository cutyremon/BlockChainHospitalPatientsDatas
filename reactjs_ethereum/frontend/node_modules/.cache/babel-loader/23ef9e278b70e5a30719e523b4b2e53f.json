{"ast":null,"code":"'use strict';\n\nvar tryEach = require('async/tryEach');\n\nvar parallel = require('async/parallel');\n\nvar errCode = require('err-code');\n\nmodule.exports = function (node) {\n  var routers = node._modules.contentRouting || []; // If we have the dht, make it first\n\n  if (node._dht) {\n    routers.unshift(node._dht);\n  }\n\n  return {\n    /**\n     * Iterates over all content routers in series to find providers of the given key.\n     * Once a content router succeeds, iteration will stop.\n     *\n     * @param {CID} key The CID key of the content to find\n     * @param {object} options\n     * @param {number} options.maxTimeout How long the query should run\n     * @param {number} options.maxNumProviders - maximum number of providers to find\n     * @param {function(Error, Result<Array>)} callback\n     * @returns {void}\n     */\n    findProviders: function findProviders(key, options, callback) {\n      if (typeof options === 'function') {\n        callback = options;\n        options = {};\n      } else if (typeof options === 'number') {\n        // This can be deprecated in a future release\n        options = {\n          maxTimeout: options\n        };\n      }\n\n      if (!routers.length) {\n        return callback(errCode(new Error('No content routers available'), 'NO_ROUTERS_AVAILABLE'));\n      }\n\n      var tasks = routers.map(function (router) {\n        return function (cb) {\n          return router.findProviders(key, options, function (err, results) {\n            if (err) {\n              return cb(err);\n            } // If we don't have any results, we need to provide an error to keep trying\n\n\n            if (!results || Object.keys(results).length === 0) {\n              return cb(errCode(new Error('not found'), 'NOT_FOUND'), null);\n            }\n\n            cb(null, results);\n          });\n        };\n      });\n      tryEach(tasks, function (err, results) {\n        if (err && err.code !== 'NOT_FOUND') {\n          return callback(err);\n        }\n\n        results = results || [];\n        callback(null, results);\n      });\n    },\n\n    /**\n     * Iterates over all content routers in parallel to notify it is\n     * a provider of the given key.\n     *\n     * @param {CID} key The CID key of the content to find\n     * @param {function(Error)} callback\n     * @returns {void}\n     */\n    provide: function provide(key, callback) {\n      if (!routers.length) {\n        return callback(errCode(new Error('No content routers available'), 'NO_ROUTERS_AVAILABLE'));\n      }\n\n      parallel(routers.map(function (router) {\n        return function (cb) {\n          return router.provide(key, cb);\n        };\n      }), callback);\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}