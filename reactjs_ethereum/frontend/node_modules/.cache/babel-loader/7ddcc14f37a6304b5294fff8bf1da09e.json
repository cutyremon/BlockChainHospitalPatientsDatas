{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  function IPFSUploader(_node) {\n    _classCallCheck(this, IPFSUploader);\n\n    this.node = _node || new IPFS();\n  }\n\n  _createClass(IPFSUploader, [{\n    key: \"uploadBlob\",\n    value: function uploadBlob(blob) {\n      var _this = this;\n\n      var reader = new FileReader();\n      var result = new Promise(function (resolve, reject) {\n        reader.onload =\n        /*#__PURE__*/\n        _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee() {\n          var result;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return _this.node.files.add([Buffer.from(reader.result)]);\n\n                case 2:\n                  result = _context.sent;\n                  resolve(result[0].hash);\n\n                case 4:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n      });\n      reader.readAsArrayBuffer(blob);\n      return result;\n    }\n  }, {\n    key: \"loadImage\",\n    value: function loadImage(img, hash) {\n      this.node.files.cat(hash).then(function (stream) {\n        var buf = [];\n        var blob;\n        stream.on('data', function (file) {\n          var data = Array.prototype.slice.call(file);\n          buf = buf.concat(data);\n        });\n        stream.on('end', function (file) {\n          if (typeof blob !== 'undefined') {\n            window.URL.revokeObjectURL(blob);\n          }\n\n          buf = new Buffer(buf);\n          blob = new Blob([buf], {\n            type: 'image/jpg'\n          });\n          img.src = window.URL.createObjectURL(blob);\n          img.srcset = '';\n        });\n      });\n    }\n  }]);\n\n  return IPFSUploader;\n}();","map":null,"metadata":{},"sourceType":"script"}