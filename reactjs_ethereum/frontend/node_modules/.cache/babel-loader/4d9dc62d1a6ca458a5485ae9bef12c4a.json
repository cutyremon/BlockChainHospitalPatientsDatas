{"ast":null,"code":"import _regeneratorRuntime from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Web3 from 'web3';\nimport TruffleContract from 'truffle-contract';\nimport Medical from './build/contracts/Medical.json';\nimport ReactDOM from 'react-dom';\nimport Header from './Components/Header';\nimport 'react-sticky-header/styles.css';\nimport SideBar from './Components/SideBar';\nimport Content from './Components/Content';\nimport { type } from 'os';\nimport ContentSendPatient from './Components/ContentSendPatient';\nimport { Route, Switch } from 'react-router-dom';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));\n\n    _this.setNetwork = function () {\n      var networkName,\n          that = _assertThisInitialized(_assertThisInitialized(_this));\n\n      _this.web3.version.getNetwork(function (err, networkId) {\n        switch (networkId) {\n          case \"1\":\n            networkName = \"Main\";\n            break;\n\n          case \"2\":\n            networkName = \"Morden\";\n            break;\n\n          case \"3\":\n            networkName = \"Ropsten\";\n            break;\n\n          case \"4\":\n            networkName = \"Rinkeby\";\n            break;\n\n          case \"42\":\n            networkName = \"Kovan\";\n            break;\n\n          default:\n            networkName = networkId;\n        }\n\n        that.setState({\n          network: networkName\n        });\n      });\n    };\n\n    _this.getPatient = function () {};\n\n    _this.componentDidMount =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var app, accounts;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              app = _assertThisInitialized(_assertThisInitialized(_this));\n\n              try {\n                _this.setNetwork();\n\n                accounts = _this.web3.eth.accounts[0];\n\n                _this.setState({\n                  accounts: accounts\n                }, _this.runExample);\n              } catch (err) {\n                alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n                console.log(\"error to doko\");\n                console.error(err);\n              }\n\n              _this.medicalContract.deployed().then(function (instance) {\n                var patientdt = instance;\n                var patientdt2 = instance;\n                instance.getPatientByOwner(app.state.accounts).then(function (ids) {\n                  console.log(\"ids:\" + ids + \" type : \" + typeof ids);\n                  var _iteratorNormalCompletion = true;\n                  var _didIteratorError = false;\n                  var _iteratorError = undefined;\n\n                  try {\n                    var _loop = function _loop() {\n                      var id = _step.value;\n                      //  let x = id ; \n                      patientdt.patients(id).then(function (data) {\n                        var patientData = app.state.patientData;\n                        patientData.push(data);\n                        app.setState({\n                          patientData: patientData\n                        });\n                      }, 100);\n                      patientdt.viewSickCode(id).then(function (data1) {\n                        // get sickcode của tất cả patient của user\n                        var idpatient1 = id.toNumber();\n                        data1 = data1.map(function (x) {\n                          return x.toNumber();\n                        });\n                        console.log(idpatient1 + typeof idpatient1 + typeof data1 + data1); // console.log(\"day la so \" + typeof(0) +  \" so : \" +idpatient1 );\n\n                        var sickCodes = app.state.sickCodes;\n                        sickCodes.push({\n                          idpatient1: idpatient1,\n                          data1: data1\n                        });\n                        app.setState({\n                          sickCodes: sickCodes\n                        });\n                        console.log(\"ban ghi sick code \" + idpatient1 + data1);\n                      });\n                    };\n\n                    for (var _iterator = ids[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                      _loop();\n                    }\n                  } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion && _iterator.return != null) {\n                        _iterator.return();\n                      }\n                    } finally {\n                      if (_didIteratorError) {\n                        throw _iteratorError;\n                      }\n                    }\n                  }\n                });\n\n                instance._countSick().then(function (count) {\n                  console.log(\"sick all \" + count);\n\n                  for (var id = 0; id < count; id++) {\n                    patientdt.sicks(id).then(function (data) {\n                      var name = data[0];\n                      var sickCode = data[1].toNumber();\n                      var sickDataAll = app.state.sickDataAll;\n                      sickDataAll.push({\n                        name: name,\n                        sickCode: sickCode\n                      }); // console.log(\"sck \" + sic)\n\n                      app.setState({\n                        sickDataAll: sickDataAll\n                      });\n                    });\n                  }\n                });\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    _this.runExample =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var userAccount;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              // const {patientContract}=this.state;\n              userAccount = _this.web3.eth.accounts[0]; // console.log(userAccount.address)\n\n              _this.medicalContract.deployed().then(function (instance) {\n                var that = _assertThisInitialized(_assertThisInitialized(_this));\n\n                _this.medicalContractDeployed = instance;\n\n                _this.medicalContractDeployed.CreatePatient(\"cuong\", 5453, 23, 1, {\n                  from: userAccount\n                }).then(function (response, error) {\n                  if (response) {\n                    console.log(\"den day chua\"); // console.log(\"dung \" + response);\n                  } else {\n                    console.log(\"error cmnr \"); // console.log(\"error\" + error);\n                  }\n                });\n              });\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    _this.getSickbypatient = function (patientID) {\n      var app = _assertThisInitialized(_assertThisInitialized(_this)); // console.log(this.state.sickCodes[0])\n\n\n      var sickCodes = _this.state.sickCodes;\n      console.log(\"id = 0 :\" + sickCodes[0]);\n      sickCodes.forEach(function (x) {\n        if (x.idpatient1 == patientID) {\n          console.log(\"data\" + x.data1);\n          var sickCodeByPatient = [];\n          var sickDataAll = app.state.sickDataAll;\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = x.data1[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var data = _step2.value;\n              console.log(\"dem cai nay xem may cai\" + data);\n              var _iteratorNormalCompletion3 = true;\n              var _didIteratorError3 = false;\n              var _iteratorError3 = undefined;\n\n              try {\n                for (var _iterator3 = sickDataAll[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                  var sickdata = _step3.value;\n\n                  if (data == sickdata.sickCode) {\n                    sickCodeByPatient.push(sickdata);\n                    console.log(sickdata);\n                  }\n                }\n              } catch (err) {\n                _didIteratorError3 = true;\n                _iteratorError3 = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                    _iterator3.return();\n                  }\n                } finally {\n                  if (_didIteratorError3) {\n                    throw _iteratorError3;\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n\n          app.setState({\n            sickCodeByPatient: sickCodeByPatient\n          });\n        }\n      });\n      console.log(\"day la cai xem \" + app.state.sickCodeByPatient[0]);\n    };\n\n    _this.getRecordMedecal = function (id, sickCode) {\n      var app = _assertThisInitialized(_assertThisInitialized(_this)); // console.log( \"id + sickcode\" + id + sickCode)\n\n\n      _this.medicalContract.deployed().then(function (instance) {\n        var contract = instance;\n        instance.getRecordMedical(id, sickCode).then(function (ids) {\n          // console.log(\"show id by patient \" + ids)\n          var recordMedical = [];\n          var _iteratorNormalCompletion4 = true;\n          var _didIteratorError4 = false;\n          var _iteratorError4 = undefined;\n\n          try {\n            for (var _iterator4 = ids[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n              var _id = _step4.value;\n              contract.medicalExaminations(_id).then(function (data) {\n                var number = data[0].toNumber();\n\n                var realTime = _this.convertNumberToRealTime(number);\n\n                var description = data[1];\n                recordMedical.push({\n                  realTime: realTime,\n                  description: description\n                });\n                console.log(data[0].toNumber() + recordMedical);\n                app.setState({\n                  recordMedical: recordMedical\n                });\n              });\n            } // app.setState({\n            //   recordMedical\n            // })\n\n          } catch (err) {\n            _didIteratorError4 = true;\n            _iteratorError4 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                _iterator4.return();\n              }\n            } finally {\n              if (_didIteratorError4) {\n                throw _iteratorError4;\n              }\n            }\n          }\n        }).catch(function (error) {\n          console.log(error);\n          alert(\"benh nhan khong bi mac benh nay , vui long khoi tao benh an\");\n        });\n      });\n    };\n\n    _this.convertNumberToRealTime = function (number) {\n      var d = new Date();\n      d.setTime(number * 1000);\n      var dateString = d.toUTCString(); // or d.toString if local time required\n\n      alert(dateString);\n      return dateString;\n    };\n\n    _this.setPatientTransport = function (id) {\n      _this.setState({\n        patientTransport: id[0]\n      });\n\n      console.log(id[0]);\n    };\n\n    _this.setToHospital = function (name, account) {\n      console.log(\"di chet di\" + account);\n      var patientID = _this.state.patientTransport;\n      var userAccount = _this.state.accounts;\n\n      var app = _assertThisInitialized(_assertThisInitialized(_this));\n\n      _this.web3.toChecksumAddress(userAccount).then(function (useraccount) {\n        app.medicalContract.deployed().then(function (instance) {\n          instance.transferFrom(useraccount, account, patientID).then(function (response) {\n            alert(\"patient transferred to : \" + name);\n          }).catch(function (error) {\n            console.log(\"error cmnr \" + error);\n          });\n        });\n      });\n\n      console.log(\"account\" + userAccount + \" , id \" + patientID); // let account1 = account.toLowerCase(); \n\n      console.log(\"from : \" + userAccount + \",   to : \" + account1);\n    };\n\n    _this.isWeb3 = true;\n    _this.isWeb3Locked = false;\n    _this.appName = \"Patient Data\";\n    _this.state = {\n      network: \"checking...\",\n      accounts: null,\n      medicalContract: null,\n      patientData: [],\n      sickCodes: [],\n      //show ra cac ban ghi benh cua tat ca cac patient cua user\n      sickCodeByPatient: [],\n      //show cac benh cua 1 patient.\n      sickDataAll: [],\n      //  tat cac benh trong contract \n      recordMedical: [],\n      // by patient + sickCode\n      keyComponentRender: 0,\n      patientTransport: null\n    };\n    var web3 = window.web3;\n\n    if (typeof web3 !== \"undefined\") {\n      _this.web3Provider = web3.currentProvider;\n      _this.web3 = new Web3(web3.currentProvider);\n      _this.medicalContract = TruffleContract(Medical);\n\n      _this.medicalContract.setProvider(_this.web3Provider);\n\n      if (web3.eth.coinbase === null) _this.isWeb3Locked = true;\n    } else {\n      _this.isWeb3 = false;\n    }\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (this.isWeb3) {\n        if (this.isWeb3Locked) {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 290\n            },\n            __self: this\n          }, React.createElement(Header, {\n            network: this.state.network,\n            appName: this.appName,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 291\n            },\n            __self: this\n          }), React.createElement(SideBar, {\n            patientData: this.state.patientData,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 292\n            },\n            __self: this\n          }), React.createElement(Content, {\n            message: \"Unlock Your Metamask/Mist Wallet\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 293\n            },\n            __self: this\n          }));\n        } else {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 298\n            },\n            __self: this\n          }, React.createElement(Header, {\n            network: this.state.network,\n            appName: this.appName,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 299\n            },\n            __self: this\n          }), React.createElement(SideBar, {\n            patientData: this.state.patientData,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 300\n            },\n            __self: this\n          }), React.createElement(Switch, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 301\n            },\n            __self: this\n          }, React.createElement(Route, {\n            exact: true,\n            path: \"/\",\n            render: function render(props) {\n              return React.createElement(Content, {\n                getSickbypatient: _this2.getSickbypatient,\n                patientData: _this2.state.patientData,\n                sickCodeByPatient: _this2.state.sickCodeByPatient,\n                sickDataAll: _this2.state.sickDataAll,\n                getRecordMedecal: _this2.getRecordMedecal,\n                recordMedical: _this2.state.recordMedical,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 303\n                },\n                __self: this\n              });\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 302\n            },\n            __self: this\n          }), React.createElement(Route, {\n            path: \"/sendPatient\",\n            render: function render(props) {\n              return React.createElement(ContentSendPatient, {\n                patientData: _this2.state.patientData,\n                setPatientTransport: _this2.setPatientTransport,\n                setToHospital: _this2.setToHospital,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 306\n                },\n                __self: this\n              });\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 306\n            },\n            __self: this\n          })));\n        }\n      } else {\n        return React.createElement(\"div\", {\n          className: \"App\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 316\n          },\n          __self: this\n        }, React.createElement(Header, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 317\n          },\n          __self: this\n        }));\n      }\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/src/App.js"],"names":["React","Component","Web3","TruffleContract","Medical","ReactDOM","Header","SideBar","Content","type","ContentSendPatient","Route","Switch","App","setNetwork","networkName","that","web3","version","getNetwork","err","networkId","setState","network","getPatient","componentDidMount","app","accounts","eth","runExample","alert","console","log","error","medicalContract","deployed","then","instance","patientdt","patientdt2","getPatientByOwner","state","ids","id","patients","data","patientData","push","viewSickCode","data1","idpatient1","toNumber","map","x","sickCodes","_countSick","count","sicks","name","sickCode","sickDataAll","userAccount","medicalContractDeployed","CreatePatient","from","response","getSickbypatient","patientID","forEach","sickCodeByPatient","sickdata","getRecordMedecal","contract","getRecordMedical","recordMedical","medicalExaminations","number","realTime","convertNumberToRealTime","description","catch","d","Date","setTime","dateString","toUTCString","setPatientTransport","patientTransport","setToHospital","account","toChecksumAddress","useraccount","transferFrom","account1","isWeb3","isWeb3Locked","appName","keyComponentRender","window","web3Provider","currentProvider","setProvider","coinbase","props"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,eAAP,MAA4B,kBAA5B;AACA,OAAOC,OAAP,MAAoB,gCAApB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAO,gCAAP;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,SAASC,IAAT,QAAqB,IAArB;AACA,OAAOC,kBAAP,MAA+B,iCAA/B;AACA,SAASC,KAAT,EAAeC,MAAf,QAA4B,kBAA5B;;IAGMC,G;;;;;AACJ,iBAAc;AAAA;;AAAA;;AACZ;;AADY,UAkCdC,UAlCc,GAkCD,YAAM;AACjB,UAAIC,WAAJ;AAAA,UACEC,IAAI,wDADN;;AAGA,YAAKC,IAAL,CAAUC,OAAV,CAAkBC,UAAlB,CAA6B,UAASC,GAAT,EAAcC,SAAd,EAAyB;AACpD,gBAAQA,SAAR;AACA,eAAK,GAAL;AACEN,YAAAA,WAAW,GAAG,MAAd;AACA;;AACF,eAAK,GAAL;AACEA,YAAAA,WAAW,GAAG,QAAd;AACA;;AACF,eAAK,GAAL;AACEA,YAAAA,WAAW,GAAG,SAAd;AACA;;AACF,eAAK,GAAL;AACEA,YAAAA,WAAW,GAAG,SAAd;AACA;;AACF,eAAK,IAAL;AACEA,YAAAA,WAAW,GAAG,OAAd;AACA;;AACF;AACEA,YAAAA,WAAW,GAAGM,SAAd;AAjBF;;AAmBAL,QAAAA,IAAI,CAACM,QAAL,CAAc;AACZC,UAAAA,OAAO,EAAER;AADG,SAAd;AAGD,OAvBD;AAwBD,KA9Da;;AAAA,UAgEdS,UAhEc,GAgED,YAAI,CACd,CAjEW;;AAAA,UAoEdC,iBApEc;AAAA;AAAA;AAAA;AAAA,6BAoEM;AAAA;AAAA;AAAA;AAAA;AAAA;AACdC,cAAAA,GADc;;AAEtB,kBAAG;AACC,sBAAKZ,UAAL;;AAEMa,gBAAAA,QAHP,GAGiB,MAAKV,IAAL,CAAUW,GAAV,CAAcD,QAAd,CAAuB,CAAvB,CAHjB;;AAKC,sBAAKL,QAAL,CAAc;AACZK,kBAAAA,QAAQ,EAARA;AADY,iBAAd,EAEE,MAAKE,UAFP;AAGH,eARD,CAQC,OAAMT,GAAN,EAAU;AACTU,gBAAAA,KAAK,0EAAL;AAGAC,gBAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAD,gBAAAA,OAAO,CAACE,KAAR,CAAcb,GAAd;AACD;;AACD,oBAAKc,eAAL,CAAqBC,QAArB,GAAgCC,IAAhC,CAAqC,UAASC,QAAT,EAAkB;AACrD,oBAAIC,SAAS,GAAGD,QAAhB;AACA,oBAAIE,UAAU,GAACF,QAAf;AACAA,gBAAAA,QAAQ,CAACG,iBAAT,CAA2Bd,GAAG,CAACe,KAAJ,CAAUd,QAArC,EAA+CS,IAA/C,CAAoD,UAASM,GAAT,EAAa;AAEjEX,kBAAAA,OAAO,CAACC,GAAR,CAAY,SAAQU,GAAR,GAAc,UAAd,GAA2B,OAAOA,GAA9C;AAFiE;AAAA;AAAA;;AAAA;AAAA;AAAA,0BAI1DC,EAJ0D;AAKjE;AACAL,sBAAAA,SAAS,CAACM,QAAV,CAAmBD,EAAnB,EAAuBP,IAAvB,CAA4B,UAASS,IAAT,EAAc;AACxC,4BAAMC,WAAW,GAAGpB,GAAG,CAACe,KAAJ,CAAUK,WAA9B;AACFA,wBAAAA,WAAW,CAACC,IAAZ,CAAiBF,IAAjB;AACEnB,wBAAAA,GAAG,CAACJ,QAAJ,CAAa;AACXwB,0BAAAA,WAAW,EAAXA;AADW,yBAAb;AAID,uBAPD,EAOE,GAPF;AASER,sBAAAA,SAAS,CAACU,YAAV,CAAuBL,EAAvB,EAA2BP,IAA3B,CAAgC,UAASa,KAAT,EAAe;AAAC;AAC9C,4BAAIC,UAAU,GAAGP,EAAE,CAACQ,QAAH,EAAjB;AACAF,wBAAAA,KAAK,GAAEA,KAAK,CAACG,GAAN,CAAU,UAAAC,CAAC;AAAA,iCAAEA,CAAC,CAACF,QAAF,EAAF;AAAA,yBAAX,CAAP;AACApB,wBAAAA,OAAO,CAACC,GAAR,CAAYkB,UAAU,GAAG,OAAOA,UAApB,GAAkC,OAAOD,KAAzC,GAAgDA,KAA5D,EAH6C,CAI7C;;AACA,4BAAMK,SAAS,GAAG5B,GAAG,CAACe,KAAJ,CAAUa,SAA5B;AACAA,wBAAAA,SAAS,CAACP,IAAV,CAAe;AAACG,0BAAAA,UAAU,EAAVA,UAAD;AAAYD,0BAAAA,KAAK,EAALA;AAAZ,yBAAf;AACAvB,wBAAAA,GAAG,CAACJ,QAAJ,CAAa;AACXgC,0BAAAA,SAAS,EAATA;AADW,yBAAb;AAGAvB,wBAAAA,OAAO,CAACC,GAAR,CAAY,uBAAsBkB,UAAtB,GAAmCD,KAA/C;AAED,uBAZD;AAf+D;;AAInE,yCAAeP,GAAf,8HAAmB;AAAA;AA0BlB;AA9BkE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+BhE,iBA/BD;;AAiCAL,gBAAAA,QAAQ,CAACkB,UAAT,GAAsBnB,IAAtB,CAA2B,UAASoB,KAAT,EAAgB;AACzCzB,kBAAAA,OAAO,CAACC,GAAR,CAAY,cAAcwB,KAA1B;;AACA,uBAAI,IAAIb,EAAE,GAAG,CAAb,EAAgBA,EAAE,GAAGa,KAArB,EAA6Bb,EAAE,EAA/B,EAAkC;AAChCL,oBAAAA,SAAS,CAACmB,KAAV,CAAgBd,EAAhB,EAAoBP,IAApB,CAAyB,UAASS,IAAT,EAAc;AACrC,0BAAIa,IAAI,GAAEb,IAAI,CAAC,CAAD,CAAd;AACA,0BAAIc,QAAQ,GAAGd,IAAI,CAAC,CAAD,CAAJ,CAAQM,QAAR,EAAf;AACA,0BAAIS,WAAW,GAAGlC,GAAG,CAACe,KAAJ,CAAUmB,WAA5B;AACAA,sBAAAA,WAAW,CAACb,IAAZ,CAAiB;AAACW,wBAAAA,IAAI,EAAJA,IAAD;AAAMC,wBAAAA,QAAQ,EAARA;AAAN,uBAAjB,EAJqC,CAKrC;;AACAjC,sBAAAA,GAAG,CAACJ,QAAJ,CAAa;AACXsC,wBAAAA,WAAW,EAAXA;AADW,uBAAb;AAID,qBAVD;AAWD;AACF,iBAfD;AAiBD,eArDD;;AAjBsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KApEN;AAAA,UA+Id/B,UA/Ic;AAAA;AAAA;AAAA;AAAA,6BA+IF;AAAA;AAAA;AAAA;AAAA;AAAA;AACV;AACIgC,cAAAA,WAFM,GAEO,MAAK5C,IAAL,CAAUW,GAAV,CAAcD,QAAd,CAAuB,CAAvB,CAFP,EAGV;;AACA,oBAAKO,eAAL,CAAqBC,QAArB,GAAgCC,IAAhC,CAAqC,UAACC,QAAD,EAAY;AAC/C,oBAAIrB,IAAI,wDAAR;;AACA,sBAAK8C,uBAAL,GAA6BzB,QAA7B;;AACF,sBAAKyB,uBAAL,CAA6BC,aAA7B,CAA2C,OAA3C,EAAmD,IAAnD,EAAwD,EAAxD,EAA2D,CAA3D,EAA6D;AAACC,kBAAAA,IAAI,EAACH;AAAN,iBAA7D,EAAiFzB,IAAjF,CAAsF,UAAC6B,QAAD,EAAUhC,KAAV,EAAkB;AACtG,sBAAGgC,QAAH,EAAY;AACVlC,oBAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EADU,CAEV;AACN,mBAHI,MAII;AACFD,oBAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EADE,CAEF;AACD;AACF,iBATD;AAUD,eAbC;;AAJU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA/IE;;AAAA,UAoKdkC,gBApKc,GAoKG,UAACC,SAAD,EAAa;AAC5B,UAAIzC,GAAG,wDAAP,CAD4B,CAE5B;;;AACA,UAAI4B,SAAS,GAAE,MAAKb,KAAL,CAAWa,SAA1B;AACAvB,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAYsB,SAAS,CAAC,CAAD,CAAjC;AACAA,MAAAA,SAAS,CAACc,OAAV,CAAkB,UAASf,CAAT,EAAW;AAC/B,YAAGA,CAAC,CAACH,UAAF,IAAciB,SAAjB,EAA2B;AACzBpC,UAAAA,OAAO,CAACC,GAAR,CAAY,SAASqB,CAAC,CAACJ,KAAvB;AAEA,cAAIoB,iBAAiB,GAAG,EAAxB;AACA,cAAIT,WAAW,GAAGlC,GAAG,CAACe,KAAJ,CAAUmB,WAA5B;AAJyB;AAAA;AAAA;;AAAA;AAKzB,kCAAgBP,CAAC,CAACJ,KAAlB,mIAAyB;AAAA,kBAAjBJ,IAAiB;AACvBd,cAAAA,OAAO,CAACC,GAAR,CAAY,4BAA4Ba,IAAxC;AADuB;AAAA;AAAA;;AAAA;AAEvB,sCAAqBe,WAArB,mIAAiC;AAAA,sBAAxBU,QAAwB;;AAC/B,sBAAGzB,IAAI,IAAEyB,QAAQ,CAACX,QAAlB,EAA2B;AACzBU,oBAAAA,iBAAiB,CAACtB,IAAlB,CAAuBuB,QAAvB;AACAvC,oBAAAA,OAAO,CAACC,GAAR,CAAYsC,QAAZ;AACD;AACF;AAPsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASxB;AAdwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBzB5C,UAAAA,GAAG,CAACJ,QAAJ,CAAa;AACX+C,YAAAA,iBAAiB,EAAjBA;AADW,WAAb;AAGD;AACE,OArBD;AAuBAtC,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAmBN,GAAG,CAACe,KAAJ,CAAU4B,iBAAV,CAA4B,CAA5B,CAA/B;AAED,KAlMa;;AAAA,UAoMdE,gBApMc,GAoMG,UAAC5B,EAAD,EAAIgB,QAAJ,EAAe;AAC9B,UAAIjC,GAAG,wDAAP,CAD8B,CAElC;;;AACA,YAAKQ,eAAL,CAAqBC,QAArB,GAAgCC,IAAhC,CAAqC,UAACC,QAAD,EAAY;AAC/C,YAAImC,QAAQ,GAAGnC,QAAf;AACAA,QAAAA,QAAQ,CAACoC,gBAAT,CAA0B9B,EAA1B,EAA6BgB,QAA7B,EAAuCvB,IAAvC,CAA4C,UAACM,GAAD,EAAO;AACrD;AACA,cAAIgC,aAAa,GAAG,EAApB;AAFqD;AAAA;AAAA;;AAAA;AAGrD,kCAAchC,GAAd,mIAAkB;AAAA,kBAAVC,GAAU;AAChB6B,cAAAA,QAAQ,CAACG,mBAAT,CAA6BhC,GAA7B,EAAiCP,IAAjC,CAAsC,UAACS,IAAD,EAAQ;AAE5C,oBAAI+B,MAAM,GAAG/B,IAAI,CAAC,CAAD,CAAJ,CAAQM,QAAR,EAAb;;AACA,oBAAI0B,QAAQ,GAAG,MAAKC,uBAAL,CAA6BF,MAA7B,CAAf;;AAEA,oBAAIG,WAAW,GAAIlC,IAAI,CAAC,CAAD,CAAvB;AACA6B,gBAAAA,aAAa,CAAC3B,IAAd,CAAmB;AAAC8B,kBAAAA,QAAQ,EAARA,QAAD;AAAUE,kBAAAA,WAAW,EAAXA;AAAV,iBAAnB;AACAhD,gBAAAA,OAAO,CAACC,GAAR,CAAYa,IAAI,CAAC,CAAD,CAAJ,CAAQM,QAAR,KAAqBuB,aAAjC;AACAhD,gBAAAA,GAAG,CAACJ,QAAJ,CAAa;AACXoD,kBAAAA,aAAa,EAAbA;AADW,iBAAb;AAGD,eAXD;AAYD,aAhBoD,CAiBrD;AACA;AACA;;AAnBqD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBlD,SApBD,EAoBGM,KApBH,CAoBS,UAAC/C,KAAD,EAAS;AAChBF,UAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACAH,UAAAA,KAAK,CAAC,6DAAD,CAAL;AACD,SAvBD;AAyBD,OA3BD;AA6BG,KApOa;;AAAA,UAsOdgD,uBAtOc,GAsOU,UAACF,MAAD,EAAU;AAChC,UAAIK,CAAC,GAAG,IAAIC,IAAJ,EAAR;AACJD,MAAAA,CAAC,CAACE,OAAF,CAAUP,MAAM,GAAC,IAAjB;AACA,UAAIQ,UAAU,GAAGH,CAAC,CAACI,WAAF,EAAjB,CAHoC,CAGD;;AACnCvD,MAAAA,KAAK,CAAEsD,UAAF,CAAL;AACA,aAAOA,UAAP;AAEG,KA7Oa;;AAAA,UA8OdE,mBA9Oc,GA8OM,UAAC3C,EAAD,EAAM;AAC5B,YAAKrB,QAAL,CAAc;AACZiE,QAAAA,gBAAgB,EAAC5C,EAAE,CAAC,CAAD;AADP,OAAd;;AAGAZ,MAAAA,OAAO,CAACC,GAAR,CAAYW,EAAE,CAAC,CAAD,CAAd;AACG,KAnPa;;AAAA,UAsPhB6C,aAtPgB,GAsPA,UAAC9B,IAAD,EAAM+B,OAAN,EAAgB;AAChC1D,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAeyD,OAA3B;AACA,UAAItB,SAAS,GAAG,MAAK1B,KAAL,CAAW8C,gBAA3B;AACA,UAAI1B,WAAW,GAAE,MAAKpB,KAAL,CAAWd,QAA5B;;AACA,UAAID,GAAG,wDAAP;;AACA,YAAKT,IAAL,CAAUyE,iBAAV,CAA4B7B,WAA5B,EAAyCzB,IAAzC,CAA8C,UAACuD,WAAD,EAAe;AAC3DjE,QAAAA,GAAG,CAACQ,eAAJ,CAAoBC,QAApB,GAA+BC,IAA/B,CAAoC,UAACC,QAAD,EAAY;AAC9CA,UAAAA,QAAQ,CAACuD,YAAT,CAAsBD,WAAtB,EAAkCF,OAAlC,EAA0CtB,SAA1C,EAAqD/B,IAArD,CAA0D,UAAC6B,QAAD,EAAY;AAElEnC,YAAAA,KAAK,CAAC,8BAA8B4B,IAA/B,CAAL;AACH,WAHD,EAGGsB,KAHH,CAGS,UAAC/C,KAAD,EAAS;AAClBF,YAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBC,KAA5B;AACC,WALD;AAOC,SARH;AAUD,OAXD;;AAYAF,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAY6B,WAAZ,GAA0B,QAA1B,GAAoCM,SAAhD,EAjBgC,CAkBhC;;AACApC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAY6B,WAAZ,GAA2B,WAA3B,GAAyCgC,QAArD;AAEC,KA3Qe;;AAEZ,UAAKC,MAAL,GAAc,IAAd;AACA,UAAKC,YAAL,GAAoB,KAApB;AACA,UAAKC,OAAL,GAAe,cAAf;AAEA,UAAKvD,KAAL,GAAa;AACXlB,MAAAA,OAAO,EAAE,aADE;AAEXI,MAAAA,QAAQ,EAAE,IAFC;AAGXO,MAAAA,eAAe,EAAC,IAHL;AAIXY,MAAAA,WAAW,EAAC,EAJD;AAKXQ,MAAAA,SAAS,EAAC,EALC;AAKE;AACbe,MAAAA,iBAAiB,EAAC,EANP;AAMU;AACrBT,MAAAA,WAAW,EAAC,EAPD;AAOK;AAChBc,MAAAA,aAAa,EAAC,EARH;AAQM;AACjBuB,MAAAA,kBAAkB,EAAE,CATT;AAUXV,MAAAA,gBAAgB,EAAC;AAVN,KAAb;AAaA,QAAItE,IAAI,GAAGiF,MAAM,CAACjF,IAAlB;;AACA,QAAI,OAAOA,IAAP,KAAgB,WAApB,EAAiC;AAC/B,YAAKkF,YAAL,GAAoBlF,IAAI,CAACmF,eAAzB;AACA,YAAKnF,IAAL,GAAY,IAAIf,IAAJ,CAASe,IAAI,CAACmF,eAAd,CAAZ;AACA,YAAKlE,eAAL,GAAuB/B,eAAe,CAACC,OAAD,CAAtC;;AACA,YAAK8B,eAAL,CAAqBmE,WAArB,CAAiC,MAAKF,YAAtC;;AAEA,UAAIlF,IAAI,CAACW,GAAL,CAAS0E,QAAT,KAAsB,IAA1B,EACE,MAAKP,YAAL,GAAoB,IAApB;AACH,KARD,MAQO;AAEL,YAAKD,MAAL,GAAc,KAAd;AACD;;AA/BW;AAgCb;;;;6BA6OQ;AAAA;;AACP,UAAI,KAAKA,MAAT,EAAiB;AACf,YAAI,KAAKC,YAAT,EAAuB;AACrB,iBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACG,oBAAC,MAAD;AAAQ,YAAA,OAAO,EAAG,KAAKtD,KAAL,CAAWlB,OAA7B;AAAuC,YAAA,OAAO,EAAG,KAAKyE,OAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADH,EAEG,oBAAC,OAAD;AAAU,YAAA,WAAW,EAAG,KAAKvD,KAAL,CAAWK,WAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFH,EAGG,oBAAC,OAAD;AAAU,YAAA,OAAO,EAAC,kCAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHH,CADF;AAOD,SARD,MAQO;AACL,iBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACG,oBAAC,MAAD;AAAS,YAAA,OAAO,EAAG,KAAKL,KAAL,CAAWlB,OAA9B;AAA0C,YAAA,OAAO,EAAG,KAAKyE,OAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADH,EAEG,oBAAC,OAAD;AAAU,YAAA,WAAW,EAAG,KAAKvD,KAAL,CAAWK,WAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFH,EAGG,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACA,oBAAC,KAAD;AAAO,YAAA,KAAK,MAAZ;AAAa,YAAA,IAAI,EAAG,GAApB;AAAwB,YAAA,MAAM,EAAE,gBAACyD,KAAD;AAAA,qBAC9B,oBAAC,OAAD;AAAS,gBAAA,gBAAgB,EAAG,MAAI,CAACrC,gBAAjC;AAAmD,gBAAA,WAAW,EAAG,MAAI,CAACzB,KAAL,CAAWK,WAA5E;AAAyF,gBAAA,iBAAiB,EAAG,MAAI,CAACL,KAAL,CAAW4B,iBAAxH;AACA,gBAAA,WAAW,EAAI,MAAI,CAAC5B,KAAL,CAAWmB,WAD1B;AACuC,gBAAA,gBAAgB,EAAG,MAAI,CAACW,gBAD/D;AACiF,gBAAA,aAAa,EAAI,MAAI,CAAC9B,KAAL,CAAWiC,aAD7G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAD8B;AAAA,aAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,EAKI,oBAAC,KAAD;AAAO,YAAA,IAAI,EAAG,cAAd;AAA6B,YAAA,MAAM,EAAG,gBAAC6B,KAAD;AAAA,qBAAS,oBAAC,kBAAD;AAAoB,gBAAA,WAAW,EAAG,MAAI,CAAC9D,KAAL,CAAWK,WAA7C;AAC9C,gBAAA,mBAAmB,EAAE,MAAI,CAACwC,mBADoB;AACC,gBAAA,aAAa,EAAI,MAAI,CAACE,aADvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAT;AAAA,aAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ,CAHH,CADF;AAgBD;AACF,OA3BD,MA2BO;AACL,eACE;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACA,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADA,CADF;AAKD;AACF;;;;EAjTevF,S;;AAoTlB,eAAeY,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Web3 from 'web3';\nimport TruffleContract from 'truffle-contract';\nimport Medical from './build/contracts/Medical.json';\nimport ReactDOM from 'react-dom';\nimport Header from './Components/Header';\nimport 'react-sticky-header/styles.css';\nimport SideBar from './Components/SideBar';\nimport Content from './Components/Content';\nimport { type } from 'os';\nimport ContentSendPatient from './Components/ContentSendPatient';\nimport { Route,Switch} from 'react-router-dom';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.isWeb3 = true;\n    this.isWeb3Locked = false;\n    this.appName = \"Patient Data\";\n\n    this.state = {\n      network: \"checking...\",\n      accounts: null,\n      medicalContract:null,\n      patientData:[],\n      sickCodes:[],//show ra cac ban ghi benh cua tat ca cac patient cua user\n      sickCodeByPatient:[],//show cac benh cua 1 patient.\n      sickDataAll:[], //  tat cac benh trong contract \n      recordMedical:[],// by patient + sickCode\n      keyComponentRender: 0,\n      patientTransport:null\n    };\n\n    let web3 = window.web3;\n    if (typeof web3 !== \"undefined\") {\n      this.web3Provider = web3.currentProvider;\n      this.web3 = new Web3(web3.currentProvider);\n      this.medicalContract = TruffleContract(Medical);\n      this.medicalContract.setProvider(this.web3Provider);\n\n      if (web3.eth.coinbase === null)\n        this.isWeb3Locked = true;\n    } else {\n\n      this.isWeb3 = false;\n    }\n  }\n\n  setNetwork = () => {\n    let networkName,\n      that = this;\n\n    this.web3.version.getNetwork(function(err, networkId) {\n      switch (networkId) {\n      case \"1\":\n        networkName = \"Main\";\n        break;\n      case \"2\":\n        networkName = \"Morden\";\n        break;\n      case \"3\":\n        networkName = \"Ropsten\";\n        break;\n      case \"4\":\n        networkName = \"Rinkeby\";\n        break;\n      case \"42\":\n        networkName = \"Kovan\";\n        break;\n      default:\n        networkName = networkId;\n      }\n      that.setState({\n        network: networkName\n      })\n    });\n  };\n\n  getPatient = ()=>{\n    }\n\n\n  componentDidMount = async() => {\n    let app = this;\ntry{\n    this.setNetwork(); \n\n    const accounts =this.web3.eth.accounts[0];\n    \n    this.setState({\n      accounts\n    },this.runExample)\n}catch(err){\n  alert(\n    `Failed to load web3, accounts, or contract. Check console for details.`,\n  );\n  console.log(\"error to doko\");\n  console.error(err);\n}\nthis.medicalContract.deployed().then(function(instance){\n  let patientdt = instance;\n  let patientdt2=instance;\n  instance.getPatientByOwner(app.state.accounts).then(function(ids){\n\n  console.log(\"ids:\" +ids + \" type : \" + typeof(ids));\n \nfor( let id of ids){\n  //  let x = id ; \n  patientdt.patients(id).then(function(data){\n    const patientData = app.state.patientData; \n  patientData.push(data);\n    app.setState({\n      patientData\n    });\n   \n  },100);\n\n    patientdt.viewSickCode(id).then(function(data1){// get sickcode của tất cả patient của user\n      let idpatient1 = id.toNumber();\n      data1= data1.map(x=>x.toNumber());\n      console.log(idpatient1 + typeof(idpatient1)+  typeof(data1)+data1  );\n      // console.log(\"day la so \" + typeof(0) +  \" so : \" +idpatient1 );\n      const sickCodes = app.state.sickCodes;\n      sickCodes.push({idpatient1,data1})\n      app.setState({\n        sickCodes\n      });\n      console.log(\"ban ghi sick code \" +idpatient1 + data1)\n\n    })\n\n\n}\n  })\n\n  instance._countSick().then(function(count) {\n    console.log(\"sick all \" + count);\n    for(let id = 0; id < count ; id++){\n      patientdt.sicks(id).then(function(data){\n        let name= data[0];\n        let sickCode = data[1].toNumber();\n        let sickDataAll = app.state.sickDataAll;\n        sickDataAll.push({name,sickCode});\n        // console.log(\"sck \" + sic)\n        app.setState({\n          sickDataAll\n        });\n        \n      })\n    }\n  })\n\n})\n\n\n  }\n\n  runExample= async()=>{\n    // const {patientContract}=this.state;\n    var userAccount =this.web3.eth.accounts[0];\n    // console.log(userAccount.address)\n    this.medicalContract.deployed().then((instance)=>{\n      let that=this;\n      this.medicalContractDeployed=instance;\n    this.medicalContractDeployed.CreatePatient(\"cuong\",5453,23,1,{from:userAccount}).then((response,error)=>{\n      if(response){\n        console.log(\"den day chua\");\n        // console.log(\"dung \" + response);\n }\n      else{\n        console.log(\"error cmnr \");\n        // console.log(\"error\" + error);\n      }\n    })\n  })\n}\n  \n\n  getSickbypatient=(patientID)=>{\n    let app = this;\n    // console.log(this.state.sickCodes[0])\n    let sickCodes =this.state.sickCodes;\n    console.log(\"id = 0 :\" +sickCodes[0])\n    sickCodes.forEach(function(x){\n  if(x.idpatient1==patientID){\n    console.log(\"data\" + x.data1);\n\n    let sickCodeByPatient = [];\n    let sickDataAll = app.state.sickDataAll;\n    for(let data of x.data1 ){\n      console.log(\"dem cai nay xem may cai\" + data)\n      for( let sickdata of sickDataAll){\n        if(data==sickdata.sickCode){\n          sickCodeByPatient.push(sickdata);\n          console.log(sickdata);\n        }\n      }\n\n    }\n\n    app.setState({\n      sickCodeByPatient\n    })\n  }\n    });\n\n    console.log(\"day la cai xem \" +app.state.sickCodeByPatient[0]);\n\n  }\n\n  getRecordMedecal=(id,sickCode)=>{\n    let app = this;\n// console.log( \"id + sickcode\" + id + sickCode)\nthis.medicalContract.deployed().then((instance)=>{\n  let contract = instance;\n  instance.getRecordMedical(id,sickCode).then((ids)=>{\n// console.log(\"show id by patient \" + ids)\nlet recordMedical = [];\nfor(let id of ids){\n  contract.medicalExaminations(id).then((data)=>{\n\n    let number = data[0].toNumber();\n    let realTime = this.convertNumberToRealTime(number);\n\n    let description  = data[1];\n    recordMedical.push({realTime,description});\n    console.log(data[0].toNumber() + recordMedical);\n    app.setState({\n      recordMedical\n    });\n  })\n}\n// app.setState({\n//   recordMedical\n// })\n  }).catch((error)=>{\n    console.log(error)\n    alert(\"benh nhan khong bi mac benh nay , vui long khoi tao benh an\");\n  })\n\n})\n\n  }\n\n  convertNumberToRealTime=(number)=>{\n    let d = new Date();\nd.setTime(number*1000);\nlet dateString = d.toUTCString();  // or d.toString if local time required\nalert (dateString);\nreturn dateString;\n\n  }\n  setPatientTransport=(id)=>{\nthis.setState({\n  patientTransport:id[0]\n})\nconsole.log(id[0])\n  }\n\n\nsetToHospital = (name,account)=>{\nconsole.log(\"di chet di\" + account);\nlet patientID = this.state.patientTransport;\nlet userAccount =this.state.accounts;\nlet app = this;\nthis.web3.toChecksumAddress(userAccount).then((useraccount)=>{\n  app.medicalContract.deployed().then((instance)=>{\n    instance.transferFrom(useraccount,account,patientID).then((response)=>{\n    \n        alert(\"patient transferred to : \" + name);\n    }).catch((error)=>{\n    console.log(\"error cmnr \" + error)\n    })\n    \n    })\n\n})\nconsole.log(\"account\" + userAccount + \" , id \" +patientID );\n// let account1 = account.toLowerCase(); \nconsole.log(\"from : \" + userAccount  + \",   to : \" + account1);\n\n}\n\n  render() {\n    if (this.isWeb3) {\n      if (this.isWeb3Locked) {\n        return (\n          <div>\n             <Header network={ this.state.network } appName={ this.appName }/>\n             <SideBar  patientData ={this.state.patientData}/>\n             <Content  message=\"Unlock Your Metamask/Mist Wallet\"/>\n            \n          </div>)\n      } else {\n        return (\n          <div>\n             <Header  network={ this.state.network }   appName={ this.appName }/>\n             <SideBar  patientData ={this.state.patientData}/>\n             <Switch>\n             <Route exact path = '/' render={(props)=>\n               <Content getSickbypatient= {this.getSickbypatient} patientData ={this.state.patientData} sickCodeByPatient= {this.state.sickCodeByPatient} \n               sickDataAll = {this.state.sickDataAll} getRecordMedecal= {this.getRecordMedecal} recordMedical = {this.state.recordMedical}/>\n                 }/>\n                 <Route path = '/sendPatient' render= {(props)=><ContentSendPatient patientData ={this.state.patientData}\n                  setPatientTransport={this.setPatientTransport} setToHospital = {this.setToHospital}/>}/> \n              \n                  {/* <Content getSickbypatient= {this.getSickbypatient} patientData ={this.state.patientData} sickCodeByPatient= {this.state.sickCodeByPatient} \n                  sickDataAll = {this.state.sickDataAll} getRecordMedecal= {this.getRecordMedecal} recordMedical = {this.state.recordMedical}/>   */}\n                  </Switch>       \n            </div>)\n      }\n    } else {\n      return (\n        <div className=\"App\">\n        <Header />\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}