{"ast":null,"code":"import _regeneratorRuntime from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/src/Components/CreateMedical.js\";\nimport React, { Component } from 'react';\nimport ipfs from './ipfs';\nimport IPFSUploader from 'ipfs-image-web-upload';\nimport IPFS from 'ipfs';\n\nvar Patient =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Patient, _Component);\n\n  function Patient(props) {\n    var _this;\n\n    _classCallCheck(this, Patient);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Patient).call(this));\n\n    _this.loadImage1 =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(event) {\n        var uploader, hash, img_tag;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log(\"huhu\");\n                uploader = new IPFSUploader(ipfs);\n                _context.next = 4;\n                return uploader.uploadBlob(event.target.files[0]);\n\n              case 4:\n                hash = _context.sent;\n                console.log(\"ma hash\" + hash);\n\n                _this.setState({\n                  ipfsHashImg: hash\n                });\n\n                img_tag = document.getElementById(\"design_display\");\n                uploader.loadImage(img_tag, hash); // let ipfsPath = input\n                // console.log(\"loadmig\" + ipfsPath)\n                // ipfs.files.cat(ipfsPath, function (err, file) {\n                //   if (err) {\n                //     console.log(\"error \" +err )\n                //   }\n                //   let img = file.toString(\"base64\");\n                //   document.getElementById(\"design_display\").src = \"data:image/png;base64,\" + img;\n                // })\n                // const log = (line) => {\n                //   document.getElementById('output').appendChild(document.createTextNode(`${line}\\r\\n`))\n                // }\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.ipfsUpload =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var buffer;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return Buffer.from(\"toi di an thit cho\");\n\n            case 2:\n              buffer = _context2.sent;\n              ipfs.add(buffer, function (err, ipfsHash) {\n                if (err) return console.error(err);\n                console.log(\"ma ban\" + ipfsHash[0].hash);\n\n                _this.setState({\n                  ipfsHashData: ipfsHash[0].hash\n                });\n              });\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    _this.ipfsGetdata =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              ipfs.cat(_this.state.ipfsHashData, function (err, data) {\n                if (err) return console.error(err);\n                console.log(\"data\" + data.toString());\n              });\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    _this.state = {\n      ipfsHashData: \"\",\n      ipfsHashImg: \"\"\n    };\n    return _this;\n  } //   loadFile= ()=> {\n  //     var input, file, fr;\n  //     input = document.getElementById('fileinput');\n  //     file = input.files[0];\n  //     fr = new FileReader();\n  //     fr.onload = receivedText();\n  //     async function receivedText() {\n  //         fr = new FileReader();\n  //         fr.readAsBinaryString(file);\n  //         let contentdata = await Buffer.from(btoa(fr.result),\"base64\")\n  //         //IPFS START\n  //         const repoPath = 'ipfs-1111' //+ Math.random()\n  //         const ipfs1 = new IPFS({ repo: repoPath })\n  // let ipfs2= ipfs1;\n  //          ipfs1.on('ready', () => {\n  //             const files = [\n  //             {\n  //                 path: 'image.png',\n  //                 content: Buffer.from(btoa(fr.result),\"base64\")\n  //             }\n  //             ]\n  //             ipfs2.files.add(files, function (err, files) {\n  //                 let url = \"https://ipfs.io/ipfs/\"+files[0].hash;\n  //                 log(\"Storing file on IPFS using Javascript. HASH: https://ipfs.io/ipfs/\"+files[0].hash);\n  //                 let ipfsPath = files[0].hash\n  //                 ipfs.files.cat(ipfsPath, function (err, file) {\n  //                 if (err) {\n  //                     throw err\n  //                 }\n  //                 let img = file.toString(\"base64\");\n  //                 document.getElementById(\"design_display\").src= \"data:image/png;base64,\" + img;\n  //                 })\n  //             })\n  //             const log = (line) => {\n  //                 document.getElementById('output').appendChild(document.createTextNode(`${line}\\r\\n`))\n  //             }\n  //         })\n  //     }\n  // }\n  //  loadImage = ()=> {\n  //     var input, file, fr;\n  //     input = document.getElementById('inputtext').value;\n  //         //IPFS START\n  //         const repoPath = 'ipfs-1111' //+ Math.random()\n  //         const ipfs = new IPFS({ repo: repoPath })\n  //         ipfs.on('ready', () => {\n  //                let  ipfsPath = input\n  //                 ipfs.files.cat(ipfsPath, function (err, file) {\n  //                 if (err) {\n  //                     throw err\n  //                 }\n  //                 let img = file.toString(\"base64\");\n  //                 document.getElementById(\"design_display\").src= \"data:image/png;base64,\" + img;\n  //                 })\n  //             const log = (line) => {\n  //                 document.getElementById('output').appendChild(document.createTextNode(`${line}\\r\\n`))\n  //             }\n  //         })\n  // }\n\n\n  _createClass(Patient, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"col-md-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"#\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, \"Create medical \"), React.createElement(\"span\", {\n        className: \"pull-right-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        type: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        onClick: function onClick(event) {\n          return _this2.ipfsUpload();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"get data\",\n        onClick: function onClick(event) {\n          return _this2.ipfsGetdata();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"file\",\n        id: \"fileinput\",\n        onChange: function onChange(event) {\n          return _this2.loadImage1(event);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"submit file\",\n        onClick: function onClick(event) {\n          return _this2.loadFile();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        id: \"design_display\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Patient;\n}(Component);\n\nexport default Patient;","map":{"version":3,"sources":["/home/cutyremon/blockChain/reactjs_ethereum/frontend/src/Components/CreateMedical.js"],"names":["React","Component","ipfs","IPFSUploader","IPFS","Patient","props","loadImage1","event","console","log","uploader","uploadBlob","target","files","hash","setState","ipfsHashImg","img_tag","document","getElementById","loadImage","ipfsUpload","Buffer","from","buffer","add","err","ipfsHash","error","ipfsHashData","ipfsGetdata","cat","state","data","toString","loadFile"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ipfs from './ipfs';\nimport IPFSUploader from 'ipfs-image-web-upload';\nimport IPFS from 'ipfs';\n\nclass Patient extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      ipfsHashData: \"\",\n      ipfsHashImg: \"\"\n    }\n\n  }\n\n  \n//   loadFile= ()=> {\n//     var input, file, fr;\n\n//     input = document.getElementById('fileinput');\n\n//     file = input.files[0];\n//     fr = new FileReader();\n//     fr.onload = receivedText();\n     \n\n//     async function receivedText() {\n//         fr = new FileReader();\n//         fr.readAsBinaryString(file);\n//         let contentdata = await Buffer.from(btoa(fr.result),\"base64\")\n         \n//         //IPFS START\n//         const repoPath = 'ipfs-1111' //+ Math.random()\n//         const ipfs1 = new IPFS({ repo: repoPath })\n// let ipfs2= ipfs1;\n//          ipfs1.on('ready', () => {\n//             const files = [\n//             {\n//                 path: 'image.png',\n//                 content: Buffer.from(btoa(fr.result),\"base64\")\n//             }\n//             ]\n\n//             ipfs2.files.add(files, function (err, files) {\n//                 let url = \"https://ipfs.io/ipfs/\"+files[0].hash;\n//                 log(\"Storing file on IPFS using Javascript. HASH: https://ipfs.io/ipfs/\"+files[0].hash);\n//                 let ipfsPath = files[0].hash\n//                 ipfs.files.cat(ipfsPath, function (err, file) {\n//                 if (err) {\n//                     throw err\n//                 }\n//                 let img = file.toString(\"base64\");\n//                 document.getElementById(\"design_display\").src= \"data:image/png;base64,\" + img;\n//                 })\n//             })\n \n//             const log = (line) => {\n//                 document.getElementById('output').appendChild(document.createTextNode(`${line}\\r\\n`))\n//             }\n \n \n//         })\n//     }\n\n\n// }\n \n \n//  loadImage = ()=> {\n//     var input, file, fr;\n\n//     input = document.getElementById('inputtext').value;\n         \n//         //IPFS START\n//         const repoPath = 'ipfs-1111' //+ Math.random()\n//         const ipfs = new IPFS({ repo: repoPath })\n\n//         ipfs.on('ready', () => {\n\n//                let  ipfsPath = input\n//                 ipfs.files.cat(ipfsPath, function (err, file) {\n//                 if (err) {\n//                     throw err\n//                 }\n//                 let img = file.toString(\"base64\");\n//                 document.getElementById(\"design_display\").src= \"data:image/png;base64,\" + img;\n//                 })\n \n//             const log = (line) => {\n//                 document.getElementById('output').appendChild(document.createTextNode(`${line}\\r\\n`))\n//             }\n \n \n//         })\n     \n\n\n// }\n\n\n\n  loadImage1 = async (event) => {\n    console.log(\"huhu\")\n    var uploader = new IPFSUploader(ipfs);\nvar hash = await uploader.uploadBlob(event.target.files[0]);\nconsole.log(\"ma hash\" + hash);\nthis.setState({\n  ipfsHashImg:hash\n})\n    let img_tag = document.getElementById(\"design_display\");\n    uploader.loadImage(img_tag, hash);\n\n    // let ipfsPath = input\n    // console.log(\"loadmig\" + ipfsPath)\n    // ipfs.files.cat(ipfsPath, function (err, file) {\n    //   if (err) {\n    //     console.log(\"error \" +err )\n\n    //   }\n    //   let img = file.toString(\"base64\");\n    //   document.getElementById(\"design_display\").src = \"data:image/png;base64,\" + img;\n    // })\n\n    // const log = (line) => {\n    //   document.getElementById('output').appendChild(document.createTextNode(`${line}\\r\\n`))\n    // }\n  }\n\n  ipfsUpload = async () => {\n    const buffer = await Buffer.from(\"toi di an thit cho\");\n    ipfs.add(buffer, (err, ipfsHash) => {\n      if (err) return console.error(err)\n      console.log(\"ma ban\" + ipfsHash[0].hash)\n      this.setState({\n        ipfsHashData: ipfsHash[0].hash\n      })\n\n    })\n  }\n  ipfsGetdata = async () => {\n    ipfs.cat(this.state.ipfsHashData, (err, data) => {\n      if (err) return console.error(err)\n      console.log(\"data\" + data.toString())\n    })\n  }\n  render() {\n    return (\n      <div className=\"col-md-3\">\n        <a href=\"#\">\n          <span>Create medical </span>\n          <span className=\"pull-right-container\">\n          </span>\n        </a>\n        <input type=\"text\"  ></input>\n        <input type=\"submit\" onClick={event => this.ipfsUpload()}></input>\n        <input type=\"submit\" value=\"get data\" onClick={event => this.ipfsGetdata()}></input>\n        <input type=\"file\" id=\"fileinput\"  onChange ={event=>this.loadImage1(event)}></input>\n        <input type=\"submit\" value=\"submit file\" onClick={event => this.loadFile()}></input>\n        {/* <input type=\"submit\" value=\"show file\" onClick={event => this.loadImage(this.state.ipfsHashImg)}></input> */}\n        <br />\n        <img id=\"design_display\"/>\n\n      </div>\n    )\n  }\n}\n\nexport default Patient;"]},"metadata":{},"sourceType":"module"}