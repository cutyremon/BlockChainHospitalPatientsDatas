{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = timeLimit;\n\nvar _mapLimit = require('./mapLimit');\n\nvar _mapLimit2 = _interopRequireDefault(_mapLimit);\n\nvar _baseRange = require('lodash/_baseRange');\n\nvar _baseRange2 = _interopRequireDefault(_baseRange);\n\nvar _wrapAsync = require('./internal/wrapAsync');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name timesLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} count - The number of times to run the function.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see [async.map]{@link module:Collections.map}.\n */\n\n\nfunction timeLimit(count, limit, iteratee, callback) {\n  var _iteratee = (0, _wrapAsync2.default)(iteratee);\n\n  (0, _mapLimit2.default)((0, _baseRange2.default)(0, count, 1), limit, _iteratee, callback);\n}\n\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}