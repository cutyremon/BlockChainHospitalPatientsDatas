{"ast":null,"code":"'use strict';\n\nvar once = require('once');\n/**\n * Registers `handler` to each event in `events`. The `handler`\n * will only be called for the first event fired, at which point\n * the `handler` will be removed as a listener.\n *\n * Ensures `handler` is only called once.\n *\n * @example\n * // will call `callback` when `start` or `error` is emitted by `this`\n * emitFirst(this, ['error', 'start'], callback)\n *\n * @private\n * @param {EventEmitter} emitter The emitter to listen on\n * @param {Array<string>} events The events to listen for\n * @param {function(*)} handler The handler to call when an event is triggered\n * @returns {void}\n */\n\n\nfunction emitFirst(emitter, events, handler) {\n  handler = once(handler);\n  events.forEach(function (e) {\n    emitter.once(e, function () {\n      events.forEach(function (ev) {\n        emitter.removeListener(ev, handler);\n      });\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      handler.apply(emitter, args);\n    });\n  });\n}\n\nmodule.exports.emitFirst = emitFirst;","map":null,"metadata":{},"sourceType":"script"}