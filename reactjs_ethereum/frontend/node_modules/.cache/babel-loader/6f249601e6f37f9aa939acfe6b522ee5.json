{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Heap = require('heap');\n\nvar distance = require('xor-distance');\n\nvar debug = require('debug');\n\nvar utils = require('./utils');\n\nvar log = debug('libp2p:dht:peer-queue');\n/**\n * PeerQueue is a heap that sorts its entries (PeerIds) by their\n * xor distance to the inital provided key.\n */\n\nvar PeerQueue =\n/*#__PURE__*/\nfunction () {\n  _createClass(PeerQueue, null, [{\n    key: \"fromPeerId\",\n\n    /**\n     * Create from a given peer id.\n     *\n     * @param {PeerId} id\n     * @param {function(Error, PeerQueue)} callback\n     * @returns {void}\n     */\n    value: function fromPeerId(id, callback) {\n      utils.convertPeerId(id, function (err, key) {\n        if (err) {\n          return callback(err);\n        }\n\n        callback(null, new PeerQueue(key));\n      });\n    }\n    /**\n     * Create from a given buffer.\n     *\n     * @param {Buffer} key\n     * @param {function(Error, PeerQueue)} callback\n     * @returns {void}\n     */\n\n  }, {\n    key: \"fromKey\",\n    value: function fromKey(key, callback) {\n      utils.convertBuffer(key, function (err, key) {\n        if (err) {\n          return callback(err);\n        }\n\n        callback(null, new PeerQueue(key));\n      });\n    }\n    /**\n     * Create a new PeerQueue.\n     *\n     * @param {Buffer} from - The sha2-256 encoded peer id\n     */\n\n  }]);\n\n  function PeerQueue(from) {\n    _classCallCheck(this, PeerQueue);\n\n    log('create: %b', from);\n    this.from = from;\n    this.heap = new Heap(utils.xorCompare);\n  }\n  /**\n   * Add a new PeerId to the queue.\n   *\n   * @param {PeerId} id\n   * @param {function(Error)} callback\n   * @returns {void}\n   */\n\n\n  _createClass(PeerQueue, [{\n    key: \"enqueue\",\n    value: function enqueue(id, callback) {\n      var _this = this;\n\n      log('enqueue %s', id.toB58String());\n      utils.convertPeerId(id, function (err, key) {\n        if (err) {\n          return callback(err);\n        }\n\n        var el = {\n          id: id,\n          distance: distance(_this.from, key)\n        };\n\n        _this.heap.push(el);\n\n        callback();\n      });\n    }\n    /**\n     * Returns the closest peer to the `from` peer.\n     *\n     * @returns {PeerId}\n     */\n\n  }, {\n    key: \"dequeue\",\n    value: function dequeue() {\n      var el = this.heap.pop();\n      log('dequeue %s', el.id.toB58String());\n      return el.id;\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.heap.size();\n    }\n  }]);\n\n  return PeerQueue;\n}();\n\nmodule.exports = PeerQueue;","map":null,"metadata":{},"sourceType":"script"}