{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _asyncIterator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar promisify = require('promisify-es6');\n\nvar isIpfs = require('is-ipfs');\n\nvar setImmediate = require('async/setImmediate');\n\nvar CID = require('cids');\n\nvar _require = require('../../utils/cid'),\n    cidToString = _require.cidToString;\n\nmodule.exports = function (self) {\n  return promisify(\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(name, opts, cb) {\n      var split, cid, path, results, value, remainderPath, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, result;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (typeof opts === 'function') {\n                cb = opts;\n                opts = {};\n              }\n\n              opts = opts || {};\n\n              if (isIpfs.path(name)) {\n                _context.next = 4;\n                break;\n              }\n\n              return _context.abrupt(\"return\", setImmediate(function () {\n                return cb(new Error('invalid argument ' + name));\n              }));\n\n            case 4:\n              if (isIpfs.ipfsPath(name)) {\n                _context.next = 6;\n                break;\n              }\n\n              return _context.abrupt(\"return\", setImmediate(function () {\n                return cb(new Error('resolve non-IPFS names is not implemented'));\n              }));\n\n            case 6:\n              split = name.split('/'); // ['', 'ipfs', 'hash', ...path]\n\n              cid = new CID(split[2]);\n\n              if (!(split.length === 3)) {\n                _context.next = 10;\n                break;\n              }\n\n              return _context.abrupt(\"return\", setImmediate(function () {\n                return cb(null, \"/ipfs/\".concat(cidToString(cid, {\n                  base: opts.cidBase\n                })));\n              }));\n\n            case 10:\n              path = split.slice(3).join('/');\n              results = self._ipld.resolve(cid, path);\n              value = cid;\n              remainderPath = path;\n              _context.prev = 14;\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 17;\n              _iterator = _asyncIterator(results);\n\n            case 19:\n              _context.next = 21;\n              return _iterator.next();\n\n            case 21:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 25;\n              return _step.value;\n\n            case 25:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 37;\n                break;\n              }\n\n              result = _value;\n\n              if (!(result.remainderPath === '')) {\n                _context.next = 32;\n                break;\n              }\n\n              // Use values from previous iteration if the value isn't a CID\n              if (CID.isCID(result.value)) {\n                value = result.value;\n                remainderPath = '';\n              }\n\n              if (result.value && CID.isCID(result.value.Hash)) {\n                value = result.value.Hash;\n                remainderPath = '';\n              }\n\n              return _context.abrupt(\"break\", 37);\n\n            case 32:\n              value = result.value;\n              remainderPath = result.remainderPath;\n\n            case 34:\n              _iteratorNormalCompletion = true;\n              _context.next = 19;\n              break;\n\n            case 37:\n              _context.next = 43;\n              break;\n\n            case 39:\n              _context.prev = 39;\n              _context.t0 = _context[\"catch\"](17);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 43:\n              _context.prev = 43;\n              _context.prev = 44;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 48;\n                break;\n              }\n\n              _context.next = 48;\n              return _iterator.return();\n\n            case 48:\n              _context.prev = 48;\n\n              if (!_didIteratorError) {\n                _context.next = 51;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 51:\n              return _context.finish(48);\n\n            case 52:\n              return _context.finish(43);\n\n            case 53:\n              _context.next = 58;\n              break;\n\n            case 55:\n              _context.prev = 55;\n              _context.t1 = _context[\"catch\"](14);\n              return _context.abrupt(\"return\", cb(_context.t1));\n\n            case 58:\n              return _context.abrupt(\"return\", cb(null, \"/ipfs/\".concat(cidToString(value, {\n                base: opts.cidBase\n              })).concat(remainderPath ? '/' + remainderPath : '')));\n\n            case 59:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[14, 55], [17, 39, 43, 53], [44,, 48, 52]]);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n};","map":null,"metadata":{},"sourceType":"script"}