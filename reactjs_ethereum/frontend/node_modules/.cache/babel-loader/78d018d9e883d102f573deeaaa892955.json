{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar SparseArray = require('sparse-array');\n\nvar wrapHash = require('./consumable-hash');\n\nvar defaultOptions = {\n  bits: 8\n};\n\nvar Bucket =\n/*#__PURE__*/\nfunction () {\n  function Bucket(options, parent, posAtParent) {\n    _classCallCheck(this, Bucket);\n\n    this._options = Object.assign({}, defaultOptions, options);\n    this._popCount = 0;\n    this._parent = parent;\n    this._posAtParent = posAtParent;\n\n    if (!this._options.hashFn) {\n      throw new Error('please define an options.hashFn');\n    } // make sure we only wrap options.hashFn once in the whole tree\n\n\n    if (!this._options.hash) {\n      this._options.hash = wrapHash(this._options.hashFn);\n    }\n\n    this._children = new SparseArray();\n  }\n\n  _createClass(Bucket, [{\n    key: \"put\",\n    value: function () {\n      var _put = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(key, value) {\n        var place;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this._findNewBucketAndPos(key);\n\n              case 2:\n                place = _context.sent;\n                _context.next = 5;\n                return place.bucket._putAt(place, key, value);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function put(_x, _x2) {\n        return _put.apply(this, arguments);\n      }\n\n      return put;\n    }()\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(key) {\n        var child;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this._findChild(key);\n\n              case 2:\n                child = _context2.sent;\n\n                if (!child) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", child.value);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function get(_x3) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n  }, {\n    key: \"del\",\n    value: function () {\n      var _del = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(key) {\n        var place, child;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this._findPlace(key);\n\n              case 2:\n                place = _context3.sent;\n                child = place.bucket._at(place.pos);\n\n                if (child && child.key === key) {\n                  place.bucket._delAt(place.pos);\n                }\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function del(_x4) {\n        return _del.apply(this, arguments);\n      }\n\n      return del;\n    }()\n  }, {\n    key: \"leafCount\",\n    value: function leafCount() {\n      return this._children.compactArray().reduce(function (acc, child) {\n        if (child instanceof Bucket) {\n          return acc + child.leafCount();\n        }\n\n        return acc + 1;\n      }, 0);\n    }\n  }, {\n    key: \"childrenCount\",\n    value: function childrenCount() {\n      return this._children.length;\n    }\n  }, {\n    key: \"onlyChild\",\n    value: function onlyChild() {\n      return this._children.get(0);\n    }\n  }, {\n    key: \"eachLeafSeries\",\n    value:\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function eachLeafSeries() {\n      var children, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, child, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, c2;\n\n      return _regeneratorRuntime.wrap(function eachLeafSeries$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              children = this._children.compactArray();\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _iteratorError = undefined;\n              _context4.prev = 4;\n              _iterator = children[Symbol.iterator]();\n\n            case 6:\n              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n                _context4.next = 42;\n                break;\n              }\n\n              child = _step.value;\n\n              if (!(child instanceof Bucket)) {\n                _context4.next = 37;\n                break;\n              }\n\n              _iteratorNormalCompletion2 = true;\n              _didIteratorError2 = false;\n              _iteratorError2 = undefined;\n              _context4.prev = 12;\n              _iterator2 = child.eachLeafSeries()[Symbol.iterator]();\n\n            case 14:\n              if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {\n                _context4.next = 21;\n                break;\n              }\n\n              c2 = _step2.value;\n              _context4.next = 18;\n              return c2;\n\n            case 18:\n              _iteratorNormalCompletion2 = true;\n              _context4.next = 14;\n              break;\n\n            case 21:\n              _context4.next = 27;\n              break;\n\n            case 23:\n              _context4.prev = 23;\n              _context4.t0 = _context4[\"catch\"](12);\n              _didIteratorError2 = true;\n              _iteratorError2 = _context4.t0;\n\n            case 27:\n              _context4.prev = 27;\n              _context4.prev = 28;\n\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n\n            case 30:\n              _context4.prev = 30;\n\n              if (!_didIteratorError2) {\n                _context4.next = 33;\n                break;\n              }\n\n              throw _iteratorError2;\n\n            case 33:\n              return _context4.finish(30);\n\n            case 34:\n              return _context4.finish(27);\n\n            case 35:\n              _context4.next = 39;\n              break;\n\n            case 37:\n              _context4.next = 39;\n              return child;\n\n            case 39:\n              _iteratorNormalCompletion = true;\n              _context4.next = 6;\n              break;\n\n            case 42:\n              _context4.next = 48;\n              break;\n\n            case 44:\n              _context4.prev = 44;\n              _context4.t1 = _context4[\"catch\"](4);\n              _didIteratorError = true;\n              _iteratorError = _context4.t1;\n\n            case 48:\n              _context4.prev = 48;\n              _context4.prev = 49;\n\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n\n            case 51:\n              _context4.prev = 51;\n\n              if (!_didIteratorError) {\n                _context4.next = 54;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 54:\n              return _context4.finish(51);\n\n            case 55:\n              return _context4.finish(48);\n\n            case 56:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, eachLeafSeries, this, [[4, 44, 48, 56], [12, 23, 27, 35], [28,, 30, 34], [49,, 51, 55]]);\n    })\n  }, {\n    key: \"serialize\",\n    value: function serialize(map, reduce) {\n      // serialize to a custom non-sparse representation\n      return reduce(this._children.reduce(function (acc, child, index) {\n        if (child) {\n          if (child instanceof Bucket) {\n            acc.push(child.serialize(map, reduce));\n          } else {\n            acc.push(map(child, index));\n          }\n        }\n\n        return acc;\n      }, []));\n    }\n  }, {\n    key: \"asyncTransform\",\n    value: function () {\n      var _asyncTransform = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(asyncMap, asyncReduce) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", asyncTransformBucket(this, asyncMap, asyncReduce));\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function asyncTransform(_x5, _x6) {\n        return _asyncTransform.apply(this, arguments);\n      }\n\n      return asyncTransform;\n    }()\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.serialize(mapNode, reduceNodes);\n    }\n  }, {\n    key: \"prettyPrint\",\n    value: function prettyPrint() {\n      return JSON.stringify(this.toJSON(), null, '  ');\n    }\n  }, {\n    key: \"tableSize\",\n    value: function tableSize() {\n      return Math.pow(2, this._options.bits);\n    }\n  }, {\n    key: \"_findChild\",\n    value: function () {\n      var _findChild2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(key) {\n        var result, child;\n        return _regeneratorRuntime.wrap(function _callee5$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this._findPlace(key);\n\n              case 2:\n                result = _context6.sent;\n                child = result.bucket._at(result.pos);\n\n                if (!(child && child.key === key)) {\n                  _context6.next = 6;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", child);\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function _findChild(_x7) {\n        return _findChild2.apply(this, arguments);\n      }\n\n      return _findChild;\n    }()\n  }, {\n    key: \"_findPlace\",\n    value: function () {\n      var _findPlace2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(key) {\n        var hashValue, index, child;\n        return _regeneratorRuntime.wrap(function _callee6$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                hashValue = this._options.hash(key);\n                _context7.next = 3;\n                return hashValue.take(this._options.bits);\n\n              case 3:\n                index = _context7.sent;\n                child = this._children.get(index);\n\n                if (!(child instanceof Bucket)) {\n                  _context7.next = 7;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", child._findPlace(hashValue));\n\n              case 7:\n                return _context7.abrupt(\"return\", {\n                  bucket: this,\n                  pos: index,\n                  hash: hashValue\n                });\n\n              case 8:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function _findPlace(_x8) {\n        return _findPlace2.apply(this, arguments);\n      }\n\n      return _findPlace;\n    }()\n  }, {\n    key: \"_findNewBucketAndPos\",\n    value: function () {\n      var _findNewBucketAndPos2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(key) {\n        var place, child, bucket, newPlace;\n        return _regeneratorRuntime.wrap(function _callee7$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this._findPlace(key);\n\n              case 2:\n                place = _context8.sent;\n                child = place.bucket._at(place.pos);\n\n                if (!(child && child.key !== key)) {\n                  _context8.next = 12;\n                  break;\n                }\n\n                // conflict\n                bucket = new Bucket(this._options, place.bucket, place.pos);\n\n                place.bucket._putObjectAt(place.pos, bucket); // put the previous value\n\n\n                _context8.next = 9;\n                return bucket._findPlace(child.hash);\n\n              case 9:\n                newPlace = _context8.sent;\n\n                newPlace.bucket._putAt(newPlace, child.key, child.value);\n\n                return _context8.abrupt(\"return\", bucket._findNewBucketAndPos(place.hash));\n\n              case 12:\n                return _context8.abrupt(\"return\", place);\n\n              case 13:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function _findNewBucketAndPos(_x9) {\n        return _findNewBucketAndPos2.apply(this, arguments);\n      }\n\n      return _findNewBucketAndPos;\n    }()\n  }, {\n    key: \"_putAt\",\n    value: function _putAt(place, key, value) {\n      this._putObjectAt(place.pos, {\n        key: key,\n        value: value,\n        hash: place.hash\n      });\n    }\n  }, {\n    key: \"_putObjectAt\",\n    value: function _putObjectAt(pos, object) {\n      if (!this._children.get(pos)) {\n        this._popCount++;\n      }\n\n      this._children.set(pos, object);\n    }\n  }, {\n    key: \"_delAt\",\n    value: function _delAt(pos) {\n      if (this._children.get(pos)) {\n        this._popCount--;\n      }\n\n      this._children.unset(pos);\n\n      this._level();\n    }\n  }, {\n    key: \"_level\",\n    value: function _level() {\n      if (this._parent && this._popCount <= 1) {\n        if (this._popCount === 1) {\n          // remove myself from parent, replacing me with my only child\n          var onlyChild = this._children.find(exists);\n\n          if (!(onlyChild instanceof Bucket)) {\n            var hash = onlyChild.hash;\n            hash.untake(this._options.bits);\n            var place = {\n              pos: this._posAtParent,\n              hash: hash\n            };\n\n            this._parent._putAt(place, onlyChild.key, onlyChild.value);\n          }\n        } else {\n          this._parent._delAt(this._posAtParent);\n        }\n      }\n    }\n  }, {\n    key: \"_at\",\n    value: function _at(index) {\n      return this._children.get(index);\n    }\n  }], [{\n    key: \"isBucket\",\n    value: function isBucket(o) {\n      return o instanceof Bucket;\n    }\n  }]);\n\n  return Bucket;\n}();\n\nfunction exists(o) {\n  return Boolean(o);\n}\n\nfunction mapNode(node, index) {\n  return node.key;\n}\n\nfunction reduceNodes(nodes) {\n  return nodes;\n}\n\nfunction asyncTransformBucket(_x10, _x11, _x12) {\n  return _asyncTransformBucket.apply(this, arguments);\n}\n\nfunction _asyncTransformBucket() {\n  _asyncTransformBucket = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee8(bucket, asyncMap, asyncReduce) {\n    var output, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, child, mappedChildren;\n\n    return _regeneratorRuntime.wrap(function _callee8$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            output = [];\n            _iteratorNormalCompletion3 = true;\n            _didIteratorError3 = false;\n            _iteratorError3 = undefined;\n            _context9.prev = 4;\n            _iterator3 = bucket._children.compactArray()[Symbol.iterator]();\n\n          case 6:\n            if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {\n              _context9.next = 21;\n              break;\n            }\n\n            child = _step3.value;\n\n            if (!(child instanceof Bucket)) {\n              _context9.next = 13;\n              break;\n            }\n\n            _context9.next = 11;\n            return asyncTransformBucket(child, asyncMap, asyncReduce);\n\n          case 11:\n            _context9.next = 17;\n            break;\n\n          case 13:\n            _context9.next = 15;\n            return asyncMap(child);\n\n          case 15:\n            mappedChildren = _context9.sent;\n            output.push({\n              bitField: bucket._children.bitField(),\n              children: mappedChildren\n            });\n\n          case 17:\n            return _context9.abrupt(\"return\", asyncReduce(output));\n\n          case 18:\n            _iteratorNormalCompletion3 = true;\n            _context9.next = 6;\n            break;\n\n          case 21:\n            _context9.next = 27;\n            break;\n\n          case 23:\n            _context9.prev = 23;\n            _context9.t0 = _context9[\"catch\"](4);\n            _didIteratorError3 = true;\n            _iteratorError3 = _context9.t0;\n\n          case 27:\n            _context9.prev = 27;\n            _context9.prev = 28;\n\n            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n              _iterator3.return();\n            }\n\n          case 30:\n            _context9.prev = 30;\n\n            if (!_didIteratorError3) {\n              _context9.next = 33;\n              break;\n            }\n\n            throw _iteratorError3;\n\n          case 33:\n            return _context9.finish(30);\n\n          case 34:\n            return _context9.finish(27);\n\n          case 35:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee8, null, [[4, 23, 27, 35], [28,, 30, 34]]);\n  }));\n  return _asyncTransformBucket.apply(this, arguments);\n}\n\nmodule.exports = Bucket;","map":null,"metadata":{},"sourceType":"script"}