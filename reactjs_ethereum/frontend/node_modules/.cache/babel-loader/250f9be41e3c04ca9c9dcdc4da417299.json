{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar batch = require('async-iterator-batch');\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  var _ref = _wrapAsyncGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(source, reduce) {\n    var roots, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, chunk;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            roots = [];\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 3;\n            _iterator = _asyncIterator(batch(source, Infinity));\n\n          case 5:\n            _context.next = 7;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 7:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 11;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 11:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 22;\n              break;\n            }\n\n            chunk = _value;\n            _context.t0 = roots;\n            _context.next = 17;\n            return _awaitAsyncGenerator(reduce(chunk));\n\n          case 17:\n            _context.t1 = _context.sent;\n\n            _context.t0.push.call(_context.t0, _context.t1);\n\n          case 19:\n            _iteratorNormalCompletion = true;\n            _context.next = 5;\n            break;\n\n          case 22:\n            _context.next = 28;\n            break;\n\n          case 24:\n            _context.prev = 24;\n            _context.t2 = _context[\"catch\"](3);\n            _didIteratorError = true;\n            _iteratorError = _context.t2;\n\n          case 28:\n            _context.prev = 28;\n            _context.prev = 29;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 33;\n              break;\n            }\n\n            _context.next = 33;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 33:\n            _context.prev = 33;\n\n            if (!_didIteratorError) {\n              _context.next = 36;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 36:\n            return _context.finish(33);\n\n          case 37:\n            return _context.finish(28);\n\n          case 38:\n            _context.next = 40;\n            return roots[0];\n\n          case 40:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[3, 24, 28, 38], [29,, 33, 37]]);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"script"}