{"ast":null,"code":"'use strict';\n\nvar nextTick = require('async/nextTick');\n\nvar _require = require('./errors'),\n    messages = _require.messages,\n    codes = _require.codes;\n\nvar FloodSub = require('libp2p-floodsub');\n\nvar errCode = require('err-code');\n\nmodule.exports = function (node) {\n  var floodSub = new FloodSub(node);\n  node._floodSub = floodSub;\n  return {\n    subscribe: function subscribe(topic, options, handler, callback) {\n      if (typeof options === 'function') {\n        callback = handler;\n        handler = options;\n        options = {};\n      }\n\n      if (!node.isStarted() && !floodSub.started) {\n        return nextTick(callback, errCode(new Error(messages.NOT_STARTED_YET), codes.PUBSUB_NOT_STARTED));\n      }\n\n      function subscribe(cb) {\n        if (floodSub.listenerCount(topic) === 0) {\n          floodSub.subscribe(topic);\n        }\n\n        floodSub.on(topic, handler);\n        nextTick(cb);\n      }\n\n      subscribe(callback);\n    },\n    unsubscribe: function unsubscribe(topic, handler, callback) {\n      if (!node.isStarted() && !floodSub.started) {\n        return nextTick(callback, errCode(new Error(messages.NOT_STARTED_YET), codes.PUBSUB_NOT_STARTED));\n      }\n\n      if (!handler && !callback) {\n        floodSub.removeAllListeners(topic);\n      } else {\n        floodSub.removeListener(topic, handler);\n      }\n\n      if (floodSub.listenerCount(topic) === 0) {\n        floodSub.unsubscribe(topic);\n      }\n\n      if (typeof callback === 'function') {\n        nextTick(function () {\n          return callback();\n        });\n      }\n    },\n    publish: function publish(topic, data, callback) {\n      if (!node.isStarted() && !floodSub.started) {\n        return nextTick(callback, errCode(new Error(messages.NOT_STARTED_YET), codes.PUBSUB_NOT_STARTED));\n      }\n\n      if (!Buffer.isBuffer(data)) {\n        return nextTick(callback, errCode(new Error('data must be a Buffer'), 'ERR_DATA_IS_NOT_A_BUFFER'));\n      }\n\n      floodSub.publish(topic, data, callback);\n    },\n    ls: function ls(callback) {\n      if (!node.isStarted() && !floodSub.started) {\n        return nextTick(callback, errCode(new Error(messages.NOT_STARTED_YET), codes.PUBSUB_NOT_STARTED));\n      }\n\n      var subscriptions = Array.from(floodSub.subscriptions);\n      nextTick(function () {\n        return callback(null, subscriptions);\n      });\n    },\n    peers: function peers(topic, callback) {\n      if (!node.isStarted() && !floodSub.started) {\n        return nextTick(callback, errCode(new Error(messages.NOT_STARTED_YET), codes.PUBSUB_NOT_STARTED));\n      }\n\n      if (typeof topic === 'function') {\n        callback = topic;\n        topic = null;\n      }\n\n      var peers = Array.from(floodSub.peers.values()).filter(function (peer) {\n        return topic ? peer.topics.has(topic) : true;\n      }).map(function (peer) {\n        return peer.info.id.toB58String();\n      });\n      nextTick(function () {\n        return callback(null, peers);\n      });\n    },\n    setMaxListeners: function setMaxListeners(n) {\n      return floodSub.setMaxListeners(n);\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}