{"ast":null,"code":"import _regeneratorRuntime from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Web3 from 'web3';\nimport TruffleContract from 'truffle-contract';\nimport Medical from './build/contracts/Medical.json';\nimport ReactDOM from 'react-dom';\nimport Header from './Components/Header';\nimport 'react-sticky-header/styles.css';\nimport SideBar from './Components/SideBar';\nimport Content from './Components/Content';\nimport { type } from 'os';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));\n\n    _this.setNetwork = function () {\n      var networkName,\n          that = _assertThisInitialized(_assertThisInitialized(_this));\n\n      _this.web3.version.getNetwork(function (err, networkId) {\n        switch (networkId) {\n          case \"1\":\n            networkName = \"Main\";\n            break;\n\n          case \"2\":\n            networkName = \"Morden\";\n            break;\n\n          case \"3\":\n            networkName = \"Ropsten\";\n            break;\n\n          case \"4\":\n            networkName = \"Rinkeby\";\n            break;\n\n          case \"42\":\n            networkName = \"Kovan\";\n            break;\n\n          default:\n            networkName = networkId;\n        }\n\n        that.setState({\n          network: networkName\n        });\n      });\n    };\n\n    _this.getPatient = function () {};\n\n    _this.componentDidMount =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var account, app, accounts;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              account = _this.web3.eth.coinbase;\n              app = _assertThisInitialized(_assertThisInitialized(_this));\n\n              try {\n                _this.setNetwork();\n\n                accounts = _this.web3.eth.accounts[0]; // const PatientDeploy= PatientFactory.networks[this.state.network];\n                // const patientContract =this.web3.eth.contract(\n                //   PatientFactory.abi,PatientDeploy && PatientDeploy.address\n                // );\n\n                _this.setState({\n                  accounts: accounts\n                }, _this.runExample);\n              } catch (err) {\n                alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n                console.log(\"error to doko\");\n                console.error(err);\n              }\n\n              _this.medicalContract.deployed().then(function (instance) {\n                var patientdt = instance;\n                var patientdt2 = instance;\n                instance.getPatientByOwner(app.state.accounts).then(function (ids) {\n                  console.log(\"ids:\" + ids + \" type : \" + typeof ids);\n                  var _iteratorNormalCompletion = true;\n                  var _didIteratorError = false;\n                  var _iteratorError = undefined;\n\n                  try {\n                    var _loop = function _loop() {\n                      var id = _step.value;\n                      //  let x = id ; \n                      patientdt.patients(id).then(function (data) {\n                        var patientData = app.state.patientData;\n                        patientData.push(data);\n                        app.setState({\n                          patientData: patientData\n                        }); // console.log(\"hahaha\" + data);\n                        // console.log(\"big number: \" + app.web3.utils.isBigNumber(id))\n                        // console.log(app.web3.utils.toWei(this.state.value.toString(), 'ether'))\n                      }, 100);\n                      patientdt.viewSickCode(id).then(function (data1) {\n                        var idpatient1 = id;\n                        console.log(idpatient1 + typeof idpatient1); // console.log(\"day la so \" + typeof(0) +  \" so : \" +idpatient1 );\n\n                        var sickCodes = app.state.sickCodes;\n                        sickCodes.push({\n                          idpatient1: idpatient1,\n                          data1: data1\n                        });\n                        app.setState({\n                          sickCodes: sickCodes\n                        });\n                        console.log(\"ban ghi sick code \" + idpatient1 + data1);\n                      });\n                    };\n\n                    for (var _iterator = ids[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                      _loop();\n                    }\n                  } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion && _iterator.return != null) {\n                        _iterator.return();\n                      }\n                    } finally {\n                      if (_didIteratorError) {\n                        throw _iteratorError;\n                      }\n                    }\n                  }\n                }); // instance.countSickCode().then(function(counts){\n                //   console.log(\"so ban ghi \" + counts);\n                //   let a = counts;\n                //   for(let id =0 ; id <counts; id ++){\n                //     patientdt.sickcodes(id).then(function(data1){\n                //       const sickcodes = app.state.sickcodes;\n                //       sickcodes.push(data1);\n                //       app.setState({\n                //         sickcodes\n                //       });\n                //     })\n                //   }\n                // })\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    _this.runExample =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var userAccount;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              // const {patientContract}=this.state;\n              userAccount = _this.web3.eth.accounts[0]; // console.log(userAccount.address)\n\n              _this.medicalContract.deployed().then(function (instance) {\n                var that = _assertThisInitialized(_assertThisInitialized(_this));\n\n                _this.medicalContractDeployed = instance;\n\n                _this.medicalContractDeployed.CreatePatient(\"cuong\", 5453, 23, 1, {\n                  from: userAccount\n                }).then(function (response, error) {\n                  if (response) {\n                    var _that = _assertThisInitialized(_assertThisInitialized(_this));\n\n                    console.log(\"den day chua\"); // console.log(\"dung \" + response);\n\n                    _that.medicalContractDeployed.OwnerPatientCount(userAccount).then(function (data) {// console.log(data);\n                      // console.log(that.state.patientData);\n                      // console.log(\"code \" + that.state.sickCodes[1].data);\n                      // console.log(\"code  sick \" + that.state.sickCodeByPatient);\n                    }); // that.setState({patientData: that.patientContractDeployed.patients(2)});\n\n                  } else {\n                    console.log(\"error cmnr \"); // console.log(\"error\" + error);\n                  }\n                });\n              });\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    _this.getSickbypatient = function (patientID) {\n      var app = _assertThisInitialized(_assertThisInitialized(_this)); // console.log(this.state.sickCodes[0])\n\n\n      var sickCodes = _this.state.sickCodes;\n\n      _this.state.sickCodes.forEach(function (x) {\n        if (x.idpatient1 == patientID) {\n          console.log(x.data1);\n        }\n      }); // console.log(sickCodeByPatient.data1);\n\n    };\n\n    _this.isWeb3 = true;\n    _this.isWeb3Locked = false;\n    _this.appName = \"Patient Data\";\n    _this.state = {\n      network: \"checking...\",\n      accounts: null,\n      medicalContract: null,\n      patientData: [],\n      sickCodes: [],\n      sickCodeByPatient: []\n    };\n    var web3 = window.web3;\n\n    if (typeof web3 !== \"undefined\") {\n      _this.web3Provider = web3.currentProvider;\n      _this.web3 = new Web3(web3.currentProvider);\n      _this.medicalContract = TruffleContract(Medical);\n\n      _this.medicalContract.setProvider(_this.web3Provider);\n\n      if (web3.eth.coinbase === null) _this.isWeb3Locked = true;\n    } else {\n      _this.isWeb3 = false;\n    }\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      if (this.isWeb3) {\n        if (this.isWeb3Locked) {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 232\n            },\n            __self: this\n          }, React.createElement(Header, {\n            network: this.state.network,\n            appName: this.appName,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 233\n            },\n            __self: this\n          }), React.createElement(SideBar, {\n            patientData: this.state.patientData,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 234\n            },\n            __self: this\n          }), React.createElement(Content, {\n            message: \"Unlock Your Metamask/Mist Wallet\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 235\n            },\n            __self: this\n          }));\n        } else {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 240\n            },\n            __self: this\n          }, React.createElement(Header, {\n            network: this.state.network,\n            appName: this.appName,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 241\n            },\n            __self: this\n          }), React.createElement(SideBar, {\n            patientData: this.state.patientData,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 242\n            },\n            __self: this\n          }), React.createElement(Content, {\n            getSickbypatient: this.getSickbypatient,\n            patientData: this.state.patientData,\n            sickCodeByPatient: this.state.sickCodeByPatient,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 243\n            },\n            __self: this\n          }));\n        }\n      } else {\n        return React.createElement(\"div\", {\n          className: \"App\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 248\n          },\n          __self: this\n        }, React.createElement(Header, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 249\n          },\n          __self: this\n        }));\n      }\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/cutyremon/blockChain/reactjs_ethereum/frontend/reactjs_ether/ether_reactjs/src/App.js"],"names":["React","Component","Web3","TruffleContract","Medical","ReactDOM","Header","SideBar","Content","type","App","setNetwork","networkName","that","web3","version","getNetwork","err","networkId","setState","network","getPatient","componentDidMount","account","eth","coinbase","app","accounts","runExample","alert","console","log","error","medicalContract","deployed","then","instance","patientdt","patientdt2","getPatientByOwner","state","ids","id","patients","data","patientData","push","viewSickCode","data1","idpatient1","sickCodes","userAccount","medicalContractDeployed","CreatePatient","from","response","OwnerPatientCount","getSickbypatient","patientID","forEach","x","isWeb3","isWeb3Locked","appName","sickCodeByPatient","window","web3Provider","currentProvider","setProvider"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Web3 from 'web3';\nimport TruffleContract from 'truffle-contract';\nimport Medical from './build/contracts/Medical.json';\nimport ReactDOM from 'react-dom';\nimport Header from './Components/Header';\nimport 'react-sticky-header/styles.css';\nimport SideBar from './Components/SideBar';\nimport Content from './Components/Content';\nimport { type } from 'os';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.isWeb3 = true;\n    this.isWeb3Locked = false;\n    this.appName = \"Patient Data\";\n\n    this.state = {\n      network: \"checking...\",\n      accounts: null,\n      medicalContract:null,\n      patientData:[],\n      sickCodes:[],\n      sickCodeByPatient:[]\n      \n    };\n\n    let web3 = window.web3;\n    if (typeof web3 !== \"undefined\") {\n      this.web3Provider = web3.currentProvider;\n      this.web3 = new Web3(web3.currentProvider);\n      this.medicalContract = TruffleContract(Medical);\n      this.medicalContract.setProvider(this.web3Provider);\n\n      if (web3.eth.coinbase === null)\n        this.isWeb3Locked = true;\n    } else {\n\n      this.isWeb3 = false;\n    }\n  }\n\n  setNetwork = () => {\n    let networkName,\n      that = this;\n\n    this.web3.version.getNetwork(function(err, networkId) {\n      switch (networkId) {\n      case \"1\":\n        networkName = \"Main\";\n        break;\n      case \"2\":\n        networkName = \"Morden\";\n        break;\n      case \"3\":\n        networkName = \"Ropsten\";\n        break;\n      case \"4\":\n        networkName = \"Rinkeby\";\n        break;\n      case \"42\":\n        networkName = \"Kovan\";\n        break;\n      default:\n        networkName = networkId;\n      }\n      that.setState({\n        network: networkName\n      })\n    });\n  };\n\n  getPatient = ()=>{\n    }\n\n\n  componentDidMount = async() => {\n    let account = this.web3.eth.coinbase;\n    let app = this;\ntry{\n    this.setNetwork(); \n\n    const accounts =this.web3.eth.accounts[0];\n    // const PatientDeploy= PatientFactory.networks[this.state.network];\n    // const patientContract =this.web3.eth.contract(\n    //   PatientFactory.abi,PatientDeploy && PatientDeploy.address\n    // );\n    this.setState({\n      accounts\n    },this.runExample)\n}catch(err){\n  alert(\n    `Failed to load web3, accounts, or contract. Check console for details.`,\n  );\n  console.log(\"error to doko\");\n  console.error(err);\n}\nthis.medicalContract.deployed().then(function(instance){\n  let patientdt = instance;\n  let patientdt2=instance;\n  instance.getPatientByOwner(app.state.accounts).then(function(ids){\n\n  console.log(\"ids:\" +ids + \" type : \" + typeof(ids));\n\nfor( let id of ids){\n  //  let x = id ; \n  patientdt.patients(id).then(function(data){\n    const patientData = app.state.patientData; \n  patientData.push(data);\n    app.setState({\n      patientData\n    });\n    // console.log(\"hahaha\" + data);\n    // console.log(\"big number: \" + app.web3.utils.isBigNumber(id))\n    // console.log(app.web3.utils.toWei(this.state.value.toString(), 'ether'))\n  },100);\n\n    patientdt.viewSickCode(id).then(function(data1){\n      let idpatient1 = id;\n      console.log(idpatient1 + typeof(idpatient1));\n      // console.log(\"day la so \" + typeof(0) +  \" so : \" +idpatient1 );\n      const sickCodes = app.state.sickCodes;\n      sickCodes.push({idpatient1,data1})\n      app.setState({\n        sickCodes\n      });\n      console.log(\"ban ghi sick code \" +idpatient1 + data1)\n\n    })\n\n\n}\n  })\n\n  // instance.countSickCode().then(function(counts){\n  //   console.log(\"so ban ghi \" + counts);\n  //   let a = counts;\n  //   for(let id =0 ; id <counts; id ++){\n  //     patientdt.sickcodes(id).then(function(data1){\n  //       const sickcodes = app.state.sickcodes;\n  //       sickcodes.push(data1);\n  //       app.setState({\n  //         sickcodes\n  //       });\n  //     })\n  //   }\n  // })\n\n\n\n})\n\n\n  }\n\n  runExample= async()=>{\n    // const {patientContract}=this.state;\n    var userAccount =this.web3.eth.accounts[0];\n    // console.log(userAccount.address)\n    this.medicalContract.deployed().then((instance)=>{\n      let that=this;\n      this.medicalContractDeployed=instance;\n    this.medicalContractDeployed.CreatePatient(\"cuong\",5453,23,1,{from:userAccount}).then((response,error)=>{\n      if(response){\n        let that = this;\n        console.log(\"den day chua\");\n        // console.log(\"dung \" + response);\n        that.medicalContractDeployed.OwnerPatientCount(userAccount).then((data)=>{\n          \n            // console.log(data);\n            // console.log(that.state.patientData);\n            // console.log(\"code \" + that.state.sickCodes[1].data);\n            // console.log(\"code  sick \" + that.state.sickCodeByPatient);\n\n        });\n        // that.setState({patientData: that.patientContractDeployed.patients(2)});\n          \n }\n      else{\n        console.log(\"error cmnr \");\n        // console.log(\"error\" + error);\n      }\n    })\n  })\n}\n  \n    // that.patientContractDeployed.patients(1).then((zombie)=>{\n    //   ReactDOM.render(\n    //     ( <ul>\n    //       <li>Name: {zombie.name}</li>\n    //       <li>DNA: {zombie.age}</li>\n    //       <li>Level: {zombie.cmt}</li>\n    //       <li>Wins: {zombie.sex}</li>\n    //     </ul>),\n    //     document.getElementById('patientData')\n    //   );\n        \n    // })\n    //  console.log(this.patientContractDeployed.OwnerToPatient(userAccount).call());\n\n    \n    // console.log(\"heheh\")\n    // await this.patientContract.methods.CreatePatient(\"cuong\",5453,23,1).send({from:userAccount})\n\n\n  // setPatient = async(name,cmt,age,sex)=>{\n  //   const {patientContract}=this.state;\n  //   var userAccount =this.web3.eth.accounts[0];\n  //   await patientContract.methods.CreatePatient(name,cmt,age,sex).send({from:userAccount})\n  // }\n\n  getSickbypatient=(patientID)=>{\n    let app = this;\n    // console.log(this.state.sickCodes[0])\n    let sickCodes =this.state.sickCodes;\n    this.state.sickCodes.forEach(function(x){\n  if(x.idpatient1==patientID){\n    console.log(x.data1);\n  }\n    });\n    // console.log(sickCodeByPatient.data1);\n\n  }\n\n  render() {\n    if (this.isWeb3) {\n      if (this.isWeb3Locked) {\n        return (\n          <div>\n             <Header network={ this.state.network } appName={ this.appName }/>\n             <SideBar  patientData ={this.state.patientData}/>\n             <Content  message=\"Unlock Your Metamask/Mist Wallet\"/>\n            \n          </div>)\n      } else {\n        return (\n          <div>\n             <Header  network={ this.state.network }   appName={ this.appName }/>\n             <SideBar  patientData ={this.state.patientData}/>\n             <Content getSickbypatient= {this.getSickbypatient} patientData ={this.state.patientData} sickCodeByPatient= {this.state.sickCodeByPatient}/>        \n            </div>)\n      }\n    } else {\n      return (\n        <div className=\"App\">\n        <Header />\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}