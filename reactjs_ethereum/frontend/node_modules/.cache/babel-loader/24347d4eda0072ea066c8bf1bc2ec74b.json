{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar directoryContent = function directoryContent(cid, node, unixfs, path, resolve, depth, ipld) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _wrapAsyncGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var options,\n            offset,\n            length,\n            links,\n            _iteratorNormalCompletion,\n            _didIteratorError,\n            _iteratorError,\n            _iterator,\n            _step,\n            link,\n            result,\n            _args = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n                offset = options.offset || 0;\n                length = options.length || node.Links.length;\n                links = node.Links.slice(offset, length);\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _iteratorError = undefined;\n                _context.prev = 7;\n                _iterator = links[Symbol.iterator]();\n\n              case 9:\n                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n                  _context.next = 19;\n                  break;\n                }\n\n                link = _step.value;\n                _context.next = 13;\n                return _awaitAsyncGenerator(resolve(link.Hash, link.Name, \"\".concat(path, \"/\").concat(link.Name), [], depth + 1, ipld));\n\n              case 13:\n                result = _context.sent;\n                _context.next = 16;\n                return result.entry;\n\n              case 16:\n                _iteratorNormalCompletion = true;\n                _context.next = 9;\n                break;\n\n              case 19:\n                _context.next = 25;\n                break;\n\n              case 21:\n                _context.prev = 21;\n                _context.t0 = _context[\"catch\"](7);\n                _didIteratorError = true;\n                _iteratorError = _context.t0;\n\n              case 25:\n                _context.prev = 25;\n                _context.prev = 26;\n\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                  _iterator.return();\n                }\n\n              case 28:\n                _context.prev = 28;\n\n                if (!_didIteratorError) {\n                  _context.next = 31;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 31:\n                return _context.finish(28);\n\n              case 32:\n                return _context.finish(25);\n\n              case 33:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[7, 21, 25, 33], [26,, 28, 32]]);\n      }));\n\n      return function () {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\n\nmodule.exports = directoryContent;","map":null,"metadata":{},"sourceType":"script"}