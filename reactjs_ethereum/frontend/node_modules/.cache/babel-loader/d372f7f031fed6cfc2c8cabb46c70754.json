{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _regeneratorRuntime = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _awaitAsyncGenerator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar errCode = require('err-code');\n\nvar fs = require('fs');\n\nvar log = require('debug')('ipfs:mfs:utils:to-async-iterator');\n\nvar _require = require('./constants'),\n    MAX_CHUNK_SIZE = _require.MAX_CHUNK_SIZE;\n\nvar toAsyncIterator =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(content) {\n    var index, iterator;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (content) {\n              _context3.next = 2;\n              break;\n            }\n\n            throw errCode(new Error('paths must start with a leading /'), 'ERR_INVALID_PATH');\n\n          case 2:\n            if (!(typeof content === 'string' || content instanceof String)) {\n              _context3.next = 5;\n              break;\n            }\n\n            // Paths, node only\n            log('Content was a path');\n            return _context3.abrupt(\"return\", fs.createReadStream(content));\n\n          case 5:\n            if (!content.length) {\n              _context3.next = 8;\n              break;\n            }\n\n            log('Content was array-like');\n            return _context3.abrupt(\"return\", _defineProperty({}, Symbol.asyncIterator, function () {\n              var _bufferContent = _wrapAsyncGenerator(\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function _callee() {\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.next = 2;\n                        return content;\n\n                      case 2:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              function bufferContent() {\n                return _bufferContent.apply(this, arguments);\n              }\n\n              return bufferContent;\n            }()));\n\n          case 8:\n            if (!content[Symbol.asyncIterator]) {\n              _context3.next = 11;\n              break;\n            }\n\n            log('Content was an async iterator');\n            return _context3.abrupt(\"return\", content);\n\n          case 11:\n            if (!content[Symbol.iterator]) {\n              _context3.next = 14;\n              break;\n            }\n\n            log('Content was an iterator');\n            return _context3.abrupt(\"return\", content);\n\n          case 14:\n            if (!(global.Blob && content instanceof global.Blob)) {\n              _context3.next = 19;\n              break;\n            }\n\n            // HTML5 Blob objects (including Files)\n            log('Content was an HTML5 Blob');\n            index = 0;\n            iterator = {\n              next: function () {\n                var _next = _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee2() {\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          if (!(index > content.size)) {\n                            _context2.next = 2;\n                            break;\n                          }\n\n                          return _context2.abrupt(\"return\", {\n                            done: true\n                          });\n\n                        case 2:\n                          return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n                            var chunk = content.slice(index, MAX_CHUNK_SIZE);\n                            index += MAX_CHUNK_SIZE;\n                            var reader = new global.FileReader();\n\n                            var handleLoad = function handleLoad(ev) {\n                              reader.removeEventListener('loadend', handleLoad, false);\n\n                              if (ev.error) {\n                                return reject(ev.error);\n                              }\n\n                              resolve({\n                                done: false,\n                                value: Buffer.from(reader.result)\n                              });\n                            };\n\n                            reader.addEventListener('loadend', handleLoad);\n                            reader.readAsArrayBuffer(chunk);\n                          }));\n\n                        case 3:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2);\n                }));\n\n                function next() {\n                  return _next.apply(this, arguments);\n                }\n\n                return next;\n              }()\n            };\n            return _context3.abrupt(\"return\", _defineProperty({}, Symbol.asyncIterator, function () {\n              return iterator;\n            }));\n\n          case 19:\n            throw errCode(new Error(\"Don't know how to convert \".concat(content, \" into an async iterator\")), 'ERR_INVALID_PARAMS');\n\n          case 20:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function toAsyncIterator(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = toAsyncIterator;","map":null,"metadata":{},"sourceType":"script"}