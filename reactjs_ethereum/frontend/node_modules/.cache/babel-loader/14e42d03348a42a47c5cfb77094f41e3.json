{"ast":null,"code":"'use strict';\n\nvar CID = require('cids');\n\nvar parallel = require('async/parallel');\n\nvar PeerInfo = require('peer-info');\n\nvar errcode = require('err-code');\n\nvar Message = require('../../message');\n\nvar utils = require('../../utils');\n\nmodule.exports = function (dht) {\n  var log = utils.logger(dht.peerInfo.id, 'rpc:get-providers');\n  /**\n   * Process `GetProviders` DHT messages.\n   *\n   * @param {PeerInfo} peer\n   * @param {Message} msg\n   * @param {function(Error, Message)} callback\n   * @returns {undefined}\n   */\n\n  return function getProviders(peer, msg, callback) {\n    var cid;\n\n    try {\n      cid = new CID(msg.key);\n    } catch (err) {\n      return callback(errcode(new Error(\"Invalid CID: \".concat(err.message)), 'ERR_INVALID_CID'));\n    }\n\n    log('%s', cid.toBaseEncodedString());\n    var dsKey = utils.bufferToKey(cid.buffer);\n    parallel([function (cb) {\n      return dht.datastore.has(dsKey, function (err, exists) {\n        if (err) {\n          log.error('Failed to check datastore existence', err);\n          return cb(null, false);\n        }\n\n        cb(null, exists);\n      });\n    }, function (cb) {\n      return dht.providers.getProviders(cid, cb);\n    }, function (cb) {\n      return dht._betterPeersToQuery(msg, peer, cb);\n    }], function (err, res) {\n      if (err) {\n        return callback(err);\n      }\n\n      var has = res[0];\n      var closer = res[2];\n      var providers = res[1].map(function (p) {\n        if (dht.peerBook.has(p)) {\n          return dht.peerBook.get(p);\n        }\n\n        return dht.peerBook.put(new PeerInfo(p));\n      });\n\n      if (has) {\n        providers.push(dht.peerInfo);\n      }\n\n      var response = new Message(msg.type, msg.key, msg.clusterLevel);\n\n      if (providers.length > 0) {\n        response.providerPeers = providers;\n      }\n\n      if (closer.length > 0) {\n        response.closerPeers = closer;\n      }\n\n      log('got %s providers %s closerPeers', providers.length, closer.length);\n      callback(null, response);\n    });\n  };\n};","map":null,"metadata":{},"sourceType":"script"}