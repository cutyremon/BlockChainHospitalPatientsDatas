{"ast":null,"code":"'use strict';\n\nvar CID = require('cids');\n\nvar utils = require('../../utils');\n\nvar errcode = require('err-code');\n\nmodule.exports = function (dht) {\n  var log = utils.logger(dht.peerInfo.id, 'rpc:add-provider');\n  /**\n   * Process `AddProvider` DHT messages.\n   *\n   * @param {PeerInfo} peer\n   * @param {Message} msg\n   * @param {function(Error, Message)} callback\n   * @returns {undefined}\n   */\n\n  return function addProvider(peer, msg, callback) {\n    log('start');\n\n    if (!msg.key || msg.key.length === 0) {\n      return callback(errcode(new Error('Missing key'), 'ERR_MISSING_KEY'));\n    }\n\n    var cid;\n\n    try {\n      cid = new CID(msg.key);\n    } catch (err) {\n      var errMsg = \"Invalid CID: \".concat(err.message);\n      return callback(errcode(new Error(errMsg), 'ERR_INVALID_CID'));\n    }\n\n    msg.providerPeers.forEach(function (pi) {\n      // Ignore providers not from the originator\n      if (!pi.id.isEqual(peer.id)) {\n        log('invalid provider peer %s from %s', pi.id.toB58String(), peer.id.toB58String());\n        return;\n      }\n\n      if (pi.multiaddrs.size < 1) {\n        log('no valid addresses for provider %s. Ignore', peer.id.toB58String());\n        return;\n      }\n\n      log('received provider %s for %s (addrs %s)', peer.id.toB58String(), cid.toBaseEncodedString(), pi.multiaddrs.toArray().map(function (m) {\n        return m.toString();\n      }));\n\n      if (!dht._isSelf(pi.id)) {\n        dht.peerBook.put(pi);\n      }\n    });\n    dht.providers.addProvider(cid, peer.id, callback);\n  };\n};","map":null,"metadata":{},"sourceType":"script"}