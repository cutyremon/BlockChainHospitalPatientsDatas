{"ast":null,"code":"import _classCallCheck from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/cutyremon/blockChain/reactjs_ethereum/frontend/src/Components/CreateMedical.js\";\nimport React, { Component } from 'react';\nimport ipfs from './ipfs';\nimport IPFSUploader from 'ipfs-image-web-upload';\nimport IPFS from 'ipfs';\n\nvar Patient =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Patient, _Component);\n\n  //   constructor(props) {\n  //     super();\n  //     this.state = {\n  //       ipfsHashData: \"\",\n  //       ipfsHashImg: \"\"\n  //     }\n  //   }\n  // //   loadFile= ()=> {\n  // //     var input, file, fr;\n  // //     input = document.getElementById('fileinput');\n  // //     file = input.files[0];\n  // //     fr = new FileReader();\n  // //     fr.onload = receivedText();\n  // //     async function receivedText() {\n  // //         fr = new FileReader();\n  // //         fr.readAsBinaryString(file);\n  // //         let contentdata = await Buffer.from(btoa(fr.result),\"base64\")\n  // //         //IPFS START\n  // //         const repoPath = 'ipfs-1111' //+ Math.random()\n  // //         const ipfs1 = new IPFS({ repo: repoPath })\n  // // let ipfs2= ipfs1;\n  // //          ipfs1.on('ready', () => {\n  // //             const files = [\n  // //             {\n  // //                 path: 'image.png',\n  // //                 content: Buffer.from(btoa(fr.result),\"base64\")\n  // //             }\n  // //             ]\n  // //             ipfs2.files.add(files, function (err, files) {\n  // //                 let url = \"https://ipfs.io/ipfs/\"+files[0].hash;\n  // //                 log(\"Storing file on IPFS using Javascript. HASH: https://ipfs.io/ipfs/\"+files[0].hash);\n  // //                 let ipfsPath = files[0].hash\n  // //                 ipfs.files.cat(ipfsPath, function (err, file) {\n  // //                 if (err) {\n  // //                     throw err\n  // //                 }\n  // //                 let img = file.toString(\"base64\");\n  // //                 document.getElementById(\"design_display\").src= \"data:image/png;base64,\" + img;\n  // //                 })\n  // //             })\n  // //             const log = (line) => {\n  // //                 document.getElementById('output').appendChild(document.createTextNode(`${line}\\r\\n`))\n  // //             }\n  // //         })\n  // //     }\n  // // }\n  // //  loadImage = ()=> {\n  // //     var input, file, fr;\n  // //     input = document.getElementById('inputtext').value;\n  // //         //IPFS START\n  // //         const repoPath = 'ipfs-1111' //+ Math.random()\n  // //         const ipfs = new IPFS({ repo: repoPath })\n  // //         ipfs.on('ready', () => {\n  // //                let  ipfsPath = input\n  // //                 ipfs.files.cat(ipfsPath, function (err, file) {\n  // //                 if (err) {\n  // //                     throw err\n  // //                 }\n  // //                 let img = file.toString(\"base64\");\n  // //                 document.getElementById(\"design_display\").src= \"data:image/png;base64,\" + img;\n  // //                 })\n  // //             const log = (line) => {\n  // //                 document.getElementById('output').appendChild(document.createTextNode(`${line}\\r\\n`))\n  // //             }\n  // //         })\n  // // }\n  //   loadImage1 = async (event) => {\n  //     console.log(\"huhu\")\n  //     var uploader = new IPFSUploader(ipfs);\n  // var hash = await uploader.uploadBlob(event.target.files[0]);\n  // console.log(\"ma hash\" + hash);\n  // this.setState({\n  //   ipfsHashImg:hash\n  // })\n  //     let img_tag = document.getElementById(\"design_display\");\n  //     uploader.loadImage(img_tag, hash);\n  //     // let ipfsPath = input\n  //     // console.log(\"loadmig\" + ipfsPath)\n  //     // ipfs.files.cat(ipfsPath, function (err, file) {\n  //     //   if (err) {\n  //     //     console.log(\"error \" +err )\n  //     //   }\n  //     //   let img = file.toString(\"base64\");\n  //     //   document.getElementById(\"design_display\").src = \"data:image/png;base64,\" + img;\n  //     // })\n  //     // const log = (line) => {\n  //     //   document.getElementById('output').appendChild(document.createTextNode(`${line}\\r\\n`))\n  //     // }\n  //   }\n  //   ipfsUpload = async () => {\n  //     const buffer = await Buffer.from(\"toi di an thit cho\");\n  //     ipfs.add(buffer, (err, ipfsHash) => {\n  //       if (err) return console.error(err)\n  //       console.log(\"ma ban\" + ipfsHash[0].hash)\n  //       this.setState({\n  //         ipfsHashData: ipfsHash[0].hash\n  //       })\n  //     })\n  //   }\n  //   ipfsGetdata = async () => {\n  //     ipfs.cat(this.state.ipfsHashData, (err, data) => {\n  //       if (err) return console.error(err)\n  //       console.log(\"data\" + data.toString())\n  //     })\n  //   }\n  //   render() {\n  //     return (\n  //       <div className=\"col-md-3\">\n  //         <a href=\"#\">\n  //           <span>Create medical </span>\n  //           <span className=\"pull-right-container\">\n  //           </span>\n  //         </a>\n  //         <input type=\"text\"  ></input>\n  //         <input type=\"submit\" onClick={event => this.ipfsUpload()}></input>\n  //         <input type=\"submit\" value=\"get data\" onClick={event => this.ipfsGetdata()}></input>\n  //         <input type=\"file\" id=\"fileinput\"  onChange ={event=>this.loadImage1(event)}></input>\n  //         <input type=\"submit\" value=\"submit file\" onClick={event => this.loadFile()}></input>\n  //         {/* <input type=\"submit\" value=\"show file\" onClick={event => this.loadImage(this.state.ipfsHashImg)}></input> */}\n  //         <br />\n  //         <img id=\"design_display\"/>\n  //       </div>\n  //     )\n  //   }\n  // }\n  // export default Patient;\n  function Patient(props) {\n    var _this;\n\n    _classCallCheck(this, Patient);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Patient).call(this, props));\n    _this.state = {\n      ipfsHash: '',\n      web3: null,\n      buffer: null\n    };\n    _this.captureFile = _this.captureFile.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onSubmit = _this.onSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } //   instantiateContract() {\n  //     /*\n  //      * SMART CONTRACT EXAMPLE\n  //      *\n  //      * Normally these functions would be called in the context of a\n  //      * state management library, but for convenience I've placed them here.\n  //      */\n  //     const contract = require('truffle-contract')\n  //     const simpleStorage = contract(SimpleStorageContract)\n  //     simpleStorage.setProvider(this.state.web3.currentProvider)\n  //     // Get accounts.\n  //     this.state.web3.eth.getAccounts((error, accounts) => {\n  //       simpleStorage.deployed().then((instance) => {\n  //         this.simpleStorageInstance = instance\n  //         this.setState({ account: accounts[0] })\n  //         // Get the value from the contract to prove it worked.\n  //         return this.simpleStorageInstance.get.call(accounts[0])\n  //       }).then((ipfsHash) => {\n  //         // Update state with the result.\n  //         return this.setState({ ipfsHash })\n  //       })\n  //     })\n  //   }\n\n\n  _createClass(Patient, [{\n    key: \"captureFile\",\n    value: function captureFile(event) {\n      var _this2 = this;\n\n      event.preventDefault();\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = function () {\n        _this2.setState({\n          buffer: Buffer(reader.result)\n        });\n\n        console.log('buffer', _this2.state.buffer);\n      };\n    }\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(event) {\n      var _this3 = this;\n\n      event.preventDefault();\n      ipfs.files.add(this.state.buffer, function (error, result) {\n        if (error) {\n          console.error(error);\n          return;\n        }\n\n        return _this3.setState({\n          ipfsHash: result[0].hash\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"col-md-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        className: \"navbar pure-menu pure-menu-horizontal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"#\",\n        className: \"pure-menu-heading pure-menu-link\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, \"IPFS File Upload DApp\")), React.createElement(\"main\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pure-g\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"pure-u-1-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, \"Your Image\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, \"This image is stored on IPFS & The Ethereum Blockchain!\"), React.createElement(\"img\", {\n        src: \"https://ipfs.io/ipfs/\".concat(this.state.ipfsHash),\n        alt: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }, \"Upload Image\"), React.createElement(\"form\", {\n        onSubmit: this.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"file\",\n        onChange: this.captureFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      })))))));\n    }\n  }]);\n\n  return Patient;\n}(Component);\n\nexport default CreateMedical;","map":{"version":3,"sources":["/home/cutyremon/blockChain/reactjs_ethereum/frontend/src/Components/CreateMedical.js"],"names":["React","Component","ipfs","IPFSUploader","IPFS","Patient","props","state","ipfsHash","web3","buffer","captureFile","bind","onSubmit","event","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","setState","Buffer","result","console","log","add","error","hash","CreateMedical"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,IAAP,MAAiB,MAAjB;;IAEMC,O;;;;;AACN;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAGA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAIA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA,mBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,iFAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAE,EADD;AAETC,MAAAA,IAAI,EAAE,IAFG;AAGTC,MAAAA,MAAM,EAAE;AAHC,KAAb;AAKA,UAAKC,WAAL,GAAmB,MAAKA,WAAL,CAAiBC,IAAjB,uDAAnB;AACA,UAAKC,QAAL,GAAgB,MAAKA,QAAL,CAAcD,IAAd,uDAAhB;AATiB;AAUlB,G,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;gCAEYE,K,EAAO;AAAA;;AACjBA,MAAAA,KAAK,CAACC,cAAN;AACA,UAAMC,IAAI,GAAGF,KAAK,CAACG,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAb;AACA,UAAMC,MAAM,GAAG,IAAIC,MAAM,CAACC,UAAX,EAAf;AACAF,MAAAA,MAAM,CAACG,iBAAP,CAAyBN,IAAzB;;AACAG,MAAAA,MAAM,CAACI,SAAP,GAAmB,YAAM;AACrB,QAAA,MAAI,CAACC,QAAL,CAAc;AAAEd,UAAAA,MAAM,EAAEe,MAAM,CAACN,MAAM,CAACO,MAAR;AAAhB,SAAd;;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsB,MAAI,CAACrB,KAAL,CAAWG,MAAjC;AACH,OAHD;AAID;;;6BAEQI,K,EAAO;AAAA;;AACdA,MAAAA,KAAK,CAACC,cAAN;AACAb,MAAAA,IAAI,CAACgB,KAAL,CAAWW,GAAX,CAAe,KAAKtB,KAAL,CAAWG,MAA1B,EAAkC,UAACoB,KAAD,EAAQJ,MAAR,EAAmB;AACjD,YAAII,KAAJ,EAAW;AACPH,UAAAA,OAAO,CAACG,KAAR,CAAcA,KAAd;AACA;AACH;;AACD,eAAO,MAAI,CAACN,QAAL,CAAc;AAAEhB,UAAAA,QAAQ,EAAEkB,MAAM,CAAC,CAAD,CAAN,CAAUK;AAAtB,SAAd,CAAP;AACH,OAND;AAOD;;;6BAEQ;AACP,aACI;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,uCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAG,QAAA,IAAI,EAAC,GAAR;AAAY,QAAA,SAAS,EAAC,kCAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADJ,CADJ,EAKI;AAAM,QAAA,SAAS,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mEAFJ,EAGI;AAAK,QAAA,GAAG,iCAA0B,KAAKxB,KAAL,CAAWC,QAArC,CAAR;AAAyD,QAAA,GAAG,EAAC,EAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAJJ,EAKI;AAAM,QAAA,QAAQ,EAAE,KAAKK,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,QAAQ,EAAE,KAAKF,WAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CALJ,CADJ,CADJ,CALJ,CADJ,CADJ;AAwBD;;;;EAxPqBV,S;;AA0PtB,eAAe+B,aAAf","sourcesContent":["import React, { Component } from 'react';\nimport ipfs from './ipfs';\nimport IPFSUploader from 'ipfs-image-web-upload';\nimport IPFS from 'ipfs';\n\nclass Patient extends Component {\n//   constructor(props) {\n//     super();\n//     this.state = {\n//       ipfsHashData: \"\",\n//       ipfsHashImg: \"\"\n//     }\n\n//   }\n\n  \n// //   loadFile= ()=> {\n// //     var input, file, fr;\n\n// //     input = document.getElementById('fileinput');\n\n// //     file = input.files[0];\n// //     fr = new FileReader();\n// //     fr.onload = receivedText();\n     \n\n// //     async function receivedText() {\n// //         fr = new FileReader();\n// //         fr.readAsBinaryString(file);\n// //         let contentdata = await Buffer.from(btoa(fr.result),\"base64\")\n         \n// //         //IPFS START\n// //         const repoPath = 'ipfs-1111' //+ Math.random()\n// //         const ipfs1 = new IPFS({ repo: repoPath })\n// // let ipfs2= ipfs1;\n// //          ipfs1.on('ready', () => {\n// //             const files = [\n// //             {\n// //                 path: 'image.png',\n// //                 content: Buffer.from(btoa(fr.result),\"base64\")\n// //             }\n// //             ]\n\n// //             ipfs2.files.add(files, function (err, files) {\n// //                 let url = \"https://ipfs.io/ipfs/\"+files[0].hash;\n// //                 log(\"Storing file on IPFS using Javascript. HASH: https://ipfs.io/ipfs/\"+files[0].hash);\n// //                 let ipfsPath = files[0].hash\n// //                 ipfs.files.cat(ipfsPath, function (err, file) {\n// //                 if (err) {\n// //                     throw err\n// //                 }\n// //                 let img = file.toString(\"base64\");\n// //                 document.getElementById(\"design_display\").src= \"data:image/png;base64,\" + img;\n// //                 })\n// //             })\n \n// //             const log = (line) => {\n// //                 document.getElementById('output').appendChild(document.createTextNode(`${line}\\r\\n`))\n// //             }\n \n \n// //         })\n// //     }\n\n\n// // }\n \n \n// //  loadImage = ()=> {\n// //     var input, file, fr;\n\n// //     input = document.getElementById('inputtext').value;\n         \n// //         //IPFS START\n// //         const repoPath = 'ipfs-1111' //+ Math.random()\n// //         const ipfs = new IPFS({ repo: repoPath })\n\n// //         ipfs.on('ready', () => {\n\n// //                let  ipfsPath = input\n// //                 ipfs.files.cat(ipfsPath, function (err, file) {\n// //                 if (err) {\n// //                     throw err\n// //                 }\n// //                 let img = file.toString(\"base64\");\n// //                 document.getElementById(\"design_display\").src= \"data:image/png;base64,\" + img;\n// //                 })\n \n// //             const log = (line) => {\n// //                 document.getElementById('output').appendChild(document.createTextNode(`${line}\\r\\n`))\n// //             }\n \n \n// //         })\n     \n\n\n// // }\n\n\n\n//   loadImage1 = async (event) => {\n//     console.log(\"huhu\")\n//     var uploader = new IPFSUploader(ipfs);\n// var hash = await uploader.uploadBlob(event.target.files[0]);\n// console.log(\"ma hash\" + hash);\n// this.setState({\n//   ipfsHashImg:hash\n// })\n//     let img_tag = document.getElementById(\"design_display\");\n//     uploader.loadImage(img_tag, hash);\n\n//     // let ipfsPath = input\n//     // console.log(\"loadmig\" + ipfsPath)\n//     // ipfs.files.cat(ipfsPath, function (err, file) {\n//     //   if (err) {\n//     //     console.log(\"error \" +err )\n\n//     //   }\n//     //   let img = file.toString(\"base64\");\n//     //   document.getElementById(\"design_display\").src = \"data:image/png;base64,\" + img;\n//     // })\n\n//     // const log = (line) => {\n//     //   document.getElementById('output').appendChild(document.createTextNode(`${line}\\r\\n`))\n//     // }\n//   }\n\n//   ipfsUpload = async () => {\n//     const buffer = await Buffer.from(\"toi di an thit cho\");\n//     ipfs.add(buffer, (err, ipfsHash) => {\n//       if (err) return console.error(err)\n//       console.log(\"ma ban\" + ipfsHash[0].hash)\n//       this.setState({\n//         ipfsHashData: ipfsHash[0].hash\n//       })\n\n//     })\n//   }\n//   ipfsGetdata = async () => {\n//     ipfs.cat(this.state.ipfsHashData, (err, data) => {\n//       if (err) return console.error(err)\n//       console.log(\"data\" + data.toString())\n//     })\n//   }\n//   render() {\n//     return (\n//       <div className=\"col-md-3\">\n//         <a href=\"#\">\n//           <span>Create medical </span>\n//           <span className=\"pull-right-container\">\n//           </span>\n//         </a>\n//         <input type=\"text\"  ></input>\n//         <input type=\"submit\" onClick={event => this.ipfsUpload()}></input>\n//         <input type=\"submit\" value=\"get data\" onClick={event => this.ipfsGetdata()}></input>\n//         <input type=\"file\" id=\"fileinput\"  onChange ={event=>this.loadImage1(event)}></input>\n//         <input type=\"submit\" value=\"submit file\" onClick={event => this.loadFile()}></input>\n//         {/* <input type=\"submit\" value=\"show file\" onClick={event => this.loadImage(this.state.ipfsHashImg)}></input> */}\n//         <br />\n//         <img id=\"design_display\"/>\n\n//       </div>\n//     )\n//   }\n// }\n\n// export default Patient;\nconstructor(props) {\n  super(props)\n\n  this.state = {\n      ipfsHash: '',\n      web3: null,\n      buffer: null,\n  }\n  this.captureFile = this.captureFile.bind(this);\n  this.onSubmit = this.onSubmit.bind(this);\n}\n\n//   instantiateContract() {\n//     /*\n//      * SMART CONTRACT EXAMPLE\n//      *\n//      * Normally these functions would be called in the context of a\n//      * state management library, but for convenience I've placed them here.\n//      */\n\n//     const contract = require('truffle-contract')\n//     const simpleStorage = contract(SimpleStorageContract)\n//     simpleStorage.setProvider(this.state.web3.currentProvider)\n\n//     // Get accounts.\n//     this.state.web3.eth.getAccounts((error, accounts) => {\n//       simpleStorage.deployed().then((instance) => {\n//         this.simpleStorageInstance = instance\n//         this.setState({ account: accounts[0] })\n//         // Get the value from the contract to prove it worked.\n//         return this.simpleStorageInstance.get.call(accounts[0])\n//       }).then((ipfsHash) => {\n//         // Update state with the result.\n//         return this.setState({ ipfsHash })\n//       })\n//     })\n//   }\n\ncaptureFile(event) {\n  event.preventDefault()\n  const file = event.target.files[0]\n  const reader = new window.FileReader()\n  reader.readAsArrayBuffer(file)\n  reader.onloadend = () => {\n      this.setState({ buffer: Buffer(reader.result) })\n      console.log('buffer', this.state.buffer)\n  }\n}\n\nonSubmit(event) {\n  event.preventDefault()\n  ipfs.files.add(this.state.buffer, (error, result) => {\n      if (error) {\n          console.error(error)\n          return\n      }\n      return this.setState({ ipfsHash: result[0].hash })\n  })\n}\n\nrender() {\n  return (\n      <div className=\"col-md-3\">\n          <div className=\"App\">\n              <nav className=\"navbar pure-menu pure-menu-horizontal\">\n                  <a href=\"#\" className=\"pure-menu-heading pure-menu-link\">IPFS File Upload DApp</a>\n              </nav>\n\n              <main className=\"container\">\n                  <div className=\"pure-g\">\n                      <div className=\"pure-u-1-1\">\n                          <h1>Your Image</h1>\n                          <p>This image is stored on IPFS & The Ethereum Blockchain!</p>\n                          <img src={`https://ipfs.io/ipfs/${this.state.ipfsHash}`} alt=\"\" />\n                          <h2>Upload Image</h2>\n                          <form onSubmit={this.onSubmit} >\n                              <input type='file' onChange={this.captureFile} />\n                              <input type='submit' />\n                          </form>\n                      </div>\n                  </div>\n              </main>\n          </div>\n      </div>\n  );\n}\n}\nexport default CreateMedical;\n"]},"metadata":{},"sourceType":"module"}