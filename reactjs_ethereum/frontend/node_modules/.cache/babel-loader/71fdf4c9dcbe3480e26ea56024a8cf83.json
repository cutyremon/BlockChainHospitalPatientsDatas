{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _awaitAsyncGenerator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar DirFlat = require('./dir-flat');\n\nvar flatToShard = require('./flat-to-shard');\n\nvar Dir = require('./dir');\n\nvar toPathComponents = require('./utils/to-path-components');\n\nvar errCode = require('err-code');\n\nvar first = require('async-iterator-first');\n\nfunction addToTree(_x4, _x5, _x6) {\n  return _addToTree.apply(this, arguments);\n}\n\nfunction _addToTree() {\n  _addToTree = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(elem, tree, options) {\n    var pathElems, lastIndex, parent, currentPath, i, pathElem, last, dir;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            pathElems = toPathComponents(elem.path || '');\n            lastIndex = pathElems.length - 1;\n            parent = tree;\n            currentPath = '';\n            i = 0;\n\n          case 5:\n            if (!(i < pathElems.length)) {\n              _context2.next = 30;\n              break;\n            }\n\n            pathElem = pathElems[i];\n            currentPath += \"\".concat(currentPath ? '/' : '').concat(pathElem);\n            last = i === lastIndex;\n            parent.dirty = true;\n            parent.cid = null;\n            parent.size = null;\n\n            if (!last) {\n              _context2.next = 20;\n              break;\n            }\n\n            _context2.next = 15;\n            return parent.put(pathElem, elem);\n\n          case 15:\n            _context2.next = 17;\n            return flatToShard(null, parent, options.shardSplitThreshold, options);\n\n          case 17:\n            tree = _context2.sent;\n            _context2.next = 27;\n            break;\n\n          case 20:\n            _context2.next = 22;\n            return parent.get(pathElem);\n\n          case 22:\n            dir = _context2.sent;\n\n            if (!dir || !(dir instanceof Dir)) {\n              dir = new DirFlat({\n                dir: true,\n                parent: parent,\n                parentKey: pathElem,\n                path: currentPath,\n                dirty: true,\n                flat: true\n              }, options);\n            }\n\n            _context2.next = 26;\n            return parent.put(pathElem, dir);\n\n          case 26:\n            parent = dir;\n\n          case 27:\n            i++;\n            _context2.next = 5;\n            break;\n\n          case 30:\n            return _context2.abrupt(\"return\", tree);\n\n          case 31:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _addToTree.apply(this, arguments);\n}\n\nfunction treeBuilder(_x, _x2, _x3) {\n  return _treeBuilder.apply(this, arguments);\n}\n\nfunction _treeBuilder() {\n  _treeBuilder = _wrapAsyncGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(source, ipld, options) {\n    var tree, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, entry, unwrapped, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, _entry;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            tree = new DirFlat({\n              root: true,\n              dir: true,\n              path: '',\n              dirty: true,\n              flat: true\n            }, options);\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 3;\n            _iterator = _asyncIterator(source);\n\n          case 5:\n            _context.next = 7;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 7:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 11;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 11:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 22;\n              break;\n            }\n\n            entry = _value;\n            _context.next = 16;\n            return _awaitAsyncGenerator(addToTree(entry, tree, options));\n\n          case 16:\n            tree = _context.sent;\n            _context.next = 19;\n            return entry;\n\n          case 19:\n            _iteratorNormalCompletion = true;\n            _context.next = 5;\n            break;\n\n          case 22:\n            _context.next = 28;\n            break;\n\n          case 24:\n            _context.prev = 24;\n            _context.t0 = _context[\"catch\"](3);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 28:\n            _context.prev = 28;\n            _context.prev = 29;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 33;\n              break;\n            }\n\n            _context.next = 33;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 33:\n            _context.prev = 33;\n\n            if (!_didIteratorError) {\n              _context.next = 36;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 36:\n            return _context.finish(33);\n\n          case 37:\n            return _context.finish(28);\n\n          case 38:\n            if (!tree) {\n              _context.next = 84;\n              break;\n            }\n\n            if (options.wrapWithDirectory) {\n              _context.next = 48;\n              break;\n            }\n\n            if (!(tree.childCount() > 1)) {\n              _context.next = 42;\n              break;\n            }\n\n            throw errCode(new Error('detected more than one root'), 'ERR_MORE_THAN_ONE_ROOT');\n\n          case 42:\n            _context.next = 44;\n            return _awaitAsyncGenerator(first(tree.eachChildSeries()));\n\n          case 44:\n            unwrapped = _context.sent;\n\n            if (unwrapped) {\n              _context.next = 47;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 47:\n            tree = unwrapped.child;\n\n          case 48:\n            if (tree.dir) {\n              _context.next = 50;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 50:\n            _iteratorNormalCompletion2 = true;\n            _didIteratorError2 = false;\n            _context.prev = 52;\n            _iterator2 = _asyncIterator(tree.flush(tree.path, ipld));\n\n          case 54:\n            _context.next = 56;\n            return _awaitAsyncGenerator(_iterator2.next());\n\n          case 56:\n            _step2 = _context.sent;\n            _iteratorNormalCompletion2 = _step2.done;\n            _context.next = 60;\n            return _awaitAsyncGenerator(_step2.value);\n\n          case 60:\n            _value2 = _context.sent;\n\n            if (_iteratorNormalCompletion2) {\n              _context.next = 68;\n              break;\n            }\n\n            _entry = _value2;\n            _context.next = 65;\n            return _entry;\n\n          case 65:\n            _iteratorNormalCompletion2 = true;\n            _context.next = 54;\n            break;\n\n          case 68:\n            _context.next = 74;\n            break;\n\n          case 70:\n            _context.prev = 70;\n            _context.t1 = _context[\"catch\"](52);\n            _didIteratorError2 = true;\n            _iteratorError2 = _context.t1;\n\n          case 74:\n            _context.prev = 74;\n            _context.prev = 75;\n\n            if (!(!_iteratorNormalCompletion2 && _iterator2.return != null)) {\n              _context.next = 79;\n              break;\n            }\n\n            _context.next = 79;\n            return _awaitAsyncGenerator(_iterator2.return());\n\n          case 79:\n            _context.prev = 79;\n\n            if (!_didIteratorError2) {\n              _context.next = 82;\n              break;\n            }\n\n            throw _iteratorError2;\n\n          case 82:\n            return _context.finish(79);\n\n          case 83:\n            return _context.finish(74);\n\n          case 84:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[3, 24, 28, 38], [29,, 33, 37], [52, 70, 74, 84], [75,, 79, 83]]);\n  }));\n  return _treeBuilder.apply(this, arguments);\n}\n\nmodule.exports = treeBuilder;","map":null,"metadata":{},"sourceType":"script"}