{"ast":null,"code":"'use strict';\n\nvar parallel = require('async/parallel');\n\nvar promisify = require('promisify-es6');\n\nmodule.exports = function (self) {\n  return promisify(function (callback) {\n    callback = callback || function noop() {};\n\n    self.log('stop');\n\n    if (self.state.state() === 'stopped') {\n      return callback(new Error('Already stopped'));\n    }\n\n    if (self.state.state() !== 'running') {\n      return callback(new Error('Not able to stop from state: ' + self.state.state()));\n    }\n\n    self.state.stop();\n\n    self._blockService.unsetExchange();\n\n    self._bitswap.stop();\n\n    self._preload.stop();\n\n    parallel([function (cb) {\n      return self._ipns.republisher.stop(cb);\n    }, function (cb) {\n      return self._mfsPreload.stop(cb);\n    }, function (cb) {\n      var libp2p = self.libp2p;\n      self.libp2p = null;\n      libp2p.stop(cb);\n    }], function (err) {\n      self._repo.close(function (closeErr) {\n        if (err || closeErr) {\n          self.emit('error', err || closeErr);\n          return callback(err || closeErr);\n        }\n\n        self.state.stopped();\n        self.emit('stop');\n        callback();\n      });\n    });\n  });\n};","map":null,"metadata":{},"sourceType":"script"}