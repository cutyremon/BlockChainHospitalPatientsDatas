{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/cutyremon/blockChain/reactjs_ethereum/frontend/node_modules/@babel/runtime/helpers/inherits\");\n\nvar pull = require('pull-stream');\n\nvar pushable = require('pull-pushable');\n\nvar Duplex = require('readable-stream').Duplex;\n\nvar AddHelper =\n/*#__PURE__*/\nfunction (_Duplex) {\n  _inherits(AddHelper, _Duplex);\n\n  function AddHelper(pullStream, push, options) {\n    var _this;\n\n    _classCallCheck(this, AddHelper);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddHelper).call(this, Object.assign({\n      objectMode: true\n    }, options)));\n    _this._pullStream = pullStream;\n    _this._pushable = push;\n    _this._waitingPullFlush = [];\n    return _this;\n  }\n\n  _createClass(AddHelper, [{\n    key: \"_read\",\n    value: function _read() {\n      var _this2 = this;\n\n      this._pullStream(null, function (end, data) {\n        while (_this2._waitingPullFlush.length) {\n          var cb = _this2._waitingPullFlush.shift();\n\n          cb();\n        }\n\n        if (end) {\n          if (end instanceof Error) {\n            _this2.emit('error', end);\n          } else {\n            _this2.push(null);\n          }\n        } else {\n          _this2.push(data);\n        }\n      });\n    }\n  }, {\n    key: \"_write\",\n    value: function _write(chunk, encoding, callback) {\n      this._waitingPullFlush.push(callback);\n\n      this._pushable.push(chunk);\n    }\n  }]);\n\n  return AddHelper;\n}(Duplex);\n\nmodule.exports = function (self) {\n  return function (options) {\n    options = options || {};\n    var p = pushable();\n    var s = pull(p, self.addPullStream(options));\n    var retStream = new AddHelper(s, p);\n    retStream.once('finish', function () {\n      return p.end();\n    });\n    return retStream;\n  };\n};","map":null,"metadata":{},"sourceType":"script"}